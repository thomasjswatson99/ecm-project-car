

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Tue Mar 23 11:17:05 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=3
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=3
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=3
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=3
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=2
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1
    63                           	psect	text52,global,reloc=2,class=CODE,delta=1
    64                           	psect	text53,global,reloc=2,class=CODE,delta=1
    65                           	psect	text54,global,reloc=2,class=CODE,delta=1
    66                           	psect	text55,global,reloc=2,class=CODE,delta=1
    67                           	psect	text56,global,reloc=2,class=CODE,delta=1
    68                           	psect	text57,global,reloc=2,class=CODE,delta=1
    69                           	psect	text58,global,reloc=2,class=CODE,delta=1
    70                           	psect	text59,global,reloc=2,class=CODE,delta=1
    71                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    72                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    75                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    76                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    77  0000                     
    78                           ; Version 2.20
    79                           ; Generated 05/05/2020 GMT
    80                           ; 
    81                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    82                           ; All rights reserved.
    83                           ; 
    84                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    85                           ; 
    86                           ; Redistribution and use in source and binary forms, with or without modification, are
    87                           ; permitted provided that the following conditions are met:
    88                           ; 
    89                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    90                           ;        conditions and the following disclaimer.
    91                           ; 
    92                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    93                           ;        of conditions and the following disclaimer in the documentation and/or other
    94                           ;        materials provided with the distribution.
    95                           ; 
    96                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    97                           ;        software without specific prior written permission.
    98                           ; 
    99                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   100                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   101                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   102                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   103                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   104                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   105                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   106                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   107                           ; 
   108                           ; 
   109                           ; Code-generator required, PIC18F67K40 Definitions
   110                           ; 
   111                           ; SFR Addresses
   112  0000                     _INT0PPSbits	set	3568
   113  0000                     _TX4REG	set	3812
   114  0000                     _PIR4bits	set	3639
   115  0000                     _RC4STAbits	set	3815
   116  0000                     _SP4BRGH	set	3814
   117  0000                     _SP4BRGL	set	3813
   118  0000                     _TX4STAbits	set	3816
   119  0000                     _BAUD4CONbits	set	3817
   120  0000                     _RX4PPS	set	3605
   121  0000                     _RC0PPS	set	3682
   122  0000                     _PIR0bits	set	3635
   123  0000                     _PIE0bits	set	3625
   124  0000                     _ANSELBbits	set	3738
   125  0000                     _ANSELFbits	set	3764
   126  0000                     _RC7PPS	set	3689
   127  0000                     _RE2PPS	set	3700
   128  0000                     _SSP2BUF	set	3797
   129  0000                     _SSP2CON2bits	set	3802
   130  0000                     _SSP2CON2	set	3802
   131  0000                     _SSP2STAT	set	3800
   132  0000                     _RD6PPS	set	3696
   133  0000                     _RD5PPS	set	3695
   134  0000                     _SSP2CLKPPS	set	3612
   135  0000                     _SSP2DATPPS	set	3613
   136  0000                     _ANSELDbits	set	3751
   137  0000                     _SSP2ADD	set	3798
   138  0000                     _SSP2CON1bits	set	3801
   139  0000                     _ADPCH	set	3935
   140  0000                     _ADREFbits	set	3928
   141  0000                     _ADRESH	set	3940
   142  0000                     _ADCON0bits	set	3936
   143  0000                     _TMR0L	set	4051
   144  0000                     _TMR0H	set	4052
   145  0000                     _T0CON0bits	set	4053
   146  0000                     _T0CON1bits	set	4054
   147  0000                     _INTCONbits	set	4082
   148  0000                     _TRISBbits	set	3970
   149  0000                     _TRISHbits	set	3976
   150  0000                     _LATDbits	set	3964
   151  0000                     _PORTFbits	set	3982
   152  0000                     _TRISFbits	set	3974
   153  0000                     _LATFbits	set	3966
   154  0000                     _LATHbits	set	3968
   155  0000                     _PWM7CONbits	set	4001
   156  0000                     _PWM6CONbits	set	4004
   157  0000                     _T2PR	set	4028
   158  0000                     _T2CLKCONbits	set	4031
   159  0000                     _T2HLTbits	set	4030
   160  0000                     _T2CONbits	set	4029
   161  0000                     _TRISCbits	set	3971
   162  0000                     _LATCbits	set	3963
   163  0000                     _TRISDbits	set	3972
   164  0000                     _TRISAbits	set	3969
   165  0000                     _LATAbits	set	3961
   166  0000                     _TRISEbits	set	3973
   167  0000                     _LATEbits	set	3965
   168  0000                     _TRISGbits	set	3975
   169  0000                     _LATGbits	set	3967
   170  0000                     _LATG	set	3967
   171  0000                     _LATE	set	3965
   172  0000                     _PWM7DCH	set	4000
   173  0000                     _PWM6DCH	set	4003
   174                           
   175                           	psect	smallconst
   176  000E00                     __psmallconst:
   177                           	callstack 0
   178  000E00  00                 	db	0
   179  000E01                     STR_1:
   180                           
   181                           ; BSR set to: 14
   182  000E01  62                 	db	98	;'b'
   183  000E02  61                 	db	97	;'a'
   184  000E03  74                 	db	116	;'t'
   185  000E04  74                 	db	116	;'t'
   186  000E05  65                 	db	101	;'e'
   187  000E06  72                 	db	114	;'r'
   188  000E07  79                 	db	121	;'y'
   189  000E08  20                 	db	32
   190  000E09  6C                 	db	108	;'l'
   191  000E0A  65                 	db	101	;'e'
   192  000E0B  76                 	db	118	;'v'
   193  000E0C  65                 	db	101	;'e'
   194  000E0D  6C                 	db	108	;'l'
   195  000E0E  20                 	db	32
   196  000E0F  25                 	db	37
   197  000E10  64                 	db	100	;'d'
   198  000E11  25                 	db	37
   199  000E12  00                 	db	0
   200  000E13  00                 	db	0	; dummy byte at the end
   201  0000                     
   202                           ; #config settings
   203                           
   204                           	psect	cinit
   205  00337E                     __pcinit:
   206                           	callstack 0
   207  00337E                     start_initialization:
   208                           	callstack 0
   209  00337E                     __initialization:
   210                           	callstack 0
   211                           
   212                           ; Clear objects allocated to BANK1 (32 bytes)
   213  00337E  EE01  F000         	lfsr	0,__pbssBANK1
   214  003382  0E20               	movlw	32
   215  003384                     clear_0:
   216  003384  6AEE               	clrf	postinc0,c
   217  003386  06E8               	decf	wreg,f,c
   218  003388  E1FD               	bnz	clear_0
   219                           
   220                           ; Clear objects allocated to BANK0 (8 bytes)
   221  00338A  EE00  F0E6         	lfsr	0,__pbssBANK0
   222  00338E  0E08               	movlw	8
   223  003390                     clear_1:
   224  003390  6AEE               	clrf	postinc0,c
   225  003392  06E8               	decf	wreg,f,c
   226  003394  E1FD               	bnz	clear_1
   227  003396                     end_of_initialization:
   228                           	callstack 0
   229  003396                     __end_of__initialization:
   230                           	callstack 0
   231  003396  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   232  003398  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   233  00339A  0E00               	movlw	low (__Lsmallconst shr (0+16))
   234  00339C  6EF8               	movwf	tblptru,c
   235  00339E  0E0E               	movlw	high __Lsmallconst
   236  0033A0  6EF7               	movwf	tblptrh,c
   237  0033A2  0100               	movlb	0
   238  0033A4  EF0A  F007         	goto	_main	;jump to C main() function
   239                           
   240                           	psect	bssBANK0
   241  0000E6                     __pbssBANK0:
   242                           	callstack 0
   243  0000E6                     _nout:
   244                           	callstack 0
   245  0000E6                     	ds	2
   246  0000E8                     _width:
   247                           	callstack 0
   248  0000E8                     	ds	2
   249  0000EA                     _prec:
   250                           	callstack 0
   251  0000EA                     	ds	2
   252  0000EC                     _flags:
   253                           	callstack 0
   254  0000EC                     	ds	2
   255                           
   256                           	psect	bssBANK1
   257  000100                     __pbssBANK1:
   258                           	callstack 0
   259  000100                     _dbuf:
   260                           	callstack 0
   261  000100                     	ds	32
   262                           
   263                           	psect	cstackBANK0
   264  000060                     __pcstackBANK0:
   265                           	callstack 0
   266  000060                     	ds	2
   267  000062                     sprintf@ap:
   268                           	callstack 0
   269                           
   270                           ; 2 bytes @ 0x2
   271  000062                     	ds	2
   272  000064                     sprintf@f:
   273                           	callstack 0
   274                           
   275                           ; 6 bytes @ 0x4
   276  000064                     	ds	6
   277  00006A                     ??_main:
   278                           
   279                           ; 1 bytes @ 0xA
   280  00006A                     	ds	2
   281  00006C                     main@battery_level:
   282                           	callstack 0
   283                           
   284                           ; 10 bytes @ 0xC
   285  00006C                     	ds	10
   286  000076                     main@time:
   287                           	callstack 0
   288                           
   289                           ; 10 bytes @ 0x16
   290  000076                     	ds	10
   291  000080                     main@store:
   292                           	callstack 0
   293                           
   294                           ; 10 bytes @ 0x20
   295  000080                     	ds	10
   296  00008A                     main@forwardPower:
   297                           	callstack 0
   298                           
   299                           ; 2 bytes @ 0x2A
   300  00008A                     	ds	2
   301  00008C                     main@reversePower:
   302                           	callstack 0
   303                           
   304                           ; 2 bytes @ 0x2C
   305  00008C                     	ds	2
   306  00008E                     main@count:
   307                           	callstack 0
   308                           
   309                           ; 2 bytes @ 0x2E
   310  00008E                     	ds	2
   311  000090                     main@maxTime:
   312                           	callstack 0
   313                           
   314                           ; 1 bytes @ 0x30
   315  000090                     	ds	3
   316  000093                     main@complete:
   317                           	callstack 0
   318                           
   319                           ; 1 bytes @ 0x33
   320  000093                     	ds	1
   321  000094                     main@turnSpecs:
   322                           	callstack 0
   323                           
   324                           ; 3 bytes @ 0x34
   325  000094                     	ds	3
   326  000097                     main@oppTurn:
   327                           	callstack 0
   328                           
   329                           ; 3 bytes @ 0x37
   330  000097                     	ds	3
   331  00009A                     main@color:
   332                           	callstack 0
   333                           
   334                           ; 1 bytes @ 0x3A
   335  00009A                     	ds	1
   336  00009B                     main@level:
   337                           	callstack 0
   338                           
   339                           ; 2 bytes @ 0x3B
   340  00009B                     	ds	2
   341  00009D                     main@ambientR:
   342                           	callstack 0
   343                           
   344                           ; 8 bytes @ 0x3D
   345  00009D                     	ds	8
   346  0000A5                     main@ambientG:
   347                           	callstack 0
   348                           
   349                           ; 8 bytes @ 0x45
   350  0000A5                     	ds	8
   351  0000AD                     main@ambientB:
   352                           	callstack 0
   353                           
   354                           ; 8 bytes @ 0x4D
   355  0000AD                     	ds	8
   356  0000B5                     main@ambientC:
   357                           	callstack 0
   358                           
   359                           ; 8 bytes @ 0x55
   360  0000B5                     	ds	8
   361  0000BD                     main@interval:
   362                           	callstack 0
   363                           
   364                           ; 1 bytes @ 0x5D
   365  0000BD                     	ds	1
   366  0000BE                     main@turnR:
   367                           	callstack 0
   368                           
   369                           ; 11 bytes @ 0x5E
   370  0000BE                     	ds	11
   371  0000C9                     main@turnL:
   372                           	callstack 0
   373                           
   374                           ; 11 bytes @ 0x69
   375  0000C9                     	ds	11
   376  0000D4                     main@motions:
   377                           	callstack 0
   378                           
   379                           ; 2 bytes @ 0x74
   380  0000D4                     	ds	2
   381  0000D6                     main@motorR:
   382                           	callstack 0
   383                           
   384                           ; 8 bytes @ 0x76
   385  0000D6                     	ds	8
   386  0000DE                     main@motorL:
   387                           	callstack 0
   388                           
   389                           ; 8 bytes @ 0x7E
   390  0000DE                     	ds	8
   391                           
   392                           	psect	cstackCOMRAM
   393  000001                     __pcstackCOMRAM:
   394                           	callstack 0
   395  000001                     ??_togRTurn:
   396  000001                     ??_togLTurn:
   397  000001                     ??_togMBeam:
   398  000001                     ??_togBrake:
   399  000001                     ??_togHLamp:
   400  000001                     ??_toggleRGB:
   401  000001                     ??_toggleR:
   402  000001                     ??_toggleG:
   403  000001                     ??_toggleB:
   404  000001                     ??_I2C_2_Master_Idle:
   405  000001                     ?_ADC_getval:
   406                           	callstack 0
   407  000001                     ?_strlen:
   408                           	callstack 0
   409  000001                     ?___awdiv:
   410                           	callstack 0
   411  000001                     ?_turnFunction:
   412                           	callstack 0
   413  000001                     ?___aodiv:
   414                           	callstack 0
   415  000001                     ?___aomod:
   416                           	callstack 0
   417  000001                     returnSwitch@C:
   418                           	callstack 0
   419  000001                     sendCharSerial4@charToSend:
   420                           	callstack 0
   421  000001                     calibrate@v:
   422                           	callstack 0
   423  000001                     turnFunction@tL:
   424                           	callstack 0
   425  000001                     ___awdiv@dividend:
   426                           	callstack 0
   427  000001                     fputc@c:
   428                           	callstack 0
   429  000001                     strlen@s:
   430                           	callstack 0
   431  000001                     ___aodiv@dividend:
   432                           	callstack 0
   433  000001                     ___aomod@dividend:
   434                           	callstack 0
   435                           
   436                           ; 8 bytes @ 0x0
   437  000001                     	ds	1
   438  000002                     ??_I2C_2_Master_Read:
   439  000002                     ??_SOS:
   440  000002                     I2C_2_Master_Write@data_byte:
   441                           	callstack 0
   442  000002                     sendStringSerial4@string:
   443                           	callstack 0
   444                           
   445                           ; 2 bytes @ 0x1
   446  000002                     	ds	1
   447  000003                     color_writetoaddr@value:
   448                           	callstack 0
   449  000003                     I2C_2_Master_Read@ack:
   450                           	callstack 0
   451  000003                     calibrate@n:
   452                           	callstack 0
   453  000003                     turnFunction@tR:
   454                           	callstack 0
   455  000003                     ADC_getval@tmpval:
   456                           	callstack 0
   457  000003                     ___awdiv@divisor:
   458                           	callstack 0
   459  000003                     fputc@fp:
   460                           	callstack 0
   461  000003                     strlen@a:
   462                           	callstack 0
   463                           
   464                           ; 2 bytes @ 0x2
   465  000003                     	ds	1
   466  000004                     color_writetoaddr@address:
   467                           	callstack 0
   468  000004                     I2C_2_Master_Read@tmp:
   469                           	callstack 0
   470  000004                     SOS@a:
   471                           	callstack 0
   472                           
   473                           ; 1 bytes @ 0x3
   474  000004                     	ds	1
   475  000005                     ??_fputc:
   476  000005                     ??_color_click_init:
   477  000005                     ??_calibrate:
   478  000005                     ?_color_read:
   479                           	callstack 0
   480  000005                     ?___wmul:
   481                           	callstack 0
   482  000005                     turnFunction@C:
   483                           	callstack 0
   484  000005                     ___awdiv@counter:
   485                           	callstack 0
   486  000005                     ___wmul@multiplier:
   487                           	callstack 0
   488                           
   489                           ; 2 bytes @ 0x4
   490  000005                     	ds	1
   491  000006                     ___awdiv@sign:
   492                           	callstack 0
   493  000006                     turnFunction@turnSpecs:
   494                           	callstack 0
   495                           
   496                           ; 3 bytes @ 0x5
   497  000006                     	ds	1
   498  000007                     ??_color_read:
   499  000007                     ___wmul@multiplicand:
   500                           	callstack 0
   501  000007                     ___awdiv@quotient:
   502                           	callstack 0
   503                           
   504                           ; 2 bytes @ 0x6
   505  000007                     	ds	2
   506  000009                     setMotorPWM@m:
   507                           	callstack 0
   508  000009                     ___wmul@product:
   509                           	callstack 0
   510  000009                     ___aodiv@divisor:
   511                           	callstack 0
   512  000009                     ___aomod@divisor:
   513                           	callstack 0
   514                           
   515                           ; 8 bytes @ 0x8
   516  000009                     	ds	1
   517  00000A                     color_read@start:
   518                           	callstack 0
   519  00000A                     fputs@s:
   520                           	callstack 0
   521                           
   522                           ; 2 bytes @ 0x9
   523  00000A                     	ds	1
   524  00000B                     ??_setMotorPWM:
   525  00000B                     ?___lwdiv:
   526                           	callstack 0
   527  00000B                     color_read@tmp:
   528                           	callstack 0
   529  00000B                     setTurnDelay@tL:
   530                           	callstack 0
   531  00000B                     ___lwdiv@dividend:
   532                           	callstack 0
   533                           
   534                           ; 2 bytes @ 0xA
   535  00000B                     	ds	1
   536  00000C                     fputs@fp:
   537                           	callstack 0
   538                           
   539                           ; 2 bytes @ 0xB
   540  00000C                     	ds	1
   541  00000D                     color_read_RGBC@RGBC:
   542                           	callstack 0
   543  00000D                     setTurnDelay@tR:
   544                           	callstack 0
   545  00000D                     ___lwdiv@divisor:
   546                           	callstack 0
   547                           
   548                           ; 2 bytes @ 0xC
   549  00000D                     	ds	1
   550  00000E                     fputs@c:
   551                           	callstack 0
   552                           
   553                           ; 1 bytes @ 0xD
   554  00000E                     	ds	1
   555  00000F                     scan@C:
   556                           	callstack 0
   557  00000F                     setTurnDelay@battery:
   558                           	callstack 0
   559  00000F                     ___lwdiv@quotient:
   560                           	callstack 0
   561  00000F                     fputs@i:
   562                           	callstack 0
   563                           
   564                           ; 2 bytes @ 0xE
   565  00000F                     	ds	2
   566  000011                     ??_setTurnDelay:
   567  000011                     ?_pad:
   568                           	callstack 0
   569  000011                     ___aodiv@counter:
   570                           	callstack 0
   571  000011                     ___aomod@counter:
   572                           	callstack 0
   573  000011                     ___lwdiv@counter:
   574                           	callstack 0
   575  000011                     scan@R:
   576                           	callstack 0
   577  000011                     pad@fp:
   578                           	callstack 0
   579                           
   580                           ; 2 bytes @ 0x10
   581  000011                     	ds	1
   582  000012                     ___aodiv@sign:
   583                           	callstack 0
   584  000012                     ___aomod@sign:
   585                           	callstack 0
   586  000012                     setMotorPWM@PWMduty:
   587                           	callstack 0
   588                           
   589                           ; 2 bytes @ 0x11
   590  000012                     	ds	1
   591  000013                     ?_abs:
   592                           	callstack 0
   593  000013                     scan@G:
   594                           	callstack 0
   595  000013                     pad@buf:
   596                           	callstack 0
   597  000013                     abs@a:
   598                           	callstack 0
   599  000013                     ___aodiv@quotient:
   600                           	callstack 0
   601                           
   602                           ; 8 bytes @ 0x12
   603  000013                     	ds	1
   604  000014                     initDCmotorsPWM@mL:
   605                           	callstack 0
   606  000014                     stop@mL:
   607                           	callstack 0
   608  000014                     turnAngle@mL:
   609                           	callstack 0
   610  000014                     fullSpeedAhead@mL:
   611                           	callstack 0
   612  000014                     shuffle@mL:
   613                           	callstack 0
   614                           
   615                           ; 2 bytes @ 0x13
   616  000014                     	ds	1
   617  000015                     ??_abs:
   618  000015                     scan@B:
   619                           	callstack 0
   620  000015                     pad@p:
   621                           	callstack 0
   622                           
   623                           ; 2 bytes @ 0x14
   624  000015                     	ds	1
   625  000016                     initDCmotorsPWM@mR:
   626                           	callstack 0
   627  000016                     stop@mR:
   628                           	callstack 0
   629  000016                     turnAngle@mR:
   630                           	callstack 0
   631  000016                     fullSpeedAhead@mR:
   632                           	callstack 0
   633  000016                     shuffle@mR:
   634                           	callstack 0
   635                           
   636                           ; 2 bytes @ 0x15
   637  000016                     	ds	1
   638  000017                     ??_scan:
   639  000017                     ??_pad:
   640                           
   641                           ; 1 bytes @ 0x16
   642  000017                     	ds	1
   643  000018                     ??_stop:
   644  000018                     initDCmotorsPWM@PWMperiod:
   645                           	callstack 0
   646  000018                     shuffle@dist:
   647                           	callstack 0
   648  000018                     turnAngle@delay:
   649                           	callstack 0
   650  000018                     fullSpeedAhead@nomPower:
   651                           	callstack 0
   652  000018                     pad@i:
   653                           	callstack 0
   654                           
   655                           ; 2 bytes @ 0x17
   656  000018                     	ds	1
   657  000019                     shuffle@dir:
   658                           	callstack 0
   659                           
   660                           ; 1 bytes @ 0x18
   661  000019                     	ds	1
   662  00001A                     ??_shuffle:
   663  00001A                     fullSpeedAhead@forward:
   664                           	callstack 0
   665  00001A                     turnAngle@direction:
   666                           	callstack 0
   667  00001A                     pad@w:
   668                           	callstack 0
   669                           
   670                           ; 2 bytes @ 0x19
   671  00001A                     	ds	1
   672  00001B                     ??_fullSpeedAhead:
   673                           
   674                           ; 1 bytes @ 0x1A
   675  00001B                     	ds	1
   676  00001C                     ??_turnAngle:
   677  00001C                     ?_dtoa:
   678                           	callstack 0
   679  00001C                     shuffle@pwr:
   680                           	callstack 0
   681  00001C                     dtoa@fp:
   682                           	callstack 0
   683                           
   684                           ; 2 bytes @ 0x1B
   685  00001C                     	ds	1
   686  00001D                     turnAngle@i:
   687                           	callstack 0
   688                           
   689                           ; 2 bytes @ 0x1C
   690  00001D                     	ds	1
   691  00001E                     identifier@aC:
   692                           	callstack 0
   693  00001E                     dtoa@d:
   694                           	callstack 0
   695                           
   696                           ; 8 bytes @ 0x1D
   697  00001E                     	ds	2
   698  000020                     identifier@aR:
   699                           	callstack 0
   700                           
   701                           ; 2 bytes @ 0x1F
   702  000020                     	ds	2
   703  000022                     identifier@aG:
   704                           	callstack 0
   705                           
   706                           ; 2 bytes @ 0x21
   707  000022                     	ds	2
   708  000024                     identifier@aB:
   709                           	callstack 0
   710                           
   711                           ; 2 bytes @ 0x23
   712  000024                     	ds	2
   713  000026                     ??_dtoa:
   714  000026                     identifier@mL:
   715                           	callstack 0
   716                           
   717                           ; 2 bytes @ 0x25
   718  000026                     	ds	2
   719  000028                     identifier@mR:
   720                           	callstack 0
   721                           
   722                           ; 2 bytes @ 0x27
   723  000028                     	ds	2
   724  00002A                     ??_identifier:
   725                           
   726                           ; 1 bytes @ 0x29
   727  00002A                     	ds	4
   728  00002E                     identifier@color_number:
   729                           	callstack 0
   730  00002E                     _dtoa$2791:
   731                           	callstack 0
   732                           
   733                           ; 2 bytes @ 0x2D
   734  00002E                     	ds	1
   735  00002F                     identifier@redVals:
   736                           	callstack 0
   737                           
   738                           ; 8 bytes @ 0x2E
   739  00002F                     	ds	1
   740  000030                     dtoa@p:
   741                           	callstack 0
   742                           
   743                           ; 2 bytes @ 0x2F
   744  000030                     	ds	2
   745  000032                     dtoa@w:
   746                           	callstack 0
   747                           
   748                           ; 2 bytes @ 0x31
   749  000032                     	ds	2
   750  000034                     dtoa@s:
   751                           	callstack 0
   752                           
   753                           ; 2 bytes @ 0x33
   754  000034                     	ds	2
   755  000036                     dtoa@n:
   756                           	callstack 0
   757                           
   758                           ; 8 bytes @ 0x35
   759  000036                     	ds	1
   760  000037                     identifier@greenVals:
   761                           	callstack 0
   762                           
   763                           ; 8 bytes @ 0x36
   764  000037                     	ds	7
   765  00003E                     dtoa@i:
   766                           	callstack 0
   767                           
   768                           ; 2 bytes @ 0x3D
   769  00003E                     	ds	1
   770  00003F                     identifier@vals:
   771                           	callstack 0
   772                           
   773                           ; 8 bytes @ 0x3E
   774  00003F                     	ds	1
   775  000040                     ?_vfpfcnvrt:
   776                           	callstack 0
   777  000040                     vfpfcnvrt@fp:
   778                           	callstack 0
   779                           
   780                           ; 2 bytes @ 0x3F
   781  000040                     	ds	2
   782  000042                     vfpfcnvrt@fmt:
   783                           	callstack 0
   784                           
   785                           ; 2 bytes @ 0x41
   786  000042                     	ds	2
   787  000044                     vfpfcnvrt@ap:
   788                           	callstack 0
   789                           
   790                           ; 2 bytes @ 0x43
   791  000044                     	ds	2
   792  000046                     ??_vfpfcnvrt:
   793                           
   794                           ; 1 bytes @ 0x45
   795  000046                     	ds	1
   796  000047                     identifier@blueVals:
   797                           	callstack 0
   798                           
   799                           ; 8 bytes @ 0x46
   800  000047                     	ds	1
   801  000048                     vfpfcnvrt@ll:
   802                           	callstack 0
   803                           
   804                           ; 8 bytes @ 0x47
   805  000048                     	ds	7
   806  00004F                     identifier@tracker:
   807                           	callstack 0
   808                           
   809                           ; 2 bytes @ 0x4E
   810  00004F                     	ds	1
   811  000050                     ?_vfprintf:
   812                           	callstack 0
   813  000050                     vfprintf@fp:
   814                           	callstack 0
   815                           
   816                           ; 2 bytes @ 0x4F
   817  000050                     	ds	2
   818  000052                     vfprintf@fmt:
   819                           	callstack 0
   820                           
   821                           ; 2 bytes @ 0x51
   822  000052                     	ds	2
   823  000054                     vfprintf@ap:
   824                           	callstack 0
   825                           
   826                           ; 2 bytes @ 0x53
   827  000054                     	ds	2
   828  000056                     vfprintf@cfmt:
   829                           	callstack 0
   830                           
   831                           ; 2 bytes @ 0x55
   832  000056                     	ds	2
   833  000058                     ?_sprintf:
   834                           	callstack 0
   835  000058                     sprintf@s:
   836                           	callstack 0
   837                           
   838                           ; 2 bytes @ 0x57
   839  000058                     	ds	2
   840  00005A                     sprintf@fmt:
   841                           	callstack 0
   842                           
   843                           ; 2 bytes @ 0x59
   844  00005A                     	ds	4
   845  00005E                     
   846                           ; 1 bytes @ 0x5D
   847 ;;
   848 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   849 ;;
   850 ;; *************** function _main *****************
   851 ;; Defined at:
   852 ;;		line 19 in file "main.c"
   853 ;; Parameters:    Size  Location     Type
   854 ;;		None
   855 ;; Auto vars:     Size  Location     Type
   856 ;;  turnSpecs       3   52[BANK0 ] struct turnInfo
   857 ;;  oppTurn         3   55[BANK0 ] struct turnInfo
   858 ;;  turnL          11  105[BANK0 ] struct turnDelay
   859 ;;  turnR          11   94[BANK0 ] struct turnDelay
   860 ;;  store          10   32[BANK0 ] unsigned char [10]
   861 ;;  time           10   22[BANK0 ] unsigned char [10]
   862 ;;  battery_leve   10   12[BANK0 ] unsigned char [10]
   863 ;;  motorL          8  126[BANK0 ] struct DC_motor
   864 ;;  motorR          8  118[BANK0 ] struct DC_motor
   865 ;;  ambientC        8   85[BANK0 ] struct RGBC_val
   866 ;;  ambientB        8   77[BANK0 ] struct RGBC_val
   867 ;;  ambientG        8   69[BANK0 ] struct RGBC_val
   868 ;;  ambientR        8   61[BANK0 ] struct RGBC_val
   869 ;;  motions         2  116[BANK0 ] int 
   870 ;;  level           2   59[BANK0 ] unsigned int 
   871 ;;  batterySaver    2    0        unsigned int 
   872 ;;  count           2   46[BANK0 ] unsigned int 
   873 ;;  reversePower    2   44[BANK0 ] unsigned int 
   874 ;;  forwardPower    2   42[BANK0 ] unsigned int 
   875 ;;  interval        1   93[BANK0 ] unsigned char 
   876 ;;  color           1   58[BANK0 ] unsigned char 
   877 ;;  complete        1   51[BANK0 ] unsigned char 
   878 ;;  maxTime         1   48[BANK0 ] unsigned char 
   879 ;; Return value:  Size  Location     Type
   880 ;;                  1    wreg      void 
   881 ;; Registers used:
   882 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   883 ;; Tracked objects:
   884 ;;		On entry : 0/0
   885 ;;		On exit  : 0/0
   886 ;;		Unchanged: 0/0
   887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   889 ;;      Locals:         0     122       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   890 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   891 ;;      Totals:         0     124       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   892 ;;Total ram usage:      124 bytes
   893 ;; Hardware stack levels required when called:    9
   894 ;; This function calls:
   895 ;;		_ADC_getval
   896 ;;		_ADC_init
   897 ;;		_Interrupts_colorclick_init
   898 ;;		_Interrupts_init
   899 ;;		_SOS
   900 ;;		_Timer0_init
   901 ;;		___lwdiv
   902 ;;		___wmul
   903 ;;		_color_click_init
   904 ;;		_color_interrupt_clearReset
   905 ;;		_fullSpeedAhead
   906 ;;		_identifier
   907 ;;		_initDCmotorsPWM
   908 ;;		_initDebugs
   909 ;;		_initRGB
   910 ;;		_initUSART4
   911 ;;		_returnSwitch
   912 ;;		_scan
   913 ;;		_sendStringSerial4
   914 ;;		_setTurnDelay
   915 ;;		_shuffle
   916 ;;		_sprintf
   917 ;;		_stop
   918 ;;		_togBrake
   919 ;;		_togHLamp
   920 ;;		_togMBeam
   921 ;;		_toggleRGB
   922 ;;		_turnAngle
   923 ;;		_turnFunction
   924 ;; This function is called by:
   925 ;;		Startup code after reset
   926 ;; This function uses a non-reentrant model
   927 ;;
   928                           
   929                           	psect	text0
   930  000E14                     __ptext0:
   931                           	callstack 0
   932  000E14                     _main:
   933                           	callstack 22
   934  000E14                     
   935                           ;main.c: 22:     initUSART4();
   936  000E14  ECDC  F01A         	call	_initUSART4	;wreg free
   937  000E18                     
   938                           ;main.c: 23:     color_click_init();
   939  000E18  EC8D  F019         	call	_color_click_init	;wreg free
   940  000E1C                     
   941                           ;main.c: 24:     Interrupts_colorclick_init();
   942  000E1C  ECEC  F018         	call	_Interrupts_colorclick_init	;wreg free
   943                           
   944                           ;main.c: 25:     Interrupts_init();
   945  000E20  ECEB  F01A         	call	_Interrupts_init	;wreg free
   946  000E24                     
   947                           ;main.c: 26:     initDebugs();
   948  000E24  EC36  F01A         	call	_initDebugs	;wreg free
   949  000E28                     
   950                           ;main.c: 27:     initRGB();
   951  000E28  EC1D  F01B         	call	_initRGB	;wreg free
   952                           
   953                           ;main.c: 28:     ADC_init();
   954  000E2C  ECF9  F01A         	call	_ADC_init	;wreg free
   955                           
   956                           ;main.c: 29:     Timer0_init();
   957  000E30  ECAC  F01A         	call	_Timer0_init	;wreg free
   958  000E34                     
   959                           ;main.c: 38:     unsigned int forwardPower = 26;
   960  000E34  0E00               	movlw	0
   961  000E36  0100               	movlb	0	; () banked
   962  000E38  6F8B               	movwf	(main@forwardPower+1)& (0+255),b
   963  000E3A  0E1A               	movlw	26
   964  000E3C  6F8A               	movwf	main@forwardPower& (0+255),b
   965  000E3E                     
   966                           ; BSR set to: 0
   967                           ;main.c: 39:     unsigned int reversePower = 40;
   968  000E3E  0E00               	movlw	0
   969  000E40  6F8D               	movwf	(main@reversePower+1)& (0+255),b
   970  000E42  0E28               	movlw	40
   971  000E44  6F8C               	movwf	main@reversePower& (0+255),b
   972  000E46                     
   973                           ; BSR set to: 0
   974                           ;main.c: 41:     char color;;main.c: 42:     char store[10];;main.c: 43:     char time[1
      +                          0];;main.c: 44:     signed int motions = 0;
   975  000E46  0E00               	movlw	0
   976  000E48  6FD5               	movwf	(main@motions+1)& (0+255),b
   977  000E4A  0E00               	movlw	0
   978  000E4C  6FD4               	movwf	main@motions& (0+255),b
   979  000E4E                     
   980                           ; BSR set to: 0
   981                           ;main.c: 45:     char complete = 0;
   982  000E4E  0E00               	movlw	0
   983  000E50  6F93               	movwf	main@complete& (0+255),b
   984  000E52                     
   985                           ; BSR set to: 0
   986                           ;main.c: 46:     char interval = 0;
   987  000E52  0E00               	movlw	0
   988  000E54  6FBD               	movwf	main@interval& (0+255),b
   989  000E56                     
   990                           ; BSR set to: 0
   991                           ;main.c: 47:     char maxTime = 23;
   992  000E56  0E17               	movlw	23
   993  000E58  6F90               	movwf	main@maxTime& (0+255),b
   994  000E5A                     
   995                           ; BSR set to: 0
   996                           ;main.c: 50:     struct DC_motor motorL, motorR;;main.c: 51:     struct turnDelay turnL,
      +                           turnR;;main.c: 52:     struct RGBC_val ambientR, ambientG, ambientB, ambientC;;main.c: 
      +                          55:     TRISFbits.TRISF2=1;
   997  000E5A  8486               	bsf	134,2,c	;volatile
   998  000E5C                     
   999                           ; BSR set to: 0
  1000                           ;main.c: 56:     ANSELFbits.ANSELF2=0;
  1001  000E5C  010E               	movlb	14	; () banked
  1002  000E5E  95B4               	bcf	180,2,b	;volatile
  1003  000E60                     
  1004                           ; BSR set to: 14
  1005                           ;main.c: 59:     level = 20* ADC_getval()/21;
  1006  000E60  ECCC  F01A         	call	_ADC_getval	;wreg free
  1007  000E64  C001  F005         	movff	?_ADC_getval,___wmul@multiplier
  1008  000E68  C002  F006         	movff	?_ADC_getval+1,___wmul@multiplier+1
  1009  000E6C  0E00               	movlw	0
  1010  000E6E  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  1011  000E70  0E14               	movlw	20
  1012  000E72  6E07               	movwf	___wmul@multiplicand^0,c
  1013  000E74  EC10  F01A         	call	___wmul	;wreg free
  1014  000E78  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  1015  000E7C  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  1016  000E80  0E00               	movlw	0
  1017  000E82  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  1018  000E84  0E15               	movlw	21
  1019  000E86  6E0D               	movwf	___lwdiv@divisor^0,c
  1020  000E88  EC9B  F017         	call	___lwdiv	;wreg free
  1021  000E8C  C00B  F09B         	movff	?___lwdiv,main@level
  1022  000E90  C00C  F09C         	movff	?___lwdiv+1,main@level+1
  1023  000E94                     
  1024                           ;main.c: 60:     sprintf(battery_level,"battery level %d%",level);
  1025  000E94  0E6C               	movlw	low main@battery_level
  1026  000E96  6E58               	movwf	sprintf@s^0,c
  1027  000E98  0E00               	movlw	high main@battery_level
  1028  000E9A  6E59               	movwf	(sprintf@s+1)^0,c
  1029  000E9C  0E01               	movlw	low STR_1
  1030  000E9E  6E5A               	movwf	sprintf@fmt^0,c
  1031  000EA0  0E0E               	movlw	high STR_1
  1032  000EA2  6E5B               	movwf	(sprintf@fmt+1)^0,c
  1033  000EA4  C09B  F05C         	movff	main@level,?_sprintf+4
  1034  000EA8  C09C  F05D         	movff	main@level+1,?_sprintf+5
  1035  000EAC  ECC3  F018         	call	_sprintf	;wreg free
  1036  000EB0                     
  1037                           ;main.c: 61:     sendStringSerial4(battery_level);
  1038  000EB0  0E6C               	movlw	low main@battery_level
  1039  000EB2  6E02               	movwf	sendStringSerial4@string^0,c
  1040  000EB4  0E00               	movlw	high main@battery_level
  1041  000EB6  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  1042  000EB8  ECA7  F019         	call	_sendStringSerial4	;wreg free
  1043  000EBC                     
  1044                           ;main.c: 70:     if (level<20)
  1045  000EBC  0100               	movlb	0	; () banked
  1046  000EBE  519C               	movf	(main@level+1)& (0+255),w,b
  1047  000EC0  E107               	bnz	u2971
  1048  000EC2  0E14               	movlw	20
  1049  000EC4  5D9B               	subwf	main@level& (0+255),w,b
  1050  000EC6  B0D8               	btfsc	status,0,c
  1051  000EC8  EF68  F007         	goto	u2971
  1052  000ECC  EF6A  F007         	goto	u2970
  1053  000ED0                     u2971:
  1054  000ED0  EF7A  F007         	goto	l3385
  1055  000ED4                     u2970:
  1056  000ED4                     
  1057                           ; BSR set to: 0
  1058                           ;main.c: 73:         togMBeam();
  1059  000ED4  ECFD  F019         	call	_togMBeam	;wreg free
  1060  000ED8                     
  1061                           ;main.c: 74:         _delay((unsigned long)((200)*(64000000/4000.0)));
  1062  000ED8  0E11               	movlw	17
  1063  000EDA  0100               	movlb	0	; () banked
  1064  000EDC  6F6B               	movwf	(??_main+1)& (0+255),b
  1065  000EDE  0E3C               	movlw	60
  1066  000EE0  6F6A               	movwf	??_main& (0+255),b
  1067  000EE2  0ECB               	movlw	203
  1068  000EE4                     u3137:
  1069  000EE4  2EE8               	decfsz	wreg,f,c
  1070  000EE6  D7FE               	bra	u3137
  1071  000EE8  2F6A               	decfsz	??_main& (0+255),f,b
  1072  000EEA  D7FC               	bra	u3137
  1073  000EEC  2F6B               	decfsz	(??_main+1)& (0+255),f,b
  1074  000EEE  D7FA               	bra	u3137
  1075  000EF0                     
  1076                           ;main.c: 75:         togMBeam();
  1077  000EF0  ECFD  F019         	call	_togMBeam	;wreg free
  1078  000EF4                     l3385:
  1079                           
  1080                           ;main.c: 77:     if(level>90)
  1081  000EF4  0100               	movlb	0	; () banked
  1082  000EF6  519C               	movf	(main@level+1)& (0+255),w,b
  1083  000EF8  E109               	bnz	u2980
  1084  000EFA  0E5B               	movlw	91
  1085  000EFC  5D9B               	subwf	main@level& (0+255),w,b
  1086  000EFE  A0D8               	btfss	status,0,c
  1087  000F00  EF84  F007         	goto	u2981
  1088  000F04  EF86  F007         	goto	u2980
  1089  000F08                     u2981:
  1090  000F08  EF96  F007         	goto	l3393
  1091  000F0C                     u2980:
  1092  000F0C                     
  1093                           ; BSR set to: 0
  1094                           ;main.c: 78:     {;main.c: 79:         togMBeam();
  1095  000F0C  ECFD  F019         	call	_togMBeam	;wreg free
  1096  000F10                     
  1097                           ;main.c: 80:         _delay((unsigned long)((200)*(64000000/4000.0)));
  1098  000F10  0E11               	movlw	17
  1099  000F12  0100               	movlb	0	; () banked
  1100  000F14  6F6B               	movwf	(??_main+1)& (0+255),b
  1101  000F16  0E3C               	movlw	60
  1102  000F18  6F6A               	movwf	??_main& (0+255),b
  1103  000F1A  0ECB               	movlw	203
  1104  000F1C                     u3147:
  1105  000F1C  2EE8               	decfsz	wreg,f,c
  1106  000F1E  D7FE               	bra	u3147
  1107  000F20  2F6A               	decfsz	??_main& (0+255),f,b
  1108  000F22  D7FC               	bra	u3147
  1109  000F24  2F6B               	decfsz	(??_main+1)& (0+255),f,b
  1110  000F26  D7FA               	bra	u3147
  1111  000F28                     
  1112                           ;main.c: 81:         togMBeam();
  1113  000F28  ECFD  F019         	call	_togMBeam	;wreg free
  1114  000F2C                     l3393:
  1115  000F2C                     
  1116                           ;main.c: 86:     setTurnDelay(&turnL, &turnR, batterySaver);
  1117  000F2C  0EC9               	movlw	low main@turnL
  1118  000F2E  6E0B               	movwf	setTurnDelay@tL^0,c
  1119  000F30  0E00               	movlw	high main@turnL
  1120  000F32  6E0C               	movwf	(setTurnDelay@tL+1)^0,c
  1121  000F34  0EBE               	movlw	low main@turnR
  1122  000F36  6E0D               	movwf	setTurnDelay@tR^0,c
  1123  000F38  0E00               	movlw	high main@turnR
  1124  000F3A  6E0E               	movwf	(setTurnDelay@tR+1)^0,c
  1125  000F3C  0E00               	movlw	0
  1126  000F3E  6E10               	movwf	(setTurnDelay@battery+1)^0,c
  1127  000F40  0E05               	movlw	5
  1128  000F42  6E0F               	movwf	setTurnDelay@battery^0,c
  1129  000F44  EC38  F00D         	call	_setTurnDelay	;wreg free
  1130  000F48                     l345:
  1131  000F48  B48E               	btfsc	142,2,c	;volatile
  1132  000F4A  EFA9  F007         	goto	u2991
  1133  000F4E  EFAB  F007         	goto	u2990
  1134  000F52                     u2991:
  1135  000F52  EFA4  F007         	goto	l345
  1136  000F56                     u2990:
  1137  000F56                     
  1138                           ;main.c: 89:     initDCmotorsPWM(200, &motorL, &motorR);
  1139  000F56  0EDE               	movlw	low main@motorL
  1140  000F58  6E14               	movwf	initDCmotorsPWM@mL^0,c
  1141  000F5A  0E00               	movlw	high main@motorL
  1142  000F5C  6E15               	movwf	(initDCmotorsPWM@mL+1)^0,c
  1143  000F5E  0ED6               	movlw	low main@motorR
  1144  000F60  6E16               	movwf	initDCmotorsPWM@mR^0,c
  1145  000F62  0E00               	movlw	high main@motorR
  1146  000F64  6E17               	movwf	(initDCmotorsPWM@mR+1)^0,c
  1147  000F66  0EC8               	movlw	200
  1148  000F68  EC1D  F014         	call	_initDCmotorsPWM
  1149  000F6C                     
  1150                           ;main.c: 90:     toggleRGB();
  1151  000F6C  ECD5  F017         	call	_toggleRGB	;wreg free
  1152  000F70                     
  1153                           ;main.c: 91:     scan(&ambientC,&ambientR,&ambientG,&ambientB);
  1154  000F70  0EB5               	movlw	low main@ambientC
  1155  000F72  6E0F               	movwf	scan@C^0,c
  1156  000F74  0E00               	movlw	high main@ambientC
  1157  000F76  6E10               	movwf	(scan@C+1)^0,c
  1158  000F78  0E9D               	movlw	low main@ambientR
  1159  000F7A  6E11               	movwf	scan@R^0,c
  1160  000F7C  0E00               	movlw	high main@ambientR
  1161  000F7E  6E12               	movwf	(scan@R+1)^0,c
  1162  000F80  0EA5               	movlw	low main@ambientG
  1163  000F82  6E13               	movwf	scan@G^0,c
  1164  000F84  0E00               	movlw	high main@ambientG
  1165  000F86  6E14               	movwf	(scan@G+1)^0,c
  1166  000F88  0EAD               	movlw	low main@ambientB
  1167  000F8A  6E15               	movwf	scan@B^0,c
  1168  000F8C  0E00               	movlw	high main@ambientB
  1169  000F8E  6E16               	movwf	(scan@B+1)^0,c
  1170  000F90  EC5A  F016         	call	_scan	;wreg free
  1171  000F94                     
  1172                           ;main.c: 92:     color_interrupt_clearReset();
  1173  000F94  EC12  F01B         	call	_color_interrupt_clearReset	;wreg free
  1174  000F98                     l348:
  1175  000F98  B48E               	btfsc	142,2,c	;volatile
  1176  000F9A  EFD1  F007         	goto	u3001
  1177  000F9E  EFD3  F007         	goto	u3000
  1178  000FA2                     u3001:
  1179  000FA2  EFCC  F007         	goto	l348
  1180  000FA6                     u3000:
  1181  000FA6  EFB6  F008         	goto	l3465
  1182  000FAA                     l3405:
  1183                           
  1184                           ; BSR set to: 0
  1185                           ;main.c: 98:     {;main.c: 100:         fullSpeedAhead(&motorL,&motorR,forwardPower,1);
  1186  000FAA  0EDE               	movlw	low main@motorL
  1187  000FAC  6E14               	movwf	fullSpeedAhead@mL^0,c
  1188  000FAE  0E00               	movlw	high main@motorL
  1189  000FB0  6E15               	movwf	(fullSpeedAhead@mL+1)^0,c
  1190  000FB2  0ED6               	movlw	low main@motorR
  1191  000FB4  6E16               	movwf	fullSpeedAhead@mR^0,c
  1192  000FB6  0E00               	movlw	high main@motorR
  1193  000FB8  6E17               	movwf	(fullSpeedAhead@mR+1)^0,c
  1194  000FBA  C08A  F018         	movff	main@forwardPower,fullSpeedAhead@nomPower
  1195  000FBE  C08B  F019         	movff	main@forwardPower+1,fullSpeedAhead@nomPower+1
  1196  000FC2  0E01               	movlw	1
  1197  000FC4  6E1A               	movwf	fullSpeedAhead@forward^0,c
  1198  000FC6  EC58  F017         	call	_fullSpeedAhead	;wreg free
  1199  000FCA                     
  1200                           ;main.c: 102:         if (LATHbits.LATH3==1)
  1201  000FCA  A680               	btfss	128,3,c	;volatile
  1202  000FCC  EFEA  F007         	goto	u3011
  1203  000FD0  EFEC  F007         	goto	u3010
  1204  000FD4                     u3011:
  1205  000FD4  EFEF  F007         	goto	l3413
  1206  000FD8                     u3010:
  1207  000FD8                     
  1208                           ;main.c: 103:         {;main.c: 104:             interval++;
  1209  000FD8  0100               	movlb	0	; () banked
  1210  000FDA  2BBD               	incf	main@interval& (0+255),f,b
  1211  000FDC                     
  1212                           ; BSR set to: 0
  1213                           ;main.c: 105:             LATHbits.LATH3=0;
  1214  000FDC  9680               	bcf	128,3,c	;volatile
  1215  000FDE                     l3413:
  1216                           
  1217                           ;main.c: 113:         if (LATDbits.LATD7)
  1218  000FDE  AE7C               	btfss	124,7,c	;volatile
  1219  000FE0  EFF4  F007         	goto	u3021
  1220  000FE4  EFF6  F007         	goto	u3020
  1221  000FE8                     u3021:
  1222  000FE8  EF8A  F008         	goto	l3451
  1223  000FEC                     u3020:
  1224  000FEC                     
  1225                           ;main.c: 114:         {;main.c: 115:             togBrake();
  1226  000FEC  EC5A  F01A         	call	_togBrake	;wreg free
  1227  000FF0                     
  1228                           ;main.c: 116:             stop(&motorL,&motorR);
  1229  000FF0  0EDE               	movlw	low main@motorL
  1230  000FF2  6E14               	movwf	stop@mL^0,c
  1231  000FF4  0E00               	movlw	high main@motorL
  1232  000FF6  6E15               	movwf	(stop@mL+1)^0,c
  1233  000FF8  0ED6               	movlw	low main@motorR
  1234  000FFA  6E16               	movwf	stop@mR^0,c
  1235  000FFC  0E00               	movlw	high main@motorR
  1236  000FFE  6E17               	movwf	(stop@mR+1)^0,c
  1237  001000  EC6C  F018         	call	_stop	;wreg free
  1238  001004                     
  1239                           ;main.c: 117:             togBrake();
  1240  001004  EC5A  F01A         	call	_togBrake	;wreg free
  1241                           
  1242                           ;main.c: 118:             color = identifier(&ambientC,&ambientR,&ambientG,&ambientB, &m
      +                          otorL, &motorR);
  1243  001008  0EB5               	movlw	low main@ambientC
  1244  00100A  6E1E               	movwf	identifier@aC^0,c
  1245  00100C  0E00               	movlw	high main@ambientC
  1246  00100E  6E1F               	movwf	(identifier@aC+1)^0,c
  1247  001010  0E9D               	movlw	low main@ambientR
  1248  001012  6E20               	movwf	identifier@aR^0,c
  1249  001014  0E00               	movlw	high main@ambientR
  1250  001016  6E21               	movwf	(identifier@aR+1)^0,c
  1251  001018  0EA5               	movlw	low main@ambientG
  1252  00101A  6E22               	movwf	identifier@aG^0,c
  1253  00101C  0E00               	movlw	high main@ambientG
  1254  00101E  6E23               	movwf	(identifier@aG+1)^0,c
  1255  001020  0EAD               	movlw	low main@ambientB
  1256  001022  6E24               	movwf	identifier@aB^0,c
  1257  001024  0E00               	movlw	high main@ambientB
  1258  001026  6E25               	movwf	(identifier@aB+1)^0,c
  1259  001028  0EDE               	movlw	low main@motorL
  1260  00102A  6E26               	movwf	identifier@mL^0,c
  1261  00102C  0E00               	movlw	high main@motorL
  1262  00102E  6E27               	movwf	(identifier@mL+1)^0,c
  1263  001030  0ED6               	movlw	low main@motorR
  1264  001032  6E28               	movwf	identifier@mR^0,c
  1265  001034  0E00               	movlw	high main@motorR
  1266  001036  6E29               	movwf	(identifier@mR+1)^0,c
  1267  001038  ECA2  F009         	call	_identifier	;wreg free
  1268  00103C  0100               	movlb	0	; () banked
  1269  00103E  6F9A               	movwf	main@color& (0+255),b
  1270  001040                     
  1271                           ; BSR set to: 0
  1272                           ;main.c: 119:             store[motions] = color;
  1273  001040  0E80               	movlw	low main@store
  1274  001042  25D4               	addwf	main@motions& (0+255),w,b
  1275  001044  6ED9               	movwf	fsr2l,c
  1276  001046  0E00               	movlw	high main@store
  1277  001048  21D5               	addwfc	(main@motions+1)& (0+255),w,b
  1278  00104A  6EDA               	movwf	fsr2h,c
  1279  00104C  C09A  FFDF         	movff	main@color,indf2
  1280  001050                     
  1281                           ; BSR set to: 0
  1282                           ;main.c: 122:             if (color == 1)
  1283  001050  059A               	decf	main@color& (0+255),w,b
  1284  001052  A4D8               	btfss	status,2,c
  1285  001054  EF2E  F008         	goto	u3031
  1286  001058  EF30  F008         	goto	u3030
  1287  00105C                     u3031:
  1288  00105C  EF48  F008         	goto	l3435
  1289  001060                     u3030:
  1290  001060                     
  1291                           ; BSR set to: 0
  1292                           ;main.c: 123:             {;main.c: 124:                 LATDbits.LATD7 = 0;
  1293  001060  9E7C               	bcf	124,7,c	;volatile
  1294  001062                     
  1295                           ; BSR set to: 0
  1296                           ;main.c: 125:                 color_interrupt_clearReset();
  1297  001062  EC12  F01B         	call	_color_interrupt_clearReset	;wreg free
  1298  001066                     
  1299                           ;main.c: 126:                 complete = 1;
  1300  001066  0E01               	movlw	1
  1301  001068  0100               	movlb	0	; () banked
  1302  00106A  6F93               	movwf	main@complete& (0+255),b
  1303  00106C                     
  1304                           ; BSR set to: 0
  1305                           ;main.c: 127:                 time[motions] = interval;
  1306  00106C  0E76               	movlw	low main@time
  1307  00106E  25D4               	addwf	main@motions& (0+255),w,b
  1308  001070  6ED9               	movwf	fsr2l,c
  1309  001072  0E00               	movlw	high main@time
  1310  001074  21D5               	addwfc	(main@motions+1)& (0+255),w,b
  1311  001076  6EDA               	movwf	fsr2h,c
  1312  001078  C0BD  FFDF         	movff	main@interval,indf2
  1313  00107C                     
  1314                           ; BSR set to: 0
  1315                           ;main.c: 128:                 store[motions] = 0;
  1316  00107C  0E80               	movlw	low main@store
  1317  00107E  25D4               	addwf	main@motions& (0+255),w,b
  1318  001080  6ED9               	movwf	fsr2l,c
  1319  001082  0E00               	movlw	high main@store
  1320  001084  21D5               	addwfc	(main@motions+1)& (0+255),w,b
  1321  001086  6EDA               	movwf	fsr2h,c
  1322  001088  0E00               	movlw	0
  1323  00108A  6EDF               	movwf	indf2,c
  1324                           
  1325                           ;main.c: 129:             }
  1326  00108C  EF8A  F008         	goto	l3451
  1327  001090                     l3435:
  1328                           
  1329                           ; BSR set to: 0
  1330                           ;main.c: 132:             {;main.c: 133:                 shuffle(&motorL, &motorR, 1, 0)
      +                          ;
  1331  001090  0EDE               	movlw	low main@motorL
  1332  001092  6E14               	movwf	shuffle@mL^0,c
  1333  001094  0E00               	movlw	high main@motorL
  1334  001096  6E15               	movwf	(shuffle@mL+1)^0,c
  1335  001098  0ED6               	movlw	low main@motorR
  1336  00109A  6E16               	movwf	shuffle@mR^0,c
  1337  00109C  0E00               	movlw	high main@motorR
  1338  00109E  6E17               	movwf	(shuffle@mR+1)^0,c
  1339  0010A0  0E01               	movlw	1
  1340  0010A2  6E18               	movwf	shuffle@dist^0,c
  1341  0010A4  0E00               	movlw	0
  1342  0010A6  6E19               	movwf	shuffle@dir^0,c
  1343  0010A8  EC88  F013         	call	_shuffle	;wreg free
  1344  0010AC                     
  1345                           ;main.c: 134:                 time[motions] = interval;
  1346  0010AC  0E76               	movlw	low main@time
  1347  0010AE  0100               	movlb	0	; () banked
  1348  0010B0  25D4               	addwf	main@motions& (0+255),w,b
  1349  0010B2  6ED9               	movwf	fsr2l,c
  1350  0010B4  0E00               	movlw	high main@time
  1351  0010B6  21D5               	addwfc	(main@motions+1)& (0+255),w,b
  1352  0010B8  6EDA               	movwf	fsr2h,c
  1353  0010BA  C0BD  FFDF         	movff	main@interval,indf2
  1354  0010BE                     
  1355                           ; BSR set to: 0
  1356                           ;main.c: 135:                 motions ++;
  1357  0010BE  4BD4               	infsnz	main@motions& (0+255),f,b
  1358  0010C0  2BD5               	incf	(main@motions+1)& (0+255),f,b
  1359  0010C2                     
  1360                           ; BSR set to: 0
  1361                           ;main.c: 139:                 struct turnInfo turnSpecs = turnFunction(&turnL, &turnR, c
      +                          olor);
  1362  0010C2  0EC9               	movlw	low main@turnL
  1363  0010C4  6E01               	movwf	turnFunction@tL^0,c
  1364  0010C6  0E00               	movlw	high main@turnL
  1365  0010C8  6E02               	movwf	(turnFunction@tL+1)^0,c
  1366  0010CA  0EBE               	movlw	low main@turnR
  1367  0010CC  6E03               	movwf	turnFunction@tR^0,c
  1368  0010CE  0E00               	movlw	high main@turnR
  1369  0010D0  6E04               	movwf	(turnFunction@tR+1)^0,c
  1370  0010D2  C09A  F005         	movff	main@color,turnFunction@C
  1371  0010D6  EC8D  F00E         	call	_turnFunction	;wreg free
  1372  0010DA  C001  F094         	movff	?_turnFunction,main@turnSpecs
  1373  0010DE  C002  F095         	movff	?_turnFunction+1,main@turnSpecs+1
  1374  0010E2  C003  F096         	movff	?_turnFunction+2,main@turnSpecs+2
  1375  0010E6                     
  1376                           ;main.c: 140:                 turnAngle(&motorL, &motorR, turnSpecs.delay, turnSpecs.dir
      +                          ection);
  1377  0010E6  0EDE               	movlw	low main@motorL
  1378  0010E8  6E14               	movwf	turnAngle@mL^0,c
  1379  0010EA  0E00               	movlw	high main@motorL
  1380  0010EC  6E15               	movwf	(turnAngle@mL+1)^0,c
  1381  0010EE  0ED6               	movlw	low main@motorR
  1382  0010F0  6E16               	movwf	turnAngle@mR^0,c
  1383  0010F2  0E00               	movlw	high main@motorR
  1384  0010F4  6E17               	movwf	(turnAngle@mR+1)^0,c
  1385  0010F6  C095  F018         	movff	main@turnSpecs+1,turnAngle@delay
  1386  0010FA  C096  F019         	movff	main@turnSpecs+2,turnAngle@delay+1
  1387  0010FE  C094  F01A         	movff	main@turnSpecs,turnAngle@direction
  1388  001102  6A1B               	clrf	(turnAngle@direction+1)^0,c
  1389  001104  EC13  F012         	call	_turnAngle	;wreg free
  1390  001108                     
  1391                           ;main.c: 141:                 interval = 0;
  1392  001108  0E00               	movlw	0
  1393  00110A  0100               	movlb	0	; () banked
  1394  00110C  6FBD               	movwf	main@interval& (0+255),b
  1395  00110E                     
  1396                           ; BSR set to: 0
  1397                           ;main.c: 142:                 LATDbits.LATD7 = 0;
  1398  00110E  9E7C               	bcf	124,7,c	;volatile
  1399  001110                     
  1400                           ; BSR set to: 0
  1401                           ;main.c: 143:                 color_interrupt_clearReset();
  1402  001110  EC12  F01B         	call	_color_interrupt_clearReset	;wreg free
  1403  001114                     l3451:
  1404                           
  1405                           ;main.c: 151:         if (interval > maxTime)
  1406  001114  0100               	movlb	0	; () banked
  1407  001116  51BD               	movf	main@interval& (0+255),w,b
  1408  001118  5D90               	subwf	main@maxTime& (0+255),w,b
  1409  00111A  B0D8               	btfsc	status,0,c
  1410  00111C  EF92  F008         	goto	u3041
  1411  001120  EF94  F008         	goto	u3040
  1412  001124                     u3041:
  1413  001124  EFB6  F008         	goto	l3465
  1414  001128                     u3040:
  1415  001128                     
  1416                           ; BSR set to: 0
  1417                           ;main.c: 152:         {;main.c: 153:             time[motions] = interval;
  1418  001128  0E76               	movlw	low main@time
  1419  00112A  25D4               	addwf	main@motions& (0+255),w,b
  1420  00112C  6ED9               	movwf	fsr2l,c
  1421  00112E  0E00               	movlw	high main@time
  1422  001130  21D5               	addwfc	(main@motions+1)& (0+255),w,b
  1423  001132  6EDA               	movwf	fsr2h,c
  1424  001134  C0BD  FFDF         	movff	main@interval,indf2
  1425                           
  1426                           ;main.c: 154:             store[motions] = 0;
  1427  001138  0E80               	movlw	low main@store
  1428  00113A  25D4               	addwf	main@motions& (0+255),w,b
  1429  00113C  6ED9               	movwf	fsr2l,c
  1430  00113E  0E00               	movlw	high main@store
  1431  001140  21D5               	addwfc	(main@motions+1)& (0+255),w,b
  1432  001142  6EDA               	movwf	fsr2h,c
  1433  001144  0E00               	movlw	0
  1434  001146  6EDF               	movwf	indf2,c
  1435  001148                     
  1436                           ; BSR set to: 0
  1437                           ;main.c: 155:             complete = 1;
  1438  001148  0E01               	movlw	1
  1439  00114A  6F93               	movwf	main@complete& (0+255),b
  1440  00114C                     
  1441                           ; BSR set to: 0
  1442                           ;main.c: 156:             togBrake();
  1443  00114C  EC5A  F01A         	call	_togBrake	;wreg free
  1444  001150                     
  1445                           ;main.c: 157:             stop(&motorL,&motorR);
  1446  001150  0EDE               	movlw	low main@motorL
  1447  001152  6E14               	movwf	stop@mL^0,c
  1448  001154  0E00               	movlw	high main@motorL
  1449  001156  6E15               	movwf	(stop@mL+1)^0,c
  1450  001158  0ED6               	movlw	low main@motorR
  1451  00115A  6E16               	movwf	stop@mR^0,c
  1452  00115C  0E00               	movlw	high main@motorR
  1453  00115E  6E17               	movwf	(stop@mR+1)^0,c
  1454  001160  EC6C  F018         	call	_stop	;wreg free
  1455  001164                     
  1456                           ;main.c: 158:             togBrake();
  1457  001164  EC5A  F01A         	call	_togBrake	;wreg free
  1458  001168                     
  1459                           ;main.c: 159:             SOS();
  1460  001168  EC0A  F017         	call	_SOS	;wreg free
  1461  00116C                     l3465:
  1462                           
  1463                           ;main.c: 97:     while((motions < 10)&&(complete == 0))
  1464  00116C  0100               	movlb	0	; () banked
  1465  00116E  BFD5               	btfsc	(main@motions+1)& (0+255),7,b
  1466  001170  EFC5  F008         	goto	u3050
  1467  001174  51D5               	movf	(main@motions+1)& (0+255),w,b
  1468  001176  E107               	bnz	u3051
  1469  001178  0E0A               	movlw	10
  1470  00117A  5DD4               	subwf	main@motions& (0+255),w,b
  1471  00117C  B0D8               	btfsc	status,0,c
  1472  00117E  EFC3  F008         	goto	u3051
  1473  001182  EFC5  F008         	goto	u3050
  1474  001186                     u3051:
  1475  001186  EFCD  F008         	goto	l3469
  1476  00118A                     u3050:
  1477  00118A                     
  1478                           ; BSR set to: 0
  1479  00118A  5193               	movf	main@complete& (0+255),w,b
  1480  00118C  B4D8               	btfsc	status,2,c
  1481  00118E  EFCB  F008         	goto	u3061
  1482  001192  EFCD  F008         	goto	u3060
  1483  001196                     u3061:
  1484  001196  EFD5  F007         	goto	l3405
  1485  00119A                     u3060:
  1486  00119A                     l3469:
  1487                           
  1488                           ; BSR set to: 0
  1489                           ;main.c: 164:     unsigned int count = 0;
  1490  00119A  0E00               	movlw	0
  1491  00119C  6F8F               	movwf	(main@count+1)& (0+255),b
  1492  00119E  0E00               	movlw	0
  1493  0011A0  6F8E               	movwf	main@count& (0+255),b
  1494                           
  1495                           ;main.c: 165:     while (count<motions)
  1496  0011A2  EFF2  F008         	goto	l3479
  1497  0011A6                     l362:
  1498                           
  1499                           ; BSR set to: 0
  1500                           ;main.c: 166:     {;main.c: 167:         LATFbits.LATF0=1;
  1501  0011A6  807E               	bsf	126,0,c	;volatile
  1502  0011A8                     
  1503                           ; BSR set to: 0
  1504                           ;main.c: 168:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  1505  0011A8  0E52               	movlw	82
  1506  0011AA  0100               	movlb	0	; () banked
  1507  0011AC  6F6B               	movwf	(??_main+1)& (0+255),b
  1508  0011AE  0E2B               	movlw	43
  1509  0011B0  6F6A               	movwf	??_main& (0+255),b
  1510  0011B2  0E00               	movlw	0
  1511  0011B4                     u3157:
  1512  0011B4  2EE8               	decfsz	wreg,f,c
  1513  0011B6  D7FE               	bra	u3157
  1514  0011B8  2F6A               	decfsz	??_main& (0+255),f,b
  1515  0011BA  D7FC               	bra	u3157
  1516  0011BC  2F6B               	decfsz	(??_main+1)& (0+255),f,b
  1517  0011BE  D7FA               	bra	u3157
  1518  0011C0  F000               	nop	
  1519  0011C2                     
  1520                           ;main.c: 169:         LATFbits.LATF0=0;
  1521  0011C2  907E               	bcf	126,0,c	;volatile
  1522  0011C4                     
  1523                           ;main.c: 170:         count++;
  1524  0011C4  0100               	movlb	0	; () banked
  1525  0011C6  4B8E               	infsnz	main@count& (0+255),f,b
  1526  0011C8  2B8F               	incf	(main@count+1)& (0+255),f,b
  1527  0011CA                     
  1528                           ; BSR set to: 0
  1529                           ;main.c: 171:         _delay((unsigned long)((100)*(64000000/4000.0)));
  1530  0011CA  0E09               	movlw	9
  1531  0011CC  0100               	movlb	0	; () banked
  1532  0011CE  6F6B               	movwf	(??_main+1)& (0+255),b
  1533  0011D0  0E1E               	movlw	30
  1534  0011D2  6F6A               	movwf	??_main& (0+255),b
  1535  0011D4  0EE4               	movlw	228
  1536  0011D6                     u3167:
  1537  0011D6  2EE8               	decfsz	wreg,f,c
  1538  0011D8  D7FE               	bra	u3167
  1539  0011DA  2F6A               	decfsz	??_main& (0+255),f,b
  1540  0011DC  D7FC               	bra	u3167
  1541  0011DE  2F6B               	decfsz	(??_main+1)& (0+255),f,b
  1542  0011E0  D7FA               	bra	u3167
  1543  0011E2  F000               	nop	
  1544  0011E4                     l3479:
  1545                           
  1546                           ;main.c: 165:     while (count<motions)
  1547  0011E4  0100               	movlb	0	; () banked
  1548  0011E6  51D4               	movf	main@motions& (0+255),w,b
  1549  0011E8  5D8E               	subwf	main@count& (0+255),w,b
  1550  0011EA  51D5               	movf	(main@motions+1)& (0+255),w,b
  1551  0011EC  598F               	subwfb	(main@count+1)& (0+255),w,b
  1552  0011EE  A0D8               	btfss	status,0,c
  1553  0011F0  EFFC  F008         	goto	u3071
  1554  0011F4  EFFE  F008         	goto	u3070
  1555  0011F8                     u3071:
  1556  0011F8  EFD3  F008         	goto	l362
  1557  0011FC                     u3070:
  1558  0011FC                     
  1559                           ; BSR set to: 0
  1560                           ;main.c: 178:     toggleRGB();
  1561  0011FC  ECD5  F017         	call	_toggleRGB	;wreg free
  1562                           
  1563                           ;main.c: 180:     while(motions>=0)
  1564  001200  EF98  F009         	goto	l3509
  1565  001204                     l3485:
  1566                           
  1567                           ; BSR set to: 0
  1568                           ;main.c: 181:     {;main.c: 182:         if (store[motions]!=0)
  1569  001204  0E80               	movlw	low main@store
  1570  001206  25D4               	addwf	main@motions& (0+255),w,b
  1571  001208  6ED9               	movwf	fsr2l,c
  1572  00120A  0E00               	movlw	high main@store
  1573  00120C  21D5               	addwfc	(main@motions+1)& (0+255),w,b
  1574  00120E  6EDA               	movwf	fsr2h,c
  1575  001210  50DF               	movf	indf2,w,c
  1576  001212  B4D8               	btfsc	status,2,c
  1577  001214  EF0E  F009         	goto	u3081
  1578  001218  EF10  F009         	goto	u3080
  1579  00121C                     u3081:
  1580  00121C  EF4A  F009         	goto	l3493
  1581  001220                     u3080:
  1582  001220                     
  1583                           ; BSR set to: 0
  1584                           ;main.c: 183:         {;main.c: 184:             store[motions] = returnSwitch(store[mot
      +                          ions]);
  1585  001220  0E80               	movlw	low main@store
  1586  001222  25D4               	addwf	main@motions& (0+255),w,b
  1587  001224  6ED9               	movwf	fsr2l,c
  1588  001226  0E00               	movlw	high main@store
  1589  001228  21D5               	addwfc	(main@motions+1)& (0+255),w,b
  1590  00122A  6EDA               	movwf	fsr2h,c
  1591  00122C  0E80               	movlw	low main@store
  1592  00122E  25D4               	addwf	main@motions& (0+255),w,b
  1593  001230  6EE1               	movwf	fsr1l,c
  1594  001232  0E00               	movlw	high main@store
  1595  001234  21D5               	addwfc	(main@motions+1)& (0+255),w,b
  1596  001236  6EE2               	movwf	fsr1h,c
  1597  001238  50E7               	movf	indf1,w,c
  1598  00123A  ECB3  F016         	call	_returnSwitch
  1599  00123E  6EDF               	movwf	indf2,c
  1600  001240                     
  1601                           ;main.c: 185:             struct turnInfo oppTurn;;main.c: 186:             oppTurn = tu
      +                          rnFunction(&turnL, &turnR, store[motions]);
  1602  001240  0EC9               	movlw	low main@turnL
  1603  001242  6E01               	movwf	turnFunction@tL^0,c
  1604  001244  0E00               	movlw	high main@turnL
  1605  001246  6E02               	movwf	(turnFunction@tL+1)^0,c
  1606  001248  0EBE               	movlw	low main@turnR
  1607  00124A  6E03               	movwf	turnFunction@tR^0,c
  1608  00124C  0E00               	movlw	high main@turnR
  1609  00124E  6E04               	movwf	(turnFunction@tR+1)^0,c
  1610  001250  0E80               	movlw	low main@store
  1611  001252  0100               	movlb	0	; () banked
  1612  001254  25D4               	addwf	main@motions& (0+255),w,b
  1613  001256  6ED9               	movwf	fsr2l,c
  1614  001258  0E00               	movlw	high main@store
  1615  00125A  21D5               	addwfc	(main@motions+1)& (0+255),w,b
  1616  00125C  6EDA               	movwf	fsr2h,c
  1617  00125E  50DF               	movf	indf2,w,c
  1618  001260  6E05               	movwf	turnFunction@C^0,c
  1619  001262  EC8D  F00E         	call	_turnFunction	;wreg free
  1620  001266  C001  F097         	movff	?_turnFunction,main@oppTurn
  1621  00126A  C002  F098         	movff	?_turnFunction+1,main@oppTurn+1
  1622  00126E  C003  F099         	movff	?_turnFunction+2,main@oppTurn+2
  1623  001272                     
  1624                           ;main.c: 187:             turnAngle(&motorL, &motorR, oppTurn.delay, oppTurn.direction);
  1625  001272  0EDE               	movlw	low main@motorL
  1626  001274  6E14               	movwf	turnAngle@mL^0,c
  1627  001276  0E00               	movlw	high main@motorL
  1628  001278  6E15               	movwf	(turnAngle@mL+1)^0,c
  1629  00127A  0ED6               	movlw	low main@motorR
  1630  00127C  6E16               	movwf	turnAngle@mR^0,c
  1631  00127E  0E00               	movlw	high main@motorR
  1632  001280  6E17               	movwf	(turnAngle@mR+1)^0,c
  1633  001282  C098  F018         	movff	main@oppTurn+1,turnAngle@delay
  1634  001286  C099  F019         	movff	main@oppTurn+2,turnAngle@delay+1
  1635  00128A  C097  F01A         	movff	main@oppTurn,turnAngle@direction
  1636  00128E  6A1B               	clrf	(turnAngle@direction+1)^0,c
  1637  001290  EC13  F012         	call	_turnAngle	;wreg free
  1638  001294                     l3493:
  1639                           
  1640                           ;main.c: 190:         fullSpeedAhead(&motorL,&motorR,reversePower,0);
  1641  001294  0EDE               	movlw	low main@motorL
  1642  001296  6E14               	movwf	fullSpeedAhead@mL^0,c
  1643  001298  0E00               	movlw	high main@motorL
  1644  00129A  6E15               	movwf	(fullSpeedAhead@mL+1)^0,c
  1645  00129C  0ED6               	movlw	low main@motorR
  1646  00129E  6E16               	movwf	fullSpeedAhead@mR^0,c
  1647  0012A0  0E00               	movlw	high main@motorR
  1648  0012A2  6E17               	movwf	(fullSpeedAhead@mR+1)^0,c
  1649  0012A4  C08C  F018         	movff	main@reversePower,fullSpeedAhead@nomPower
  1650  0012A8  C08D  F019         	movff	main@reversePower+1,fullSpeedAhead@nomPower+1
  1651  0012AC  0E00               	movlw	0
  1652  0012AE  6E1A               	movwf	fullSpeedAhead@forward^0,c
  1653  0012B0  EC58  F017         	call	_fullSpeedAhead	;wreg free
  1654                           
  1655                           ;main.c: 192:         while(time[motions]>0)
  1656  0012B4  EF7B  F009         	goto	l3503
  1657  0012B8                     l368:
  1658                           
  1659                           ; BSR set to: 0
  1660                           ;main.c: 193:         {;main.c: 194:             if (LATHbits.LATH3==1)
  1661  0012B8  A680               	btfss	128,3,c	;volatile
  1662  0012BA  EF61  F009         	goto	u3091
  1663  0012BE  EF63  F009         	goto	u3090
  1664  0012C2                     u3091:
  1665  0012C2  EF7B  F009         	goto	l3503
  1666  0012C6                     u3090:
  1667  0012C6                     
  1668                           ; BSR set to: 0
  1669                           ;main.c: 195:             {;main.c: 196:                 if (time[motions]%2 == 0)
  1670  0012C6  0E76               	movlw	low main@time
  1671  0012C8  25D4               	addwf	main@motions& (0+255),w,b
  1672  0012CA  6ED9               	movwf	fsr2l,c
  1673  0012CC  0E00               	movlw	high main@time
  1674  0012CE  21D5               	addwfc	(main@motions+1)& (0+255),w,b
  1675  0012D0  6EDA               	movwf	fsr2h,c
  1676  0012D2  B0DF               	btfsc	indf2,0,c
  1677  0012D4  EF6E  F009         	goto	u3101
  1678  0012D8  EF70  F009         	goto	u3100
  1679  0012DC                     u3101:
  1680  0012DC  EF72  F009         	goto	l3499
  1681  0012E0                     u3100:
  1682  0012E0                     
  1683                           ; BSR set to: 0
  1684                           ;main.c: 197:                 {;main.c: 198:                     togHLamp();
  1685  0012E0  EC6B  F01A         	call	_togHLamp	;wreg free
  1686  0012E4                     l3499:
  1687                           
  1688                           ;main.c: 200:                 time[motions]--;
  1689  0012E4  0E76               	movlw	low main@time
  1690  0012E6  0100               	movlb	0	; () banked
  1691  0012E8  25D4               	addwf	main@motions& (0+255),w,b
  1692  0012EA  6ED9               	movwf	fsr2l,c
  1693  0012EC  0E00               	movlw	high main@time
  1694  0012EE  21D5               	addwfc	(main@motions+1)& (0+255),w,b
  1695  0012F0  6EDA               	movwf	fsr2h,c
  1696  0012F2  06DF               	decf	indf2,f,c
  1697  0012F4                     
  1698                           ; BSR set to: 0
  1699                           ;main.c: 201:                 LATHbits.LATH3=0;
  1700  0012F4  9680               	bcf	128,3,c	;volatile
  1701  0012F6                     l3503:
  1702                           
  1703                           ;main.c: 192:         while(time[motions]>0)
  1704  0012F6  0E76               	movlw	low main@time
  1705  0012F8  0100               	movlb	0	; () banked
  1706  0012FA  25D4               	addwf	main@motions& (0+255),w,b
  1707  0012FC  6ED9               	movwf	fsr2l,c
  1708  0012FE  0E00               	movlw	high main@time
  1709  001300  21D5               	addwfc	(main@motions+1)& (0+255),w,b
  1710  001302  6EDA               	movwf	fsr2h,c
  1711  001304  50DF               	movf	indf2,w,c
  1712  001306  A4D8               	btfss	status,2,c
  1713  001308  EF88  F009         	goto	u3111
  1714  00130C  EF8A  F009         	goto	u3110
  1715  001310                     u3111:
  1716  001310  EF5C  F009         	goto	l368
  1717  001314                     u3110:
  1718  001314                     
  1719                           ; BSR set to: 0
  1720                           ;main.c: 204:         stop(&motorL,&motorR);
  1721  001314  0EDE               	movlw	low main@motorL
  1722  001316  6E14               	movwf	stop@mL^0,c
  1723  001318  0E00               	movlw	high main@motorL
  1724  00131A  6E15               	movwf	(stop@mL+1)^0,c
  1725  00131C  0ED6               	movlw	low main@motorR
  1726  00131E  6E16               	movwf	stop@mR^0,c
  1727  001320  0E00               	movlw	high main@motorR
  1728  001322  6E17               	movwf	(stop@mR+1)^0,c
  1729  001324  EC6C  F018         	call	_stop	;wreg free
  1730  001328                     
  1731                           ;main.c: 205:         motions--;
  1732  001328  0100               	movlb	0	; () banked
  1733  00132A  07D4               	decf	main@motions& (0+255),f,b
  1734  00132C  A0D8               	btfss	status,0,c
  1735  00132E  07D5               	decf	(main@motions+1)& (0+255),f,b
  1736  001330                     l3509:
  1737                           
  1738                           ;main.c: 180:     while(motions>=0)
  1739  001330  0100               	movlb	0	; () banked
  1740  001332  BFD5               	btfsc	(main@motions+1)& (0+255),7,b
  1741  001334  EFA0  F009         	goto	u3120
  1742  001338  EF9E  F009         	goto	u3121
  1743  00133C                     u3121:
  1744  00133C  EF02  F009         	goto	l3485
  1745  001340                     u3120:
  1746  001340                     
  1747                           ; BSR set to: 0
  1748  001340  EF1A  F000         	goto	start
  1749  001344                     __end_of_main:
  1750                           	callstack 0
  1751                           
  1752 ;; *************** function _turnFunction *****************
  1753 ;; Defined at:
  1754 ;;		line 214 in file "dc_motor.c"
  1755 ;; Parameters:    Size  Location     Type
  1756 ;;  tL              2    0[COMRAM] PTR struct turnDelay
  1757 ;;		 -> main@turnL(11), 
  1758 ;;  tR              2    2[COMRAM] PTR struct turnDelay
  1759 ;;		 -> main@turnR(11), 
  1760 ;;  C               1    4[COMRAM] unsigned char 
  1761 ;; Auto vars:     Size  Location     Type
  1762 ;;  turnSpecs       3    5[COMRAM] struct turnInfo
  1763 ;; Return value:  Size  Location     Type
  1764 ;;                  3    0[COMRAM] struct turnInfo
  1765 ;; Registers used:
  1766 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1767 ;; Tracked objects:
  1768 ;;		On entry : 0/0
  1769 ;;		On exit  : 0/0
  1770 ;;		Unchanged: 0/0
  1771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1772 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1773 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1775 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1776 ;;Total ram usage:        8 bytes
  1777 ;; Hardware stack levels used:    1
  1778 ;; Hardware stack levels required when called:    1
  1779 ;; This function calls:
  1780 ;;		Nothing
  1781 ;; This function is called by:
  1782 ;;		_main
  1783 ;; This function uses a non-reentrant model
  1784 ;;
  1785                           
  1786                           	psect	text1
  1787  001D1A                     __ptext1:
  1788                           	callstack 0
  1789  001D1A                     _turnFunction:
  1790                           	callstack 29
  1791  001D1A                     
  1792                           ;dc_motor.c: 216:     struct turnInfo turnSpecs;;dc_motor.c: 218:     if (C == 2){
  1793  001D1A  0E02               	movlw	2
  1794  001D1C  1805               	xorwf	turnFunction@C^0,w,c
  1795  001D1E  A4D8               	btfss	status,2,c
  1796  001D20  EF94  F00E         	goto	u2721
  1797  001D24  EF96  F00E         	goto	u2720
  1798  001D28                     u2721:
  1799  001D28  EFAA  F00E         	goto	l3133
  1800  001D2C                     u2720:
  1801  001D2C                     
  1802                           ;dc_motor.c: 219:         turnSpecs.direction = tR->direction;
  1803  001D2C  EE20 F00A          	lfsr	2,10
  1804  001D30  5003               	movf	turnFunction@tR^0,w,c
  1805  001D32  26D9               	addwf	fsr2l,f,c
  1806  001D34  5004               	movf	(turnFunction@tR+1)^0,w,c
  1807  001D36  22DA               	addwfc	fsr2h,f,c
  1808  001D38  50DF               	movf	indf2,w,c
  1809  001D3A  6E06               	movwf	turnFunction@turnSpecs^0,c
  1810                           
  1811                           ;dc_motor.c: 220:         turnSpecs.delay = tR->oneThirtyFive;
  1812  001D3C  EE20 F006          	lfsr	2,6
  1813  001D40  5003               	movf	turnFunction@tR^0,w,c
  1814  001D42  26D9               	addwf	fsr2l,f,c
  1815  001D44  5004               	movf	(turnFunction@tR+1)^0,w,c
  1816  001D46  22DA               	addwfc	fsr2h,f,c
  1817  001D48  CFDE F007          	movff	postinc2,turnFunction@turnSpecs+1
  1818  001D4C  CFDD F008          	movff	postdec2,turnFunction@turnSpecs+2
  1819                           
  1820                           ;dc_motor.c: 221:     }
  1821  001D50  EF8E  F00F         	goto	l3169
  1822  001D54                     l3133:
  1823  001D54  0E03               	movlw	3
  1824  001D56  1805               	xorwf	turnFunction@C^0,w,c
  1825  001D58  A4D8               	btfss	status,2,c
  1826  001D5A  EFB1  F00E         	goto	u2731
  1827  001D5E  EFB3  F00E         	goto	u2730
  1828  001D62                     u2731:
  1829  001D62  EFC7  F00E         	goto	l3137
  1830  001D66                     u2730:
  1831  001D66                     
  1832                           ;dc_motor.c: 223:         turnSpecs.direction = tL->direction;
  1833  001D66  EE20 F00A          	lfsr	2,10
  1834  001D6A  5001               	movf	turnFunction@tL^0,w,c
  1835  001D6C  26D9               	addwf	fsr2l,f,c
  1836  001D6E  5002               	movf	(turnFunction@tL+1)^0,w,c
  1837  001D70  22DA               	addwfc	fsr2h,f,c
  1838  001D72  50DF               	movf	indf2,w,c
  1839  001D74  6E06               	movwf	turnFunction@turnSpecs^0,c
  1840                           
  1841                           ;dc_motor.c: 224:         turnSpecs.delay = tL->sixty;
  1842  001D76  EE20 F002          	lfsr	2,2
  1843  001D7A  5001               	movf	turnFunction@tL^0,w,c
  1844  001D7C  26D9               	addwf	fsr2l,f,c
  1845  001D7E  5002               	movf	(turnFunction@tL+1)^0,w,c
  1846  001D80  22DA               	addwfc	fsr2h,f,c
  1847  001D82  CFDE F007          	movff	postinc2,turnFunction@turnSpecs+1
  1848  001D86  CFDD F008          	movff	postdec2,turnFunction@turnSpecs+2
  1849                           
  1850                           ;dc_motor.c: 225:     }
  1851  001D8A  EF8E  F00F         	goto	l3169
  1852  001D8E                     l3137:
  1853  001D8E  0E04               	movlw	4
  1854  001D90  1805               	xorwf	turnFunction@C^0,w,c
  1855  001D92  A4D8               	btfss	status,2,c
  1856  001D94  EFCE  F00E         	goto	u2741
  1857  001D98  EFD0  F00E         	goto	u2740
  1858  001D9C                     u2741:
  1859  001D9C  EFE4  F00E         	goto	l3141
  1860  001DA0                     u2740:
  1861  001DA0                     
  1862                           ;dc_motor.c: 227:         turnSpecs.direction = tL->direction;
  1863  001DA0  EE20 F00A          	lfsr	2,10
  1864  001DA4  5001               	movf	turnFunction@tL^0,w,c
  1865  001DA6  26D9               	addwf	fsr2l,f,c
  1866  001DA8  5002               	movf	(turnFunction@tL+1)^0,w,c
  1867  001DAA  22DA               	addwfc	fsr2h,f,c
  1868  001DAC  50DF               	movf	indf2,w,c
  1869  001DAE  6E06               	movwf	turnFunction@turnSpecs^0,c
  1870                           
  1871                           ;dc_motor.c: 228:         turnSpecs.delay = tL->oneEighty;
  1872  001DB0  EE20 F008          	lfsr	2,8
  1873  001DB4  5001               	movf	turnFunction@tL^0,w,c
  1874  001DB6  26D9               	addwf	fsr2l,f,c
  1875  001DB8  5002               	movf	(turnFunction@tL+1)^0,w,c
  1876  001DBA  22DA               	addwfc	fsr2h,f,c
  1877  001DBC  CFDE F007          	movff	postinc2,turnFunction@turnSpecs+1
  1878  001DC0  CFDD F008          	movff	postdec2,turnFunction@turnSpecs+2
  1879                           
  1880                           ;dc_motor.c: 229:     }
  1881  001DC4  EF8E  F00F         	goto	l3169
  1882  001DC8                     l3141:
  1883  001DC8  0E05               	movlw	5
  1884  001DCA  1805               	xorwf	turnFunction@C^0,w,c
  1885  001DCC  A4D8               	btfss	status,2,c
  1886  001DCE  EFEB  F00E         	goto	u2751
  1887  001DD2  EFED  F00E         	goto	u2750
  1888  001DD6                     u2751:
  1889  001DD6  EF01  F00F         	goto	l3145
  1890  001DDA                     u2750:
  1891  001DDA                     
  1892                           ;dc_motor.c: 231:         turnSpecs.direction = tL->direction;
  1893  001DDA  EE20 F00A          	lfsr	2,10
  1894  001DDE  5001               	movf	turnFunction@tL^0,w,c
  1895  001DE0  26D9               	addwf	fsr2l,f,c
  1896  001DE2  5002               	movf	(turnFunction@tL+1)^0,w,c
  1897  001DE4  22DA               	addwfc	fsr2h,f,c
  1898  001DE6  50DF               	movf	indf2,w,c
  1899  001DE8  6E06               	movwf	turnFunction@turnSpecs^0,c
  1900                           
  1901                           ;dc_motor.c: 232:         turnSpecs.delay = tL->ninety;
  1902  001DEA  EE20 F004          	lfsr	2,4
  1903  001DEE  5001               	movf	turnFunction@tL^0,w,c
  1904  001DF0  26D9               	addwf	fsr2l,f,c
  1905  001DF2  5002               	movf	(turnFunction@tL+1)^0,w,c
  1906  001DF4  22DA               	addwfc	fsr2h,f,c
  1907  001DF6  CFDE F007          	movff	postinc2,turnFunction@turnSpecs+1
  1908  001DFA  CFDD F008          	movff	postdec2,turnFunction@turnSpecs+2
  1909                           
  1910                           ;dc_motor.c: 233:     }
  1911  001DFE  EF8E  F00F         	goto	l3169
  1912  001E02                     l3145:
  1913  001E02  0E06               	movlw	6
  1914  001E04  1805               	xorwf	turnFunction@C^0,w,c
  1915  001E06  A4D8               	btfss	status,2,c
  1916  001E08  EF08  F00F         	goto	u2761
  1917  001E0C  EF0A  F00F         	goto	u2760
  1918  001E10                     u2761:
  1919  001E10  EF1E  F00F         	goto	l3149
  1920  001E14                     u2760:
  1921  001E14                     
  1922                           ;dc_motor.c: 235:         turnSpecs.direction = tL->direction;
  1923  001E14  EE20 F00A          	lfsr	2,10
  1924  001E18  5001               	movf	turnFunction@tL^0,w,c
  1925  001E1A  26D9               	addwf	fsr2l,f,c
  1926  001E1C  5002               	movf	(turnFunction@tL+1)^0,w,c
  1927  001E1E  22DA               	addwfc	fsr2h,f,c
  1928  001E20  50DF               	movf	indf2,w,c
  1929  001E22  6E06               	movwf	turnFunction@turnSpecs^0,c
  1930                           
  1931                           ;dc_motor.c: 236:         turnSpecs.delay = tL->oneThirtyFive;
  1932  001E24  EE20 F006          	lfsr	2,6
  1933  001E28  5001               	movf	turnFunction@tL^0,w,c
  1934  001E2A  26D9               	addwf	fsr2l,f,c
  1935  001E2C  5002               	movf	(turnFunction@tL+1)^0,w,c
  1936  001E2E  22DA               	addwfc	fsr2h,f,c
  1937  001E30  CFDE F007          	movff	postinc2,turnFunction@turnSpecs+1
  1938  001E34  CFDD F008          	movff	postdec2,turnFunction@turnSpecs+2
  1939                           
  1940                           ;dc_motor.c: 237:     }
  1941  001E38  EF8E  F00F         	goto	l3169
  1942  001E3C                     l3149:
  1943  001E3C  0E07               	movlw	7
  1944  001E3E  1805               	xorwf	turnFunction@C^0,w,c
  1945  001E40  A4D8               	btfss	status,2,c
  1946  001E42  EF25  F00F         	goto	u2771
  1947  001E46  EF27  F00F         	goto	u2770
  1948  001E4A                     u2771:
  1949  001E4A  EF39  F00F         	goto	l3155
  1950  001E4E                     u2770:
  1951  001E4E                     
  1952                           ;dc_motor.c: 239:         turnSpecs.direction = tR->direction;
  1953  001E4E  EE20 F00A          	lfsr	2,10
  1954  001E52  5003               	movf	turnFunction@tR^0,w,c
  1955  001E54  26D9               	addwf	fsr2l,f,c
  1956  001E56  5004               	movf	(turnFunction@tR+1)^0,w,c
  1957  001E58  22DA               	addwfc	fsr2h,f,c
  1958  001E5A  50DF               	movf	indf2,w,c
  1959  001E5C  6E06               	movwf	turnFunction@turnSpecs^0,c
  1960  001E5E                     
  1961                           ;dc_motor.c: 240:         turnSpecs.delay = tR->thirty;
  1962  001E5E  C003  FFD9         	movff	turnFunction@tR,fsr2l
  1963  001E62  C004  FFDA         	movff	turnFunction@tR+1,fsr2h
  1964  001E66  CFDE F007          	movff	postinc2,turnFunction@turnSpecs+1
  1965  001E6A  CFDD F008          	movff	postdec2,turnFunction@turnSpecs+2
  1966                           
  1967                           ;dc_motor.c: 241:     }
  1968  001E6E  EF8E  F00F         	goto	l3169
  1969  001E72                     l3155:
  1970  001E72  0E08               	movlw	8
  1971  001E74  1805               	xorwf	turnFunction@C^0,w,c
  1972  001E76  A4D8               	btfss	status,2,c
  1973  001E78  EF40  F00F         	goto	u2781
  1974  001E7C  EF42  F00F         	goto	u2780
  1975  001E80                     u2781:
  1976  001E80  EF54  F00F         	goto	l3161
  1977  001E84                     u2780:
  1978  001E84                     
  1979                           ;dc_motor.c: 243:         turnSpecs.direction = tL->direction;
  1980  001E84  EE20 F00A          	lfsr	2,10
  1981  001E88  5001               	movf	turnFunction@tL^0,w,c
  1982  001E8A  26D9               	addwf	fsr2l,f,c
  1983  001E8C  5002               	movf	(turnFunction@tL+1)^0,w,c
  1984  001E8E  22DA               	addwfc	fsr2h,f,c
  1985  001E90  50DF               	movf	indf2,w,c
  1986  001E92  6E06               	movwf	turnFunction@turnSpecs^0,c
  1987  001E94                     
  1988                           ;dc_motor.c: 244:         turnSpecs.delay = tL->thirty;
  1989  001E94  C001  FFD9         	movff	turnFunction@tL,fsr2l
  1990  001E98  C002  FFDA         	movff	turnFunction@tL+1,fsr2h
  1991  001E9C  CFDE F007          	movff	postinc2,turnFunction@turnSpecs+1
  1992  001EA0  CFDD F008          	movff	postdec2,turnFunction@turnSpecs+2
  1993                           
  1994                           ;dc_motor.c: 245:     }
  1995  001EA4  EF8E  F00F         	goto	l3169
  1996  001EA8                     l3161:
  1997  001EA8  0E09               	movlw	9
  1998  001EAA  1805               	xorwf	turnFunction@C^0,w,c
  1999  001EAC  A4D8               	btfss	status,2,c
  2000  001EAE  EF5B  F00F         	goto	u2791
  2001  001EB2  EF5D  F00F         	goto	u2790
  2002  001EB6                     u2791:
  2003  001EB6  EF71  F00F         	goto	l3165
  2004  001EBA                     u2790:
  2005  001EBA                     
  2006                           ;dc_motor.c: 247:         turnSpecs.direction = tR->direction;
  2007  001EBA  EE20 F00A          	lfsr	2,10
  2008  001EBE  5003               	movf	turnFunction@tR^0,w,c
  2009  001EC0  26D9               	addwf	fsr2l,f,c
  2010  001EC2  5004               	movf	(turnFunction@tR+1)^0,w,c
  2011  001EC4  22DA               	addwfc	fsr2h,f,c
  2012  001EC6  50DF               	movf	indf2,w,c
  2013  001EC8  6E06               	movwf	turnFunction@turnSpecs^0,c
  2014                           
  2015                           ;dc_motor.c: 248:         turnSpecs.delay = tR->ninety;
  2016  001ECA  EE20 F004          	lfsr	2,4
  2017  001ECE  5003               	movf	turnFunction@tR^0,w,c
  2018  001ED0  26D9               	addwf	fsr2l,f,c
  2019  001ED2  5004               	movf	(turnFunction@tR+1)^0,w,c
  2020  001ED4  22DA               	addwfc	fsr2h,f,c
  2021  001ED6  CFDE F007          	movff	postinc2,turnFunction@turnSpecs+1
  2022  001EDA  CFDD F008          	movff	postdec2,turnFunction@turnSpecs+2
  2023                           
  2024                           ;dc_motor.c: 249:     }
  2025  001EDE  EF8E  F00F         	goto	l3169
  2026  001EE2                     l3165:
  2027  001EE2  0E0A               	movlw	10
  2028  001EE4  1805               	xorwf	turnFunction@C^0,w,c
  2029  001EE6  A4D8               	btfss	status,2,c
  2030  001EE8  EF78  F00F         	goto	u2801
  2031  001EEC  EF7A  F00F         	goto	u2800
  2032  001EF0                     u2801:
  2033  001EF0  EF8E  F00F         	goto	l241
  2034  001EF4                     u2800:
  2035  001EF4                     
  2036                           ;dc_motor.c: 251:         turnSpecs.direction = tR->direction;
  2037  001EF4  EE20 F00A          	lfsr	2,10
  2038  001EF8  5003               	movf	turnFunction@tR^0,w,c
  2039  001EFA  26D9               	addwf	fsr2l,f,c
  2040  001EFC  5004               	movf	(turnFunction@tR+1)^0,w,c
  2041  001EFE  22DA               	addwfc	fsr2h,f,c
  2042  001F00  50DF               	movf	indf2,w,c
  2043  001F02  6E06               	movwf	turnFunction@turnSpecs^0,c
  2044                           
  2045                           ;dc_motor.c: 252:         turnSpecs.delay = tR->sixty;
  2046  001F04  EE20 F002          	lfsr	2,2
  2047  001F08  5003               	movf	turnFunction@tR^0,w,c
  2048  001F0A  26D9               	addwf	fsr2l,f,c
  2049  001F0C  5004               	movf	(turnFunction@tR+1)^0,w,c
  2050  001F0E  22DA               	addwfc	fsr2h,f,c
  2051  001F10  CFDE F007          	movff	postinc2,turnFunction@turnSpecs+1
  2052  001F14  CFDD F008          	movff	postdec2,turnFunction@turnSpecs+2
  2053  001F18  EF8E  F00F         	goto	l3169
  2054  001F1C                     l241:
  2055  001F1C                     l3169:
  2056                           
  2057                           ;dc_motor.c: 254:     return turnSpecs;
  2058  001F1C  C006  F001         	movff	turnFunction@turnSpecs,?_turnFunction
  2059  001F20  C007  F002         	movff	turnFunction@turnSpecs+1,?_turnFunction+1
  2060  001F24  C008  F003         	movff	turnFunction@turnSpecs+2,?_turnFunction+2
  2061  001F28  0012               	return		;funcret
  2062  001F2A                     __end_of_turnFunction:
  2063                           	callstack 0
  2064                           
  2065 ;; *************** function _turnAngle *****************
  2066 ;; Defined at:
  2067 ;;		line 144 in file "dc_motor.c"
  2068 ;; Parameters:    Size  Location     Type
  2069 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  2070 ;;		 -> main@motorL(8), 
  2071 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  2072 ;;		 -> main@motorR(8), 
  2073 ;;  delay           2   23[COMRAM] unsigned int 
  2074 ;;  direction       2   25[COMRAM] unsigned int 
  2075 ;; Auto vars:     Size  Location     Type
  2076 ;;  i               2   28[COMRAM] unsigned int 
  2077 ;; Return value:  Size  Location     Type
  2078 ;;                  1    wreg      void 
  2079 ;; Registers used:
  2080 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2081 ;; Tracked objects:
  2082 ;;		On entry : 0/0
  2083 ;;		On exit  : 0/0
  2084 ;;		Unchanged: 0/0
  2085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2086 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2087 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2088 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2089 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2090 ;;Total ram usage:       11 bytes
  2091 ;; Hardware stack levels used:    1
  2092 ;; Hardware stack levels required when called:    3
  2093 ;; This function calls:
  2094 ;;		___lwdiv
  2095 ;;		_setMotorPWM
  2096 ;;		_togLTurn
  2097 ;;		_togRTurn
  2098 ;; This function is called by:
  2099 ;;		_main
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102                           
  2103                           	psect	text2
  2104  002426                     __ptext2:
  2105                           	callstack 0
  2106  002426                     _turnAngle:
  2107                           	callstack 27
  2108  002426                     
  2109                           ;dc_motor.c: 144: void turnAngle(struct DC_motor *mL, struct DC_motor *mR, unsigned int 
      +                          delay, unsigned int direction);dc_motor.c: 145: {;dc_motor.c: 147:     if (direction==1)
      +                          {
  2110  002426  041A               	decf	turnAngle@direction^0,w,c
  2111  002428  101B               	iorwf	(turnAngle@direction+1)^0,w,c
  2112  00242A  A4D8               	btfss	status,2,c
  2113  00242C  EF1A  F012         	goto	u2651
  2114  002430  EF1C  F012         	goto	u2650
  2115  002434                     u2651:
  2116  002434  EF30  F012         	goto	l3081
  2117  002438                     u2650:
  2118  002438                     
  2119                           ;dc_motor.c: 148:         togRTurn();
  2120  002438  EC7C  F01A         	call	_togRTurn	;wreg free
  2121  00243C                     
  2122                           ;dc_motor.c: 149:         mL->direction=1;
  2123  00243C  EE20 F001          	lfsr	2,1
  2124  002440  5014               	movf	turnAngle@mL^0,w,c
  2125  002442  26D9               	addwf	fsr2l,f,c
  2126  002444  5015               	movf	(turnAngle@mL+1)^0,w,c
  2127  002446  22DA               	addwfc	fsr2h,f,c
  2128  002448  0E01               	movlw	1
  2129  00244A  6EDF               	movwf	indf2,c
  2130  00244C                     
  2131                           ;dc_motor.c: 150:         mR->direction=0;
  2132  00244C  EE20 F001          	lfsr	2,1
  2133  002450  5016               	movf	turnAngle@mR^0,w,c
  2134  002452  26D9               	addwf	fsr2l,f,c
  2135  002454  5017               	movf	(turnAngle@mR+1)^0,w,c
  2136  002456  22DA               	addwfc	fsr2h,f,c
  2137  002458  0E00               	movlw	0
  2138  00245A  6EDF               	movwf	indf2,c
  2139                           
  2140                           ;dc_motor.c: 151:     }
  2141  00245C  EF62  F012         	goto	l210
  2142  002460                     l3081:
  2143                           
  2144                           ;dc_motor.c: 153:         togLTurn();
  2145  002460  EC8C  F01A         	call	_togLTurn	;wreg free
  2146  002464                     
  2147                           ;dc_motor.c: 154:         mL->direction=0;
  2148  002464  EE20 F001          	lfsr	2,1
  2149  002468  5014               	movf	turnAngle@mL^0,w,c
  2150  00246A  26D9               	addwf	fsr2l,f,c
  2151  00246C  5015               	movf	(turnAngle@mL+1)^0,w,c
  2152  00246E  22DA               	addwfc	fsr2h,f,c
  2153  002470  0E00               	movlw	0
  2154  002472  6EDF               	movwf	indf2,c
  2155  002474                     
  2156                           ;dc_motor.c: 155:         mR->direction=1;
  2157  002474  EE20 F001          	lfsr	2,1
  2158  002478  5016               	movf	turnAngle@mR^0,w,c
  2159  00247A  26D9               	addwf	fsr2l,f,c
  2160  00247C  5017               	movf	(turnAngle@mR+1)^0,w,c
  2161  00247E  22DA               	addwfc	fsr2h,f,c
  2162  002480  0E01               	movlw	1
  2163  002482  6EDF               	movwf	indf2,c
  2164  002484  EF62  F012         	goto	l210
  2165  002488                     l3087:
  2166                           
  2167                           ;dc_motor.c: 158:         mL->power++;
  2168  002488  C014  FFD9         	movff	turnAngle@mL,fsr2l
  2169  00248C  C015  FFDA         	movff	turnAngle@mL+1,fsr2h
  2170  002490  2ADF               	incf	indf2,f,c
  2171                           
  2172                           ;dc_motor.c: 159:         mR->power++;
  2173  002492  C016  FFD9         	movff	turnAngle@mR,fsr2l
  2174  002496  C017  FFDA         	movff	turnAngle@mR+1,fsr2h
  2175  00249A  2ADF               	incf	indf2,f,c
  2176  00249C                     
  2177                           ;dc_motor.c: 160:         setMotorPWM(mL);
  2178  00249C  C014  F009         	movff	turnAngle@mL,setMotorPWM@m
  2179  0024A0  C015  F00A         	movff	turnAngle@mL+1,setMotorPWM@m+1
  2180  0024A4  EC95  F00F         	call	_setMotorPWM	;wreg free
  2181  0024A8                     
  2182                           ;dc_motor.c: 161:         setMotorPWM(mR);
  2183  0024A8  C016  F009         	movff	turnAngle@mR,setMotorPWM@m
  2184  0024AC  C017  F00A         	movff	turnAngle@mR+1,setMotorPWM@m+1
  2185  0024B0  EC95  F00F         	call	_setMotorPWM	;wreg free
  2186  0024B4                     
  2187                           ;dc_motor.c: 162:         _delay((unsigned long)((5)*(64000000/4000.0)));
  2188  0024B4  0E68               	movlw	104
  2189  0024B6  6E1C               	movwf	??_turnAngle^0,c
  2190  0024B8  0EE4               	movlw	228
  2191  0024BA                     u3177:
  2192  0024BA  2EE8               	decfsz	wreg,f,c
  2193  0024BC  D7FE               	bra	u3177
  2194  0024BE  2E1C               	decfsz	??_turnAngle^0,f,c
  2195  0024C0  D7FC               	bra	u3177
  2196  0024C2  D000               	nop2	
  2197  0024C4                     l210:
  2198                           
  2199                           ;dc_motor.c: 157:     while (mL->power<60){
  2200  0024C4  C014  FFD9         	movff	turnAngle@mL,fsr2l
  2201  0024C8  C015  FFDA         	movff	turnAngle@mL+1,fsr2h
  2202  0024CC  0E3B               	movlw	59
  2203  0024CE  64DF               	cpfsgt	indf2,c
  2204  0024D0  EF6C  F012         	goto	u2661
  2205  0024D4  EF6E  F012         	goto	u2660
  2206  0024D8                     u2661:
  2207  0024D8  EF44  F012         	goto	l3087
  2208  0024DC                     u2660:
  2209  0024DC                     
  2210                           ;dc_motor.c: 166:     delay /= 5;
  2211  0024DC  C018  F00B         	movff	turnAngle@delay,___lwdiv@dividend
  2212  0024E0  C019  F00C         	movff	turnAngle@delay+1,___lwdiv@dividend+1
  2213  0024E4  0E00               	movlw	0
  2214  0024E6  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  2215  0024E8  0E05               	movlw	5
  2216  0024EA  6E0D               	movwf	___lwdiv@divisor^0,c
  2217  0024EC  EC9B  F017         	call	___lwdiv	;wreg free
  2218  0024F0  C00B  F018         	movff	?___lwdiv,turnAngle@delay
  2219  0024F4  C00C  F019         	movff	?___lwdiv+1,turnAngle@delay+1
  2220  0024F8                     
  2221                           ;dc_motor.c: 167:     unsigned int i = 0;
  2222  0024F8  0E00               	movlw	0
  2223  0024FA  6E1E               	movwf	(turnAngle@i+1)^0,c
  2224  0024FC  0E00               	movlw	0
  2225  0024FE  6E1D               	movwf	turnAngle@i^0,c
  2226                           
  2227                           ;dc_motor.c: 168:     while (i<delay){
  2228  002500  EF8C  F012         	goto	l213
  2229  002504                     l3099:
  2230                           
  2231                           ;dc_motor.c: 169:         _delay((unsigned long)((5)*(64000000/4000.0)));
  2232  002504  0E68               	movlw	104
  2233  002506  6E1C               	movwf	??_turnAngle^0,c
  2234  002508  0EE4               	movlw	228
  2235  00250A                     u3187:
  2236  00250A  2EE8               	decfsz	wreg,f,c
  2237  00250C  D7FE               	bra	u3187
  2238  00250E  2E1C               	decfsz	??_turnAngle^0,f,c
  2239  002510  D7FC               	bra	u3187
  2240  002512  D000               	nop2	
  2241  002514                     
  2242                           ;dc_motor.c: 170:         i++;
  2243  002514  4A1D               	infsnz	turnAngle@i^0,f,c
  2244  002516  2A1E               	incf	(turnAngle@i+1)^0,f,c
  2245  002518                     l213:
  2246                           
  2247                           ;dc_motor.c: 168:     while (i<delay){
  2248  002518  5018               	movf	turnAngle@delay^0,w,c
  2249  00251A  5C1D               	subwf	turnAngle@i^0,w,c
  2250  00251C  5019               	movf	(turnAngle@delay+1)^0,w,c
  2251  00251E  581E               	subwfb	(turnAngle@i+1)^0,w,c
  2252  002520  A0D8               	btfss	status,0,c
  2253  002522  EF95  F012         	goto	u2671
  2254  002526  EF97  F012         	goto	u2670
  2255  00252A                     u2671:
  2256  00252A  EF82  F012         	goto	l3099
  2257  00252E                     u2670:
  2258  00252E  EFB7  F012         	goto	l3111
  2259  002532                     l3103:
  2260                           
  2261                           ;dc_motor.c: 175:         mL->power--;
  2262  002532  C014  FFD9         	movff	turnAngle@mL,fsr2l
  2263  002536  C015  FFDA         	movff	turnAngle@mL+1,fsr2h
  2264  00253A  06DF               	decf	indf2,f,c
  2265                           
  2266                           ;dc_motor.c: 176:         mR->power--;
  2267  00253C  C016  FFD9         	movff	turnAngle@mR,fsr2l
  2268  002540  C017  FFDA         	movff	turnAngle@mR+1,fsr2h
  2269  002544  06DF               	decf	indf2,f,c
  2270  002546                     
  2271                           ;dc_motor.c: 177:         setMotorPWM(mL);
  2272  002546  C014  F009         	movff	turnAngle@mL,setMotorPWM@m
  2273  00254A  C015  F00A         	movff	turnAngle@mL+1,setMotorPWM@m+1
  2274  00254E  EC95  F00F         	call	_setMotorPWM	;wreg free
  2275  002552                     
  2276                           ;dc_motor.c: 178:         setMotorPWM(mR);
  2277  002552  C016  F009         	movff	turnAngle@mR,setMotorPWM@m
  2278  002556  C017  F00A         	movff	turnAngle@mR+1,setMotorPWM@m+1
  2279  00255A  EC95  F00F         	call	_setMotorPWM	;wreg free
  2280  00255E                     
  2281                           ;dc_motor.c: 179:         _delay((unsigned long)((5)*(64000000/4000.0)));
  2282  00255E  0E68               	movlw	104
  2283  002560  6E1C               	movwf	??_turnAngle^0,c
  2284  002562  0EE4               	movlw	228
  2285  002564                     u3197:
  2286  002564  2EE8               	decfsz	wreg,f,c
  2287  002566  D7FE               	bra	u3197
  2288  002568  2E1C               	decfsz	??_turnAngle^0,f,c
  2289  00256A  D7FC               	bra	u3197
  2290  00256C  D000               	nop2	
  2291  00256E                     l3111:
  2292                           
  2293                           ;dc_motor.c: 174:     while (mL->power>0){
  2294  00256E  C014  FFD9         	movff	turnAngle@mL,fsr2l
  2295  002572  C015  FFDA         	movff	turnAngle@mL+1,fsr2h
  2296  002576  50DF               	movf	indf2,w,c
  2297  002578  A4D8               	btfss	status,2,c
  2298  00257A  EFC1  F012         	goto	u2681
  2299  00257E  EFC3  F012         	goto	u2680
  2300  002582                     u2681:
  2301  002582  EF99  F012         	goto	l3103
  2302  002586                     u2680:
  2303  002586                     
  2304                           ;dc_motor.c: 183:     if (LATHbits.LATH0 == 1){
  2305  002586  A080               	btfss	128,0,c	;volatile
  2306  002588  EFC8  F012         	goto	u2691
  2307  00258C  EFCA  F012         	goto	u2690
  2308  002590                     u2691:
  2309  002590  EFCC  F012         	goto	l3115
  2310  002594                     u2690:
  2311  002594                     
  2312                           ;dc_motor.c: 184:         togRTurn();
  2313  002594  EC7C  F01A         	call	_togRTurn	;wreg free
  2314  002598                     l3115:
  2315                           
  2316                           ;dc_motor.c: 186:     if (LATFbits.LATF0 ==1){
  2317  002598  A07E               	btfss	126,0,c	;volatile
  2318  00259A  EFD1  F012         	goto	u2701
  2319  00259E  EFD3  F012         	goto	u2700
  2320  0025A2                     u2701:
  2321  0025A2  EFD5  F012         	goto	l221
  2322  0025A6                     u2700:
  2323  0025A6                     
  2324                           ;dc_motor.c: 187:         togLTurn();
  2325  0025A6  EC8C  F01A         	call	_togLTurn	;wreg free
  2326  0025AA                     l221:
  2327  0025AA  0012               	return		;funcret
  2328  0025AC                     __end_of_turnAngle:
  2329                           	callstack 0
  2330                           
  2331 ;; *************** function _togRTurn *****************
  2332 ;; Defined at:
  2333 ;;		line 60 in file "buggyFunc.c"
  2334 ;; Parameters:    Size  Location     Type
  2335 ;;		None
  2336 ;; Auto vars:     Size  Location     Type
  2337 ;;		None
  2338 ;; Return value:  Size  Location     Type
  2339 ;;                  1    wreg      void 
  2340 ;; Registers used:
  2341 ;;		wreg, status,2, status,0
  2342 ;; Tracked objects:
  2343 ;;		On entry : 0/0
  2344 ;;		On exit  : 0/0
  2345 ;;		Unchanged: 0/0
  2346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2349 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2350 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2351 ;;Total ram usage:        1 bytes
  2352 ;; Hardware stack levels used:    1
  2353 ;; Hardware stack levels required when called:    1
  2354 ;; This function calls:
  2355 ;;		Nothing
  2356 ;; This function is called by:
  2357 ;;		_turnAngle
  2358 ;; This function uses a non-reentrant model
  2359 ;;
  2360                           
  2361                           	psect	text3
  2362  0034F8                     __ptext3:
  2363                           	callstack 0
  2364  0034F8                     _togRTurn:
  2365                           	callstack 28
  2366  0034F8                     
  2367                           ;buggyFunc.c: 61:     LATHbits.LATH0 = !LATHbits.LATH0;
  2368  0034F8  A080               	btfss	128,0,c	;volatile
  2369  0034FA  EF81  F01A         	goto	u2241
  2370  0034FE  EF85  F01A         	goto	u2240
  2371  003502                     u2241:
  2372  003502  6A01               	clrf	??_togRTurn^0,c
  2373  003504  2A01               	incf	??_togRTurn^0,f,c
  2374  003506  EF86  F01A         	goto	u2258
  2375  00350A                     u2240:
  2376  00350A  6A01               	clrf	??_togRTurn^0,c
  2377  00350C                     u2258:
  2378  00350C  5080               	movf	128,w,c	;volatile
  2379  00350E  1801               	xorwf	??_togRTurn^0,w,c
  2380  003510  0BFE               	andlw	-2
  2381  003512  1801               	xorwf	??_togRTurn^0,w,c
  2382  003514  6E80               	movwf	128,c	;volatile
  2383  003516  0012               	return		;funcret
  2384  003518                     __end_of_togRTurn:
  2385                           	callstack 0
  2386                           
  2387 ;; *************** function _togLTurn *****************
  2388 ;; Defined at:
  2389 ;;		line 56 in file "buggyFunc.c"
  2390 ;; Parameters:    Size  Location     Type
  2391 ;;		None
  2392 ;; Auto vars:     Size  Location     Type
  2393 ;;		None
  2394 ;; Return value:  Size  Location     Type
  2395 ;;                  1    wreg      void 
  2396 ;; Registers used:
  2397 ;;		wreg, status,2, status,0
  2398 ;; Tracked objects:
  2399 ;;		On entry : 0/0
  2400 ;;		On exit  : 0/0
  2401 ;;		Unchanged: 0/0
  2402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2405 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2406 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2407 ;;Total ram usage:        1 bytes
  2408 ;; Hardware stack levels used:    1
  2409 ;; Hardware stack levels required when called:    1
  2410 ;; This function calls:
  2411 ;;		Nothing
  2412 ;; This function is called by:
  2413 ;;		_turnAngle
  2414 ;; This function uses a non-reentrant model
  2415 ;;
  2416                           
  2417                           	psect	text4
  2418  003518                     __ptext4:
  2419                           	callstack 0
  2420  003518                     _togLTurn:
  2421                           	callstack 28
  2422  003518                     
  2423                           ;buggyFunc.c: 57:     LATFbits.LATF0 = !LATFbits.LATF0;
  2424  003518  A07E               	btfss	126,0,c	;volatile
  2425  00351A  EF91  F01A         	goto	u2261
  2426  00351E  EF95  F01A         	goto	u2260
  2427  003522                     u2261:
  2428  003522  6A01               	clrf	??_togLTurn^0,c
  2429  003524  2A01               	incf	??_togLTurn^0,f,c
  2430  003526  EF96  F01A         	goto	u2278
  2431  00352A                     u2260:
  2432  00352A  6A01               	clrf	??_togLTurn^0,c
  2433  00352C                     u2278:
  2434  00352C  507E               	movf	126,w,c	;volatile
  2435  00352E  1801               	xorwf	??_togLTurn^0,w,c
  2436  003530  0BFE               	andlw	-2
  2437  003532  1801               	xorwf	??_togLTurn^0,w,c
  2438  003534  6E7E               	movwf	126,c	;volatile
  2439  003536  0012               	return		;funcret
  2440  003538                     __end_of_togLTurn:
  2441                           	callstack 0
  2442                           
  2443 ;; *************** function ___lwdiv *****************
  2444 ;; Defined at:
  2445 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\lwdiv.c"
  2446 ;; Parameters:    Size  Location     Type
  2447 ;;  dividend        2   10[COMRAM] unsigned int 
  2448 ;;  divisor         2   12[COMRAM] unsigned int 
  2449 ;; Auto vars:     Size  Location     Type
  2450 ;;  quotient        2   14[COMRAM] unsigned int 
  2451 ;;  counter         1   16[COMRAM] unsigned char 
  2452 ;; Return value:  Size  Location     Type
  2453 ;;                  2   10[COMRAM] unsigned int 
  2454 ;; Registers used:
  2455 ;;		wreg, status,2, status,0
  2456 ;; Tracked objects:
  2457 ;;		On entry : 0/0
  2458 ;;		On exit  : 0/0
  2459 ;;		Unchanged: 0/0
  2460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2461 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2462 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2464 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2465 ;;Total ram usage:        7 bytes
  2466 ;; Hardware stack levels used:    1
  2467 ;; Hardware stack levels required when called:    1
  2468 ;; This function calls:
  2469 ;;		Nothing
  2470 ;; This function is called by:
  2471 ;;		_turnAngle
  2472 ;;		_main
  2473 ;; This function uses a non-reentrant model
  2474 ;;
  2475                           
  2476                           	psect	text5
  2477  002F36                     __ptext5:
  2478                           	callstack 0
  2479  002F36                     ___lwdiv:
  2480                           	callstack 28
  2481  002F36  0E00               	movlw	0
  2482  002F38  6E10               	movwf	(___lwdiv@quotient+1)^0,c
  2483  002F3A  0E00               	movlw	0
  2484  002F3C  6E0F               	movwf	___lwdiv@quotient^0,c
  2485  002F3E  500D               	movf	___lwdiv@divisor^0,w,c
  2486  002F40  100E               	iorwf	(___lwdiv@divisor+1)^0,w,c
  2487  002F42  B4D8               	btfsc	status,2,c
  2488  002F44  EFA6  F017         	goto	u2311
  2489  002F48  EFA8  F017         	goto	u2310
  2490  002F4C                     u2311:
  2491  002F4C  EFD0  F017         	goto	l1020
  2492  002F50                     u2310:
  2493  002F50  0E01               	movlw	1
  2494  002F52  6E11               	movwf	___lwdiv@counter^0,c
  2495  002F54  EFB0  F017         	goto	l2861
  2496  002F58                     l2859:
  2497  002F58  90D8               	bcf	status,0,c
  2498  002F5A  360D               	rlcf	___lwdiv@divisor^0,f,c
  2499  002F5C  360E               	rlcf	(___lwdiv@divisor+1)^0,f,c
  2500  002F5E  2A11               	incf	___lwdiv@counter^0,f,c
  2501  002F60                     l2861:
  2502  002F60  AE0E               	btfss	(___lwdiv@divisor+1)^0,7,c
  2503  002F62  EFB5  F017         	goto	u2321
  2504  002F66  EFB7  F017         	goto	u2320
  2505  002F6A                     u2321:
  2506  002F6A  EFAC  F017         	goto	l2859
  2507  002F6E                     u2320:
  2508  002F6E                     l2863:
  2509  002F6E  90D8               	bcf	status,0,c
  2510  002F70  360F               	rlcf	___lwdiv@quotient^0,f,c
  2511  002F72  3610               	rlcf	(___lwdiv@quotient+1)^0,f,c
  2512  002F74  500D               	movf	___lwdiv@divisor^0,w,c
  2513  002F76  5C0B               	subwf	___lwdiv@dividend^0,w,c
  2514  002F78  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  2515  002F7A  580C               	subwfb	(___lwdiv@dividend+1)^0,w,c
  2516  002F7C  A0D8               	btfss	status,0,c
  2517  002F7E  EFC3  F017         	goto	u2331
  2518  002F82  EFC5  F017         	goto	u2330
  2519  002F86                     u2331:
  2520  002F86  EFCA  F017         	goto	l2871
  2521  002F8A                     u2330:
  2522  002F8A  500D               	movf	___lwdiv@divisor^0,w,c
  2523  002F8C  5E0B               	subwf	___lwdiv@dividend^0,f,c
  2524  002F8E  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  2525  002F90  5A0C               	subwfb	(___lwdiv@dividend+1)^0,f,c
  2526  002F92  800F               	bsf	___lwdiv@quotient^0,0,c
  2527  002F94                     l2871:
  2528  002F94  90D8               	bcf	status,0,c
  2529  002F96  320E               	rrcf	(___lwdiv@divisor+1)^0,f,c
  2530  002F98  320D               	rrcf	___lwdiv@divisor^0,f,c
  2531  002F9A  2E11               	decfsz	___lwdiv@counter^0,f,c
  2532  002F9C  EFB7  F017         	goto	l2863
  2533  002FA0                     l1020:
  2534  002FA0  C00F  F00B         	movff	___lwdiv@quotient,?___lwdiv
  2535  002FA4  C010  F00C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2536  002FA8  0012               	return		;funcret
  2537  002FAA                     __end_of___lwdiv:
  2538                           	callstack 0
  2539                           
  2540 ;; *************** function _toggleRGB *****************
  2541 ;; Defined at:
  2542 ;;		line 35 in file "color.c"
  2543 ;; Parameters:    Size  Location     Type
  2544 ;;		None
  2545 ;; Auto vars:     Size  Location     Type
  2546 ;;		None
  2547 ;; Return value:  Size  Location     Type
  2548 ;;                  1    wreg      void 
  2549 ;; Registers used:
  2550 ;;		wreg, status,2, status,0
  2551 ;; Tracked objects:
  2552 ;;		On entry : 0/0
  2553 ;;		On exit  : 0/0
  2554 ;;		Unchanged: 0/0
  2555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2558 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2559 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2560 ;;Total ram usage:        1 bytes
  2561 ;; Hardware stack levels used:    1
  2562 ;; Hardware stack levels required when called:    1
  2563 ;; This function calls:
  2564 ;;		Nothing
  2565 ;; This function is called by:
  2566 ;;		_main
  2567 ;; This function uses a non-reentrant model
  2568 ;;
  2569                           
  2570                           	psect	text6
  2571  002FAA                     __ptext6:
  2572                           	callstack 0
  2573  002FAA                     _toggleRGB:
  2574                           	callstack 29
  2575  002FAA                     
  2576                           ;color.c: 37:     LATGbits.LATG0 = !LATGbits.LATG0;
  2577  002FAA  A07F               	btfss	127,0,c	;volatile
  2578  002FAC  EFDA  F017         	goto	u2351
  2579  002FB0  EFDE  F017         	goto	u2350
  2580  002FB4                     u2351:
  2581  002FB4  6A01               	clrf	??_toggleRGB^0,c
  2582  002FB6  2A01               	incf	??_toggleRGB^0,f,c
  2583  002FB8  EFDF  F017         	goto	u2368
  2584  002FBC                     u2350:
  2585  002FBC  6A01               	clrf	??_toggleRGB^0,c
  2586  002FBE                     u2368:
  2587  002FBE  507F               	movf	127,w,c	;volatile
  2588  002FC0  1801               	xorwf	??_toggleRGB^0,w,c
  2589  002FC2  0BFE               	andlw	-2
  2590  002FC4  1801               	xorwf	??_toggleRGB^0,w,c
  2591  002FC6  6E7F               	movwf	127,c	;volatile
  2592                           
  2593                           ;color.c: 38:     LATEbits.LATE7 = !LATEbits.LATE7;
  2594  002FC8  AE7D               	btfss	125,7,c	;volatile
  2595  002FCA  EFE9  F017         	goto	u2371
  2596  002FCE  EFED  F017         	goto	u2370
  2597  002FD2                     u2371:
  2598  002FD2  6A01               	clrf	??_toggleRGB^0,c
  2599  002FD4  2A01               	incf	??_toggleRGB^0,f,c
  2600  002FD6  EFEE  F017         	goto	u2388
  2601  002FDA                     u2370:
  2602  002FDA  6A01               	clrf	??_toggleRGB^0,c
  2603  002FDC                     u2388:
  2604  002FDC  3201               	rrcf	??_toggleRGB^0,f,c
  2605  002FDE  3201               	rrcf	??_toggleRGB^0,f,c
  2606  002FE0  507D               	movf	125,w,c	;volatile
  2607  002FE2  1801               	xorwf	??_toggleRGB^0,w,c
  2608  002FE4  0B7F               	andlw	-129
  2609  002FE6  1801               	xorwf	??_toggleRGB^0,w,c
  2610  002FE8  6E7D               	movwf	125,c	;volatile
  2611                           
  2612                           ;color.c: 39:     LATAbits.LATA3 = !LATAbits.LATA3;
  2613  002FEA  A679               	btfss	121,3,c	;volatile
  2614  002FEC  EFFA  F017         	goto	u2391
  2615  002FF0  EFFE  F017         	goto	u2390
  2616  002FF4                     u2391:
  2617  002FF4  6A01               	clrf	??_toggleRGB^0,c
  2618  002FF6  2A01               	incf	??_toggleRGB^0,f,c
  2619  002FF8  EFFF  F017         	goto	u2408
  2620  002FFC                     u2390:
  2621  002FFC  6A01               	clrf	??_toggleRGB^0,c
  2622  002FFE                     u2408:
  2623  002FFE  4601               	rlncf	??_toggleRGB^0,f,c
  2624  003000  4601               	rlncf	??_toggleRGB^0,f,c
  2625  003002  4601               	rlncf	??_toggleRGB^0,f,c
  2626  003004  5079               	movf	121,w,c	;volatile
  2627  003006  1801               	xorwf	??_toggleRGB^0,w,c
  2628  003008  0BF7               	andlw	-9
  2629  00300A  1801               	xorwf	??_toggleRGB^0,w,c
  2630  00300C  6E79               	movwf	121,c	;volatile
  2631  00300E  0012               	return		;funcret
  2632  003010                     __end_of_toggleRGB:
  2633                           	callstack 0
  2634                           
  2635 ;; *************** function _togMBeam *****************
  2636 ;; Defined at:
  2637 ;;		line 48 in file "buggyFunc.c"
  2638 ;; Parameters:    Size  Location     Type
  2639 ;;		None
  2640 ;; Auto vars:     Size  Location     Type
  2641 ;;		None
  2642 ;; Return value:  Size  Location     Type
  2643 ;;                  1    wreg      void 
  2644 ;; Registers used:
  2645 ;;		wreg, status,2, status,0
  2646 ;; Tracked objects:
  2647 ;;		On entry : 0/0
  2648 ;;		On exit  : 0/0
  2649 ;;		Unchanged: 0/0
  2650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2653 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2654 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2655 ;;Total ram usage:        1 bytes
  2656 ;; Hardware stack levels used:    1
  2657 ;; Hardware stack levels required when called:    1
  2658 ;; This function calls:
  2659 ;;		Nothing
  2660 ;; This function is called by:
  2661 ;;		_main
  2662 ;; This function uses a non-reentrant model
  2663 ;;
  2664                           
  2665                           	psect	text7
  2666  0033FA                     __ptext7:
  2667                           	callstack 0
  2668  0033FA                     _togMBeam:
  2669                           	callstack 29
  2670  0033FA                     
  2671                           ;buggyFunc.c: 49:     LATDbits.LATD3 = !LATDbits.LATD3;
  2672  0033FA  A67C               	btfss	124,3,c	;volatile
  2673  0033FC  EF02  F01A         	goto	u2901
  2674  003400  EF06  F01A         	goto	u2900
  2675  003404                     u2901:
  2676  003404  6A01               	clrf	??_togMBeam^0,c
  2677  003406  2A01               	incf	??_togMBeam^0,f,c
  2678  003408  EF07  F01A         	goto	u2918
  2679  00340C                     u2900:
  2680  00340C  6A01               	clrf	??_togMBeam^0,c
  2681  00340E                     u2918:
  2682  00340E  4601               	rlncf	??_togMBeam^0,f,c
  2683  003410  4601               	rlncf	??_togMBeam^0,f,c
  2684  003412  4601               	rlncf	??_togMBeam^0,f,c
  2685  003414  507C               	movf	124,w,c	;volatile
  2686  003416  1801               	xorwf	??_togMBeam^0,w,c
  2687  003418  0BF7               	andlw	-9
  2688  00341A  1801               	xorwf	??_togMBeam^0,w,c
  2689  00341C  6E7C               	movwf	124,c	;volatile
  2690  00341E  0012               	return		;funcret
  2691  003420                     __end_of_togMBeam:
  2692                           	callstack 0
  2693                           
  2694 ;; *************** function _togBrake *****************
  2695 ;; Defined at:
  2696 ;;		line 52 in file "buggyFunc.c"
  2697 ;; Parameters:    Size  Location     Type
  2698 ;;		None
  2699 ;; Auto vars:     Size  Location     Type
  2700 ;;		None
  2701 ;; Return value:  Size  Location     Type
  2702 ;;                  1    wreg      void 
  2703 ;; Registers used:
  2704 ;;		wreg, status,2, status,0
  2705 ;; Tracked objects:
  2706 ;;		On entry : 0/0
  2707 ;;		On exit  : 0/0
  2708 ;;		Unchanged: 0/0
  2709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2712 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2713 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2714 ;;Total ram usage:        1 bytes
  2715 ;; Hardware stack levels used:    1
  2716 ;; Hardware stack levels required when called:    1
  2717 ;; This function calls:
  2718 ;;		Nothing
  2719 ;; This function is called by:
  2720 ;;		_main
  2721 ;; This function uses a non-reentrant model
  2722 ;;
  2723                           
  2724                           	psect	text8
  2725  0034B4                     __ptext8:
  2726                           	callstack 0
  2727  0034B4                     _togBrake:
  2728                           	callstack 29
  2729  0034B4                     
  2730                           ;buggyFunc.c: 53:     LATDbits.LATD4 = !LATDbits.LATD4;
  2731  0034B4  A87C               	btfss	124,4,c	;volatile
  2732  0034B6  EF5F  F01A         	goto	u2921
  2733  0034BA  EF63  F01A         	goto	u2920
  2734  0034BE                     u2921:
  2735  0034BE  6A01               	clrf	??_togBrake^0,c
  2736  0034C0  2A01               	incf	??_togBrake^0,f,c
  2737  0034C2  EF64  F01A         	goto	u2938
  2738  0034C6                     u2920:
  2739  0034C6  6A01               	clrf	??_togBrake^0,c
  2740  0034C8                     u2938:
  2741  0034C8  3A01               	swapf	??_togBrake^0,f,c
  2742  0034CA  507C               	movf	124,w,c	;volatile
  2743  0034CC  1801               	xorwf	??_togBrake^0,w,c
  2744  0034CE  0BEF               	andlw	-17
  2745  0034D0  1801               	xorwf	??_togBrake^0,w,c
  2746  0034D2  6E7C               	movwf	124,c	;volatile
  2747  0034D4  0012               	return		;funcret
  2748  0034D6                     __end_of_togBrake:
  2749                           	callstack 0
  2750                           
  2751 ;; *************** function _stop *****************
  2752 ;; Defined at:
  2753 ;;		line 129 in file "dc_motor.c"
  2754 ;; Parameters:    Size  Location     Type
  2755 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  2756 ;;		 -> main@motorL(8), 
  2757 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  2758 ;;		 -> main@motorR(8), 
  2759 ;; Auto vars:     Size  Location     Type
  2760 ;;		None
  2761 ;; Return value:  Size  Location     Type
  2762 ;;                  1    wreg      void 
  2763 ;; Registers used:
  2764 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2765 ;; Tracked objects:
  2766 ;;		On entry : 0/0
  2767 ;;		On exit  : 0/0
  2768 ;;		Unchanged: 0/0
  2769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2770 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2772 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2773 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2774 ;;Total ram usage:        5 bytes
  2775 ;; Hardware stack levels used:    1
  2776 ;; Hardware stack levels required when called:    3
  2777 ;; This function calls:
  2778 ;;		_setMotorPWM
  2779 ;; This function is called by:
  2780 ;;		_main
  2781 ;; This function uses a non-reentrant model
  2782 ;;
  2783                           
  2784                           	psect	text9
  2785  0030D8                     __ptext9:
  2786                           	callstack 0
  2787  0030D8                     _stop:
  2788                           	callstack 27
  2789  0030D8                     
  2790                           ;dc_motor.c: 129: void stop(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 130: {
      +                          ;dc_motor.c: 131:     while (mL->power>0){
  2791  0030D8  EF8C  F018         	goto	l3071
  2792  0030DC                     l3063:
  2793                           
  2794                           ;dc_motor.c: 132:         mL->power--;
  2795  0030DC  C014  FFD9         	movff	stop@mL,fsr2l
  2796  0030E0  C015  FFDA         	movff	stop@mL+1,fsr2h
  2797  0030E4  06DF               	decf	indf2,f,c
  2798                           
  2799                           ;dc_motor.c: 133:         mR->power--;
  2800  0030E6  C016  FFD9         	movff	stop@mR,fsr2l
  2801  0030EA  C017  FFDA         	movff	stop@mR+1,fsr2h
  2802  0030EE  06DF               	decf	indf2,f,c
  2803  0030F0                     
  2804                           ;dc_motor.c: 134:         setMotorPWM(mL);
  2805  0030F0  C014  F009         	movff	stop@mL,setMotorPWM@m
  2806  0030F4  C015  F00A         	movff	stop@mL+1,setMotorPWM@m+1
  2807  0030F8  EC95  F00F         	call	_setMotorPWM	;wreg free
  2808  0030FC                     
  2809                           ;dc_motor.c: 135:         setMotorPWM(mR);
  2810  0030FC  C016  F009         	movff	stop@mR,setMotorPWM@m
  2811  003100  C017  F00A         	movff	stop@mR+1,setMotorPWM@m+1
  2812  003104  EC95  F00F         	call	_setMotorPWM	;wreg free
  2813  003108                     
  2814                           ;dc_motor.c: 136:         _delay((unsigned long)((5)*(64000000/4000.0)));
  2815  003108  0E68               	movlw	104
  2816  00310A  6E18               	movwf	??_stop^0,c
  2817  00310C  0EE4               	movlw	228
  2818  00310E                     u3207:
  2819  00310E  2EE8               	decfsz	wreg,f,c
  2820  003110  D7FE               	bra	u3207
  2821  003112  2E18               	decfsz	??_stop^0,f,c
  2822  003114  D7FC               	bra	u3207
  2823  003116  D000               	nop2	
  2824  003118                     l3071:
  2825                           
  2826                           ;dc_motor.c: 131:     while (mL->power>0){
  2827  003118  C014  FFD9         	movff	stop@mL,fsr2l
  2828  00311C  C015  FFDA         	movff	stop@mL+1,fsr2h
  2829  003120  50DF               	movf	indf2,w,c
  2830  003122  A4D8               	btfss	status,2,c
  2831  003124  EF96  F018         	goto	u2641
  2832  003128  EF98  F018         	goto	u2640
  2833  00312C                     u2641:
  2834  00312C  EF6E  F018         	goto	l3063
  2835  003130                     u2640:
  2836  003130  0012               	return		;funcret
  2837  003132                     __end_of_stop:
  2838                           	callstack 0
  2839                           
  2840 ;; *************** function _sprintf *****************
  2841 ;; Defined at:
  2842 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\nf_sprintf.c"
  2843 ;; Parameters:    Size  Location     Type
  2844 ;;  s               2   87[COMRAM] PTR unsigned char 
  2845 ;;		 -> main@battery_level(10), 
  2846 ;;  fmt             2   89[COMRAM] PTR const unsigned char 
  2847 ;;		 -> STR_1(18), 
  2848 ;; Auto vars:     Size  Location     Type
  2849 ;;  f               6    4[BANK0 ] struct _IO_FILE
  2850 ;;  ap              2    2[BANK0 ] PTR void [1]
  2851 ;;		 -> ?_sprintf(2), 
  2852 ;;  ret             2    0        int 
  2853 ;; Return value:  Size  Location     Type
  2854 ;;                  2   87[COMRAM] int 
  2855 ;; Registers used:
  2856 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2857 ;; Tracked objects:
  2858 ;;		On entry : 0/0
  2859 ;;		On exit  : 0/0
  2860 ;;		Unchanged: 0/0
  2861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2862 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2863 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2865 ;;      Totals:         6      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2866 ;;Total ram usage:       16 bytes
  2867 ;; Hardware stack levels used:    1
  2868 ;; Hardware stack levels required when called:    8
  2869 ;; This function calls:
  2870 ;;		_vfprintf
  2871 ;; This function is called by:
  2872 ;;		_main
  2873 ;; This function uses a non-reentrant model
  2874 ;;
  2875                           
  2876                           	psect	text10
  2877  003186                     __ptext10:
  2878                           	callstack 0
  2879  003186                     _sprintf:
  2880                           	callstack 22
  2881  003186  0E5C               	movlw	low (?_sprintf+4)
  2882  003188  0100               	movlb	0	; () banked
  2883  00318A  6F62               	movwf	sprintf@ap& (0+255),b
  2884  00318C  0E00               	movlw	high (?_sprintf+4)
  2885  00318E  6F63               	movwf	(sprintf@ap+1)& (0+255),b
  2886  003190  C058  F064         	movff	sprintf@s,sprintf@f
  2887  003194  C059  F065         	movff	sprintf@s+1,sprintf@f+1
  2888  003198                     
  2889                           ; BSR set to: 0
  2890  003198  0E00               	movlw	0
  2891  00319A  6F67               	movwf	(sprintf@f+3)& (0+255),b
  2892  00319C  0E00               	movlw	0
  2893  00319E  6F66               	movwf	(sprintf@f+2)& (0+255),b
  2894  0031A0                     
  2895                           ; BSR set to: 0
  2896  0031A0  0E00               	movlw	0
  2897  0031A2  6F69               	movwf	(sprintf@f+5)& (0+255),b
  2898  0031A4  0E00               	movlw	0
  2899  0031A6  6F68               	movwf	(sprintf@f+4)& (0+255),b
  2900  0031A8                     
  2901                           ; BSR set to: 0
  2902  0031A8  0E64               	movlw	low sprintf@f
  2903  0031AA  6E50               	movwf	vfprintf@fp^0,c
  2904  0031AC  0E00               	movlw	high sprintf@f
  2905  0031AE  6E51               	movwf	(vfprintf@fp+1)^0,c
  2906  0031B0  C05A  F052         	movff	sprintf@fmt,vfprintf@fmt
  2907  0031B4  C05B  F053         	movff	sprintf@fmt+1,vfprintf@fmt+1
  2908  0031B8  0E62               	movlw	low sprintf@ap
  2909  0031BA  6E54               	movwf	vfprintf@ap^0,c
  2910  0031BC  0E00               	movlw	high sprintf@ap
  2911  0031BE  6E55               	movwf	(vfprintf@ap+1)^0,c
  2912  0031C0  EC3B  F018         	call	_vfprintf	;wreg free
  2913  0031C4  0100               	movlb	0	; () banked
  2914  0031C6  5166               	movf	(sprintf@f+2)& (0+255),w,b
  2915  0031C8  2458               	addwf	sprintf@s^0,w,c
  2916  0031CA  6ED9               	movwf	fsr2l,c
  2917  0031CC  5167               	movf	(sprintf@f+3)& (0+255),w,b
  2918  0031CE  2059               	addwfc	(sprintf@s+1)^0,w,c
  2919  0031D0  6EDA               	movwf	fsr2h,c
  2920  0031D2  0E00               	movlw	0
  2921  0031D4  6EDF               	movwf	indf2,c
  2922  0031D6                     
  2923                           ; BSR set to: 0
  2924  0031D6  0012               	return		;funcret
  2925  0031D8                     __end_of_sprintf:
  2926                           	callstack 0
  2927                           
  2928 ;; *************** function _vfprintf *****************
  2929 ;; Defined at:
  2930 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c"
  2931 ;; Parameters:    Size  Location     Type
  2932 ;;  fp              2   79[COMRAM] PTR struct _IO_FILE
  2933 ;;		 -> sprintf@f(6), 
  2934 ;;  fmt             2   81[COMRAM] PTR const unsigned char 
  2935 ;;		 -> STR_1(18), 
  2936 ;;  ap              2   83[COMRAM] PTR PTR void 
  2937 ;;		 -> sprintf@ap(2), 
  2938 ;; Auto vars:     Size  Location     Type
  2939 ;;  cfmt            2   85[COMRAM] PTR unsigned char 
  2940 ;;		 -> STR_1(18), 
  2941 ;; Return value:  Size  Location     Type
  2942 ;;                  2   79[COMRAM] int 
  2943 ;; Registers used:
  2944 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2945 ;; Tracked objects:
  2946 ;;		On entry : 0/0
  2947 ;;		On exit  : 0/0
  2948 ;;		Unchanged: 0/0
  2949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2950 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2951 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2953 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2954 ;;Total ram usage:        8 bytes
  2955 ;; Hardware stack levels used:    1
  2956 ;; Hardware stack levels required when called:    7
  2957 ;; This function calls:
  2958 ;;		_vfpfcnvrt
  2959 ;; This function is called by:
  2960 ;;		_sprintf
  2961 ;; This function uses a non-reentrant model
  2962 ;;
  2963                           
  2964                           	psect	text11
  2965  003076                     __ptext11:
  2966                           	callstack 0
  2967  003076                     _vfprintf:
  2968                           	callstack 22
  2969  003076                     
  2970                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.31\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
  2971  003076  C052  F056         	movff	vfprintf@fmt,vfprintf@cfmt
  2972  00307A  C053  F057         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2973  00307E                     
  2974                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
  2975  00307E  0E00               	movlw	0
  2976  003080  0100               	movlb	0	; () banked
  2977  003082  6FE7               	movwf	(_nout+1)& (0+255),b
  2978  003084  0E00               	movlw	0
  2979  003086  6FE6               	movwf	_nout& (0+255),b
  2980                           
  2981                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
  2982  003088  EF59  F018         	goto	l2881
  2983  00308C                     l2879:
  2984                           
  2985                           ; BSR set to: 0
  2986                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
  2987  00308C  C050  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
  2988  003090  C051  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  2989  003094  0E56               	movlw	low vfprintf@cfmt
  2990  003096  6E42               	movwf	vfpfcnvrt@fmt^0,c
  2991  003098  0E00               	movlw	high vfprintf@cfmt
  2992  00309A  6E43               	movwf	(vfpfcnvrt@fmt+1)^0,c
  2993  00309C  C054  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
  2994  0030A0  C055  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  2995  0030A4  EC75  F010         	call	_vfpfcnvrt	;wreg free
  2996  0030A8  5040               	movf	?_vfpfcnvrt^0,w,c
  2997  0030AA  0100               	movlb	0	; () banked
  2998  0030AC  27E6               	addwf	_nout& (0+255),f,b
  2999  0030AE  5041               	movf	(?_vfpfcnvrt+1)^0,w,c
  3000  0030B0  23E7               	addwfc	(_nout+1)& (0+255),f,b
  3001  0030B2                     l2881:
  3002                           
  3003                           ; BSR set to: 0
  3004                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
  3005  0030B2  C056  FFF6         	movff	vfprintf@cfmt,tblptrl
  3006  0030B6  C057  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  3007  0030BA                     	if	0	;tblptru may be non-zero
  3008  0030BA                     	endif
  3009  0030BA                     	if	0	;tblptru may be non-zero
  3010  0030BA                     	endif
  3011  0030BA  0008               	tblrd		*
  3012  0030BC  50F5               	movf	tablat,w,c
  3013  0030BE  0900               	iorlw	0
  3014  0030C0  A4D8               	btfss	status,2,c
  3015  0030C2  EF65  F018         	goto	u2341
  3016  0030C6  EF67  F018         	goto	u2340
  3017  0030CA                     u2341:
  3018  0030CA  EF46  F018         	goto	l2879
  3019  0030CE                     u2340:
  3020  0030CE                     
  3021                           ; BSR set to: 0
  3022                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
  3023  0030CE  C0E6  F050         	movff	_nout,?_vfprintf
  3024  0030D2  C0E7  F051         	movff	_nout+1,?_vfprintf+1
  3025  0030D6                     
  3026                           ; BSR set to: 0
  3027  0030D6  0012               	return		;funcret
  3028  0030D8                     __end_of_vfprintf:
  3029                           	callstack 0
  3030                           
  3031 ;; *************** function _vfpfcnvrt *****************
  3032 ;; Defined at:
  3033 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c"
  3034 ;; Parameters:    Size  Location     Type
  3035 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
  3036 ;;		 -> sprintf@f(6), 
  3037 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
  3038 ;;		 -> vfprintf@cfmt(2), 
  3039 ;;  ap              2   67[COMRAM] PTR PTR void 
  3040 ;;		 -> sprintf@ap(2), 
  3041 ;; Auto vars:     Size  Location     Type
  3042 ;;  ll              8   71[COMRAM] long long 
  3043 ;;  llu             8    0        unsigned long long 
  3044 ;;  f               4    0        unsigned long long 
  3045 ;;  vp              3    0        PTR void 
  3046 ;;  ct              3    0        unsigned char [3]
  3047 ;;  cp              3    0        PTR unsigned char 
  3048 ;;  i               2    0        int 
  3049 ;;  done            2    0        int 
  3050 ;;  c               1    0        unsigned char 
  3051 ;; Return value:  Size  Location     Type
  3052 ;;                  2   63[COMRAM] int 
  3053 ;; Registers used:
  3054 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3055 ;; Tracked objects:
  3056 ;;		On entry : 0/0
  3057 ;;		On exit  : 0/0
  3058 ;;		Unchanged: 0/0
  3059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3060 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3061 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3062 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3063 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3064 ;;Total ram usage:       16 bytes
  3065 ;; Hardware stack levels used:    1
  3066 ;; Hardware stack levels required when called:    6
  3067 ;; This function calls:
  3068 ;;		_dtoa
  3069 ;;		_fputc
  3070 ;; This function is called by:
  3071 ;;		_vfprintf
  3072 ;; This function uses a non-reentrant model
  3073 ;;
  3074                           
  3075                           	psect	text12
  3076  0020EA                     __ptext12:
  3077                           	callstack 0
  3078  0020EA                     _vfpfcnvrt:
  3079                           	callstack 22
  3080  0020EA                     
  3081                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.31\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.31\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.31\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          1\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
  3082  0020EA  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3083  0020EE  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3084  0020F2  CFDE FFF6          	movff	postinc2,tblptrl
  3085  0020F6  CFDD FFF7          	movff	postdec2,tblptrh
  3086  0020FA                     	if	0	;tblptru may be non-zero
  3087  0020FA                     	endif
  3088  0020FA                     	if	0	;tblptru may be non-zero
  3089  0020FA                     	endif
  3090  0020FA  0008               	tblrd		*
  3091  0020FC  50F5               	movf	tablat,w,c
  3092  0020FE  0A25               	xorlw	37
  3093  002100  A4D8               	btfss	status,2,c
  3094  002102  EF85  F010         	goto	u2171
  3095  002106  EF87  F010         	goto	u2170
  3096  00210A                     u2171:
  3097  00210A  EF33  F011         	goto	l2763
  3098  00210E                     u2170:
  3099  00210E                     
  3100                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
  3101  00210E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3102  002112  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3103  002116  2ADE               	incf	postinc2,f,c
  3104  002118  0E00               	movlw	0
  3105  00211A  22DD               	addwfc	postdec2,f,c
  3106  00211C                     
  3107                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
  3108  00211C  0E00               	movlw	0
  3109  00211E  0100               	movlb	0	; () banked
  3110  002120  6FE9               	movwf	(_width+1)& (0+255),b
  3111  002122  0E00               	movlw	0
  3112  002124  6FE8               	movwf	_width& (0+255),b
  3113  002126  C0E8  F0EC         	movff	_width,_flags
  3114  00212A  C0E9  F0ED         	movff	_width+1,_flags+1
  3115  00212E                     
  3116                           ; BSR set to: 0
  3117                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
  3118  00212E  69EA               	setf	_prec& (0+255),b
  3119  002130  69EB               	setf	(_prec+1)& (0+255),b
  3120  002132                     
  3121                           ; BSR set to: 0
  3122                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 847:         if (
      +                          (*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  3123  002132  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3124  002136  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3125  00213A  CFDE FFF6          	movff	postinc2,tblptrl
  3126  00213E  CFDD FFF7          	movff	postdec2,tblptrh
  3127  002142                     	if	0	;tblptru may be non-zero
  3128  002142                     	endif
  3129  002142                     	if	0	;tblptru may be non-zero
  3130  002142                     	endif
  3131  002142  0008               	tblrd		*
  3132  002144  50F5               	movf	tablat,w,c
  3133  002146  0A64               	xorlw	100
  3134  002148  B4D8               	btfsc	status,2,c
  3135  00214A  EFA9  F010         	goto	u2181
  3136  00214E  EFAB  F010         	goto	u2180
  3137  002152                     u2181:
  3138  002152  EFBD  F010         	goto	l2741
  3139  002156                     u2180:
  3140  002156                     
  3141                           ; BSR set to: 0
  3142  002156  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3143  00215A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3144  00215E  CFDE FFF6          	movff	postinc2,tblptrl
  3145  002162  CFDD FFF7          	movff	postdec2,tblptrh
  3146  002166                     	if	0	;tblptru may be non-zero
  3147  002166                     	endif
  3148  002166                     	if	0	;tblptru may be non-zero
  3149  002166                     	endif
  3150  002166  0008               	tblrd		*
  3151  002168  50F5               	movf	tablat,w,c
  3152  00216A  0A69               	xorlw	105
  3153  00216C  A4D8               	btfss	status,2,c
  3154  00216E  EFBB  F010         	goto	u2191
  3155  002172  EFBD  F010         	goto	u2190
  3156  002176                     u2191:
  3157  002176  EFFD  F010         	goto	l2747
  3158  00217A                     u2190:
  3159  00217A                     l2741:
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 849:             
      +                          ++*fmt;
  3163  00217A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3164  00217E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3165  002182  2ADE               	incf	postinc2,f,c
  3166  002184  0E00               	movlw	0
  3167  002186  22DD               	addwfc	postdec2,f,c
  3168                           
  3169                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 850:             
      +                          ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  3170  002188  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  3171  00218C  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  3172  002190  CFDF F046          	movff	indf2,??_vfpfcnvrt
  3173  002194  0E02               	movlw	2
  3174  002196  26DE               	addwf	postinc2,f,c
  3175  002198  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  3176  00219C  0E00               	movlw	0
  3177  00219E  22DD               	addwfc	postdec2,f,c
  3178  0021A0  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  3179  0021A4  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  3180  0021A8  CFDE F048          	movff	postinc2,vfpfcnvrt@ll
  3181  0021AC  CFDD F049          	movff	postdec2,vfpfcnvrt@ll+1
  3182  0021B0  0E00               	movlw	0
  3183  0021B2  BE49               	btfsc	(vfpfcnvrt@ll+1)^0,7,c
  3184  0021B4  0EFF               	movlw	-1
  3185  0021B6  6E4A               	movwf	(vfpfcnvrt@ll+2)^0,c
  3186  0021B8  6E4B               	movwf	(vfpfcnvrt@ll+3)^0,c
  3187  0021BA  6E4C               	movwf	(vfpfcnvrt@ll+4)^0,c
  3188  0021BC  6E4D               	movwf	(vfpfcnvrt@ll+5)^0,c
  3189  0021BE  6E4E               	movwf	(vfpfcnvrt@ll+6)^0,c
  3190  0021C0  6E4F               	movwf	(vfpfcnvrt@ll+7)^0,c
  3191  0021C2                     
  3192                           ; BSR set to: 0
  3193                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 852:             
      +                          return dtoa(fp, ll);
  3194  0021C2  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  3195  0021C6  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  3196  0021CA  C048  F01E         	movff	vfpfcnvrt@ll,dtoa@d
  3197  0021CE  C049  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  3198  0021D2  C04A  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  3199  0021D6  C04B  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  3200  0021DA  C04C  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  3201  0021DE  C04D  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  3202  0021E2  C04E  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  3203  0021E6  C04F  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  3204  0021EA  ECC6  F00B         	call	_dtoa	;wreg free
  3205  0021EE  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
  3206  0021F2  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
  3207  0021F6  EF4E  F011         	goto	l1272
  3208  0021FA                     l2747:
  3209                           
  3210                           ; BSR set to: 0
  3211                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
  3212  0021FA  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3213  0021FE  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3214  002202  CFDE FFF6          	movff	postinc2,tblptrl
  3215  002206  CFDD FFF7          	movff	postdec2,tblptrh
  3216  00220A                     	if	0	;tblptru may be non-zero
  3217  00220A                     	endif
  3218  00220A                     	if	0	;tblptru may be non-zero
  3219  00220A                     	endif
  3220  00220A  0008               	tblrd		*
  3221  00220C  50F5               	movf	tablat,w,c
  3222  00220E  0A25               	xorlw	37
  3223  002210  A4D8               	btfss	status,2,c
  3224  002212  EF0D  F011         	goto	u2201
  3225  002216  EF0F  F011         	goto	u2200
  3226  00221A                     u2201:
  3227  00221A  EF26  F011         	goto	l2757
  3228  00221E                     u2200:
  3229  00221E                     
  3230                           ; BSR set to: 0
  3231                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
  3232  00221E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3233  002222  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3234  002226  2ADE               	incf	postinc2,f,c
  3235  002228  0E00               	movlw	0
  3236  00222A  22DD               	addwfc	postdec2,f,c
  3237  00222C                     
  3238                           ; BSR set to: 0
  3239                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
  3240  00222C  0E00               	movlw	0
  3241  00222E  6E02               	movwf	(fputc@c+1)^0,c
  3242  002230  0E25               	movlw	37
  3243  002232  6E01               	movwf	fputc@c^0,c
  3244  002234  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  3245  002238  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  3246  00223C  EC30  F015         	call	_fputc	;wreg free
  3247  002240                     l2753:
  3248                           
  3249                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
  3250  002240  0E00               	movlw	0
  3251  002242  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  3252  002244  0E01               	movlw	1
  3253  002246  6E40               	movwf	?_vfpfcnvrt^0,c
  3254  002248  EF4E  F011         	goto	l1272
  3255  00224C                     l2757:
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
  3259  00224C  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3260  002250  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3261  002254  2ADE               	incf	postinc2,f,c
  3262  002256  0E00               	movlw	0
  3263  002258  22DD               	addwfc	postdec2,f,c
  3264  00225A                     
  3265                           ; BSR set to: 0
  3266                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
  3267  00225A  0E00               	movlw	0
  3268  00225C  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  3269  00225E  0E00               	movlw	0
  3270  002260  6E40               	movwf	?_vfpfcnvrt^0,c
  3271  002262  EF4E  F011         	goto	l1272
  3272  002266                     l2763:
  3273                           
  3274                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
  3275  002266  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3276  00226A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3277  00226E  CFDE FFF6          	movff	postinc2,tblptrl
  3278  002272  CFDD FFF7          	movff	postdec2,tblptrh
  3279  002276                     	if	0	;tblptru may be non-zero
  3280  002276                     	endif
  3281  002276                     	if	0	;tblptru may be non-zero
  3282  002276                     	endif
  3283  002276  0008               	tblrd		*
  3284  002278  50F5               	movf	tablat,w,c
  3285  00227A  6E01               	movwf	fputc@c^0,c
  3286  00227C  6A02               	clrf	(fputc@c+1)^0,c
  3287  00227E  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  3288  002282  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  3289  002286  EC30  F015         	call	_fputc	;wreg free
  3290  00228A                     
  3291                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
  3292  00228A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3293  00228E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3294  002292  2ADE               	incf	postinc2,f,c
  3295  002294  0E00               	movlw	0
  3296  002296  22DD               	addwfc	postdec2,f,c
  3297  002298  EF20  F011         	goto	l2753
  3298  00229C                     l1272:
  3299  00229C  0012               	return		;funcret
  3300  00229E                     __end_of_vfpfcnvrt:
  3301                           	callstack 0
  3302                           
  3303 ;; *************** function _dtoa *****************
  3304 ;; Defined at:
  3305 ;;		line 287 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c"
  3306 ;; Parameters:    Size  Location     Type
  3307 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  3308 ;;		 -> sprintf@f(6), 
  3309 ;;  d               8   29[COMRAM] long long 
  3310 ;; Auto vars:     Size  Location     Type
  3311 ;;  n               8   53[COMRAM] long long 
  3312 ;;  i               2   61[COMRAM] int 
  3313 ;;  s               2   51[COMRAM] int 
  3314 ;;  w               2   49[COMRAM] int 
  3315 ;;  p               2   47[COMRAM] int 
  3316 ;; Return value:  Size  Location     Type
  3317 ;;                  2   27[COMRAM] int 
  3318 ;; Registers used:
  3319 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3320 ;; Tracked objects:
  3321 ;;		On entry : 0/0
  3322 ;;		On exit  : 0/0
  3323 ;;		Unchanged: 0/0
  3324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3325 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3326 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3327 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3328 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3329 ;;Total ram usage:       36 bytes
  3330 ;; Hardware stack levels used:    1
  3331 ;; Hardware stack levels required when called:    5
  3332 ;; This function calls:
  3333 ;;		___aodiv
  3334 ;;		___aomod
  3335 ;;		_abs
  3336 ;;		_pad
  3337 ;; This function is called by:
  3338 ;;		_vfpfcnvrt
  3339 ;; This function uses a non-reentrant model
  3340 ;;
  3341                           
  3342                           	psect	text13
  3343  00178C                     __ptext13:
  3344                           	callstack 0
  3345  00178C                     _dtoa:
  3346                           	callstack 22
  3347  00178C                     
  3348                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 287: static int d
      +                          toa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\d
      +                          oprnt.c: 288: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 28
      +                          9:     int i, p, s, w;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprn
      +                          t.c: 290:     long long n;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\d
      +                          oprnt.c: 293:     n = d;
  3349  00178C  C01E  F036         	movff	dtoa@d,dtoa@n
  3350  001790  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  3351  001794  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  3352  001798  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  3353  00179C  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  3354  0017A0  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  3355  0017A4  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  3356  0017A8  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  3357  0017AC                     
  3358                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 294:     s = n < 
      +                          0 ? 1 : 0;
  3359  0017AC  BE3D               	btfsc	(dtoa@n+7)^0,7,c
  3360  0017AE  EFDB  F00B         	goto	u1921
  3361  0017B2  EFDE  F00B         	goto	u1920
  3362  0017B6                     u1921:
  3363  0017B6  0E01               	movlw	1
  3364  0017B8  EFDF  F00B         	goto	u1930
  3365  0017BC                     u1920:
  3366  0017BC  0E00               	movlw	0
  3367  0017BE                     u1930:
  3368  0017BE  6E34               	movwf	dtoa@s^0,c
  3369  0017C0  6A35               	clrf	(dtoa@s+1)^0,c
  3370                           
  3371                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 295:     if (s) {
  3372  0017C2  5034               	movf	dtoa@s^0,w,c
  3373  0017C4  1035               	iorwf	(dtoa@s+1)^0,w,c
  3374  0017C6  B4D8               	btfsc	status,2,c
  3375  0017C8  EFE8  F00B         	goto	u1941
  3376  0017CC  EFEA  F00B         	goto	u1940
  3377  0017D0                     u1941:
  3378  0017D0  EFFA  F00B         	goto	l2645
  3379  0017D4                     u1940:
  3380  0017D4                     
  3381                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 296:         n = 
      +                          -n;
  3382  0017D4  1E3D               	comf	(dtoa@n+7)^0,f,c
  3383  0017D6  1E3C               	comf	(dtoa@n+6)^0,f,c
  3384  0017D8  1E3B               	comf	(dtoa@n+5)^0,f,c
  3385  0017DA  1E3A               	comf	(dtoa@n+4)^0,f,c
  3386  0017DC  1E39               	comf	(dtoa@n+3)^0,f,c
  3387  0017DE  1E38               	comf	(dtoa@n+2)^0,f,c
  3388  0017E0  1E37               	comf	(dtoa@n+1)^0,f,c
  3389  0017E2  6C36               	negf	dtoa@n^0,c
  3390  0017E4  0E00               	movlw	0
  3391  0017E6  2237               	addwfc	(dtoa@n+1)^0,f,c
  3392  0017E8  2238               	addwfc	(dtoa@n+2)^0,f,c
  3393  0017EA  2239               	addwfc	(dtoa@n+3)^0,f,c
  3394  0017EC  223A               	addwfc	(dtoa@n+4)^0,f,c
  3395  0017EE  223B               	addwfc	(dtoa@n+5)^0,f,c
  3396  0017F0  223C               	addwfc	(dtoa@n+6)^0,f,c
  3397  0017F2  223D               	addwfc	(dtoa@n+7)^0,f,c
  3398  0017F4                     l2645:
  3399                           
  3400                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 300:     if (!(pr
      +                          ec < 0)) {
  3401  0017F4  0100               	movlb	0	; () banked
  3402  0017F6  BFEB               	btfsc	(_prec+1)& (0+255),7,b
  3403  0017F8  EF00  F00C         	goto	u1951
  3404  0017FC  EF02  F00C         	goto	u1950
  3405  001800                     u1951:
  3406  001800  EF03  F00C         	goto	l2649
  3407  001804                     u1950:
  3408  001804                     
  3409                           ; BSR set to: 0
  3410                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 301:         flag
      +                          s &= ~(1 << 1);
  3411  001804  93EC               	bcf	_flags& (0+255),1,b
  3412  001806                     l2649:
  3413                           
  3414                           ; BSR set to: 0
  3415                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 303:     p = (0 <
      +                           prec) ? prec : 1;
  3416  001806  BFEB               	btfsc	(_prec+1)& (0+255),7,b
  3417  001808  EF10  F00C         	goto	u1960
  3418  00180C  51EB               	movf	(_prec+1)& (0+255),w,b
  3419  00180E  E106               	bnz	u1961
  3420  001810  05EA               	decf	_prec& (0+255),w,b
  3421  001812  B0D8               	btfsc	status,0,c
  3422  001814  EF0E  F00C         	goto	u1961
  3423  001818  EF10  F00C         	goto	u1960
  3424  00181C                     u1961:
  3425  00181C  EF16  F00C         	goto	l1245
  3426  001820                     u1960:
  3427  001820                     
  3428                           ; BSR set to: 0
  3429  001820  0E00               	movlw	0
  3430  001822  6E31               	movwf	(dtoa@p+1)^0,c
  3431  001824  0E01               	movlw	1
  3432  001826  6E30               	movwf	dtoa@p^0,c
  3433  001828  EF1A  F00C         	goto	l1247
  3434  00182C                     l1245:
  3435                           
  3436                           ; BSR set to: 0
  3437  00182C  C0EA  F030         	movff	_prec,dtoa@p
  3438  001830  C0EB  F031         	movff	_prec+1,dtoa@p+1
  3439  001834                     l1247:
  3440                           
  3441                           ; BSR set to: 0
  3442                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 304:     w = widt
      +                          h;
  3443  001834  C0E8  F032         	movff	_width,dtoa@w
  3444  001838  C0E9  F033         	movff	_width+1,dtoa@w+1
  3445  00183C                     
  3446                           ; BSR set to: 0
  3447                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 305:     if (s ||
      +                           (flags & (1 << 2))) {
  3448  00183C  5034               	movf	dtoa@s^0,w,c
  3449  00183E  1035               	iorwf	(dtoa@s+1)^0,w,c
  3450  001840  A4D8               	btfss	status,2,c
  3451  001842  EF25  F00C         	goto	u1971
  3452  001846  EF27  F00C         	goto	u1970
  3453  00184A                     u1971:
  3454  00184A  EF2E  F00C         	goto	l2657
  3455  00184E                     u1970:
  3456  00184E                     
  3457                           ; BSR set to: 0
  3458  00184E  A5EC               	btfss	_flags& (0+255),2,b
  3459  001850  EF2C  F00C         	goto	u1981
  3460  001854  EF2E  F00C         	goto	u1980
  3461  001858                     u1981:
  3462  001858  EF31  F00C         	goto	l2659
  3463  00185C                     u1980:
  3464  00185C                     l2657:
  3465                           
  3466                           ; BSR set to: 0
  3467                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 306:         --w;
  3468  00185C  0632               	decf	dtoa@w^0,f,c
  3469  00185E  A0D8               	btfss	status,0,c
  3470  001860  0633               	decf	(dtoa@w+1)^0,f,c
  3471  001862                     l2659:
  3472                           
  3473                           ; BSR set to: 0
  3474                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 310:     i = size
      +                          of(dbuf) - 1;
  3475  001862  0E00               	movlw	0
  3476  001864  6E3F               	movwf	(dtoa@i+1)^0,c
  3477  001866  0E1F               	movlw	31
  3478  001868  6E3E               	movwf	dtoa@i^0,c
  3479  00186A                     
  3480                           ; BSR set to: 0
  3481                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 311:     dbuf[i] 
      +                          = '\0';
  3482  00186A  0E00               	movlw	0
  3483  00186C  0101               	movlb	1	; () banked
  3484  00186E  6F1F               	movwf	(_dbuf+31)& (0+255),b
  3485                           
  3486                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  3487  001870  EFB6  F00C         	goto	l2673
  3488  001874                     l2663:
  3489                           
  3490                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 313:         --i;
  3491  001874  063E               	decf	dtoa@i^0,f,c
  3492  001876  A0D8               	btfss	status,0,c
  3493  001878  063F               	decf	(dtoa@i+1)^0,f,c
  3494  00187A                     
  3495                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 314:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  3496  00187A  0E00               	movlw	low _dbuf
  3497  00187C  243E               	addwf	dtoa@i^0,w,c
  3498  00187E  6ED9               	movwf	fsr2l,c
  3499  001880  0E01               	movlw	high _dbuf
  3500  001882  203F               	addwfc	(dtoa@i+1)^0,w,c
  3501  001884  6EDA               	movwf	fsr2h,c
  3502  001886  C036  F001         	movff	dtoa@n,___aomod@dividend
  3503  00188A  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  3504  00188E  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  3505  001892  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  3506  001896  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  3507  00189A  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  3508  00189E  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  3509  0018A2  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  3510  0018A6  0E0A               	movlw	10
  3511  0018A8  6E09               	movwf	___aomod@divisor^0,c
  3512  0018AA  0E00               	movlw	0
  3513  0018AC  6E0A               	movwf	(___aomod@divisor+1)^0,c
  3514  0018AE  0E00               	movlw	0
  3515  0018B0  6E0B               	movwf	(___aomod@divisor+2)^0,c
  3516  0018B2  0E00               	movlw	0
  3517  0018B4  6E0C               	movwf	(___aomod@divisor+3)^0,c
  3518  0018B6  0E00               	movlw	0
  3519  0018B8  6E0D               	movwf	(___aomod@divisor+4)^0,c
  3520  0018BA  0E00               	movlw	0
  3521  0018BC  6E0E               	movwf	(___aomod@divisor+5)^0,c
  3522  0018BE  0E00               	movlw	0
  3523  0018C0  6E0F               	movwf	(___aomod@divisor+6)^0,c
  3524  0018C2  0E00               	movlw	0
  3525  0018C4  6E10               	movwf	(___aomod@divisor+7)^0,c
  3526  0018C6  ECD6  F012         	call	___aomod	;wreg free
  3527  0018CA  C001  F026         	movff	?___aomod,??_dtoa
  3528  0018CE  C002  F027         	movff	?___aomod+1,??_dtoa+1
  3529  0018D2  C003  F028         	movff	?___aomod+2,??_dtoa+2
  3530  0018D6  C004  F029         	movff	?___aomod+3,??_dtoa+3
  3531  0018DA  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  3532  0018DE  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  3533  0018E2  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  3534  0018E6  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  3535  0018EA  C026  F013         	movff	??_dtoa,abs@a
  3536  0018EE  C028  F014         	movff	??_dtoa+2,abs@a+1
  3537  0018F2  EC52  F019         	call	_abs	;wreg free
  3538  0018F6  5013               	movf	?_abs^0,w,c
  3539  0018F8  0F30               	addlw	48
  3540  0018FA  6EDF               	movwf	indf2,c
  3541  0018FC                     
  3542                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 315:         --p;
  3543  0018FC  0630               	decf	dtoa@p^0,f,c
  3544  0018FE  A0D8               	btfss	status,0,c
  3545  001900  0631               	decf	(dtoa@p+1)^0,f,c
  3546  001902                     
  3547                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 316:         --w;
  3548  001902  0632               	decf	dtoa@w^0,f,c
  3549  001904  A0D8               	btfss	status,0,c
  3550  001906  0633               	decf	(dtoa@w+1)^0,f,c
  3551  001908                     
  3552                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 317:         n = 
      +                          n / 10;
  3553  001908  C036  F001         	movff	dtoa@n,___aodiv@dividend
  3554  00190C  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  3555  001910  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  3556  001914  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  3557  001918  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  3558  00191C  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  3559  001920  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  3560  001924  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  3561  001928  0E0A               	movlw	10
  3562  00192A  6E09               	movwf	___aodiv@divisor^0,c
  3563  00192C  0E00               	movlw	0
  3564  00192E  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  3565  001930  0E00               	movlw	0
  3566  001932  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  3567  001934  0E00               	movlw	0
  3568  001936  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  3569  001938  0E00               	movlw	0
  3570  00193A  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  3571  00193C  0E00               	movlw	0
  3572  00193E  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  3573  001940  0E00               	movlw	0
  3574  001942  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  3575  001944  0E00               	movlw	0
  3576  001946  6E10               	movwf	(___aodiv@divisor+7)^0,c
  3577  001948  EC4F  F011         	call	___aodiv	;wreg free
  3578  00194C  C001  F036         	movff	?___aodiv,dtoa@n
  3579  001950  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  3580  001954  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  3581  001958  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  3582  00195C  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  3583  001960  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  3584  001964  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  3585  001968  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  3586  00196C                     l2673:
  3587                           
  3588                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  3589  00196C  BE3F               	btfsc	(dtoa@i+1)^0,7,c
  3590  00196E  EFC1  F00C         	goto	u1991
  3591  001972  503F               	movf	(dtoa@i+1)^0,w,c
  3592  001974  E108               	bnz	u1990
  3593  001976  043E               	decf	dtoa@i^0,w,c
  3594  001978  A0D8               	btfss	status,0,c
  3595  00197A  EFC1  F00C         	goto	u1991
  3596  00197E  EFC3  F00C         	goto	u1990
  3597  001982                     u1991:
  3598  001982  EFF4  F00C         	goto	l2683
  3599  001986                     u1990:
  3600  001986  5036               	movf	dtoa@n^0,w,c
  3601  001988  1037               	iorwf	(dtoa@n+1)^0,w,c
  3602  00198A  1038               	iorwf	(dtoa@n+2)^0,w,c
  3603  00198C  1039               	iorwf	(dtoa@n+3)^0,w,c
  3604  00198E  103A               	iorwf	(dtoa@n+4)^0,w,c
  3605  001990  103B               	iorwf	(dtoa@n+5)^0,w,c
  3606  001992  103C               	iorwf	(dtoa@n+6)^0,w,c
  3607  001994  103D               	iorwf	(dtoa@n+7)^0,w,c
  3608  001996  A4D8               	btfss	status,2,c
  3609  001998  EFD0  F00C         	goto	u2001
  3610  00199C  EFD2  F00C         	goto	u2000
  3611  0019A0                     u2001:
  3612  0019A0  EF3A  F00C         	goto	l2663
  3613  0019A4                     u2000:
  3614  0019A4  BE31               	btfsc	(dtoa@p+1)^0,7,c
  3615  0019A6  EFDF  F00C         	goto	u2010
  3616  0019AA  5031               	movf	(dtoa@p+1)^0,w,c
  3617  0019AC  E106               	bnz	u2011
  3618  0019AE  0430               	decf	dtoa@p^0,w,c
  3619  0019B0  B0D8               	btfsc	status,0,c
  3620  0019B2  EFDD  F00C         	goto	u2011
  3621  0019B6  EFDF  F00C         	goto	u2010
  3622  0019BA                     u2011:
  3623  0019BA  EF3A  F00C         	goto	l2663
  3624  0019BE                     u2010:
  3625  0019BE  BE33               	btfsc	(dtoa@w+1)^0,7,c
  3626  0019C0  EFEA  F00C         	goto	u2021
  3627  0019C4  5033               	movf	(dtoa@w+1)^0,w,c
  3628  0019C6  E108               	bnz	u2020
  3629  0019C8  0432               	decf	dtoa@w^0,w,c
  3630  0019CA  A0D8               	btfss	status,0,c
  3631  0019CC  EFEA  F00C         	goto	u2021
  3632  0019D0  EFEC  F00C         	goto	u2020
  3633  0019D4                     u2021:
  3634  0019D4  EFF4  F00C         	goto	l2683
  3635  0019D8                     u2020:
  3636  0019D8  0100               	movlb	0	; () banked
  3637  0019DA  B3EC               	btfsc	_flags& (0+255),1,b
  3638  0019DC  EFF2  F00C         	goto	u2031
  3639  0019E0  EFF4  F00C         	goto	u2030
  3640  0019E4                     u2031:
  3641  0019E4  EF3A  F00C         	goto	l2663
  3642  0019E8                     u2030:
  3643  0019E8                     l2683:
  3644                           
  3645                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 321:     if (s ||
      +                           (flags & (1 << 2))) {
  3646  0019E8  5034               	movf	dtoa@s^0,w,c
  3647  0019EA  1035               	iorwf	(dtoa@s+1)^0,w,c
  3648  0019EC  A4D8               	btfss	status,2,c
  3649  0019EE  EFFB  F00C         	goto	u2041
  3650  0019F2  EFFD  F00C         	goto	u2040
  3651  0019F6                     u2041:
  3652  0019F6  EF05  F00D         	goto	l2687
  3653  0019FA                     u2040:
  3654  0019FA  0100               	movlb	0	; () banked
  3655  0019FC  A5EC               	btfss	_flags& (0+255),2,b
  3656  0019FE  EF03  F00D         	goto	u2051
  3657  001A02  EF05  F00D         	goto	u2050
  3658  001A06                     u2051:
  3659  001A06  EF23  F00D         	goto	l2697
  3660  001A0A                     u2050:
  3661  001A0A                     l2687:
  3662                           
  3663                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 322:         --i;
  3664  001A0A  063E               	decf	dtoa@i^0,f,c
  3665  001A0C  A0D8               	btfss	status,0,c
  3666  001A0E  063F               	decf	(dtoa@i+1)^0,f,c
  3667  001A10                     
  3668                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 323:         dbuf
      +                          [i] = s ? '-' : '+';
  3669  001A10  5034               	movf	dtoa@s^0,w,c
  3670  001A12  1035               	iorwf	(dtoa@s+1)^0,w,c
  3671  001A14  A4D8               	btfss	status,2,c
  3672  001A16  EF0F  F00D         	goto	u2061
  3673  001A1A  EF11  F00D         	goto	u2060
  3674  001A1E                     u2061:
  3675  001A1E  EF17  F00D         	goto	l2693
  3676  001A22                     u2060:
  3677  001A22  0E00               	movlw	0
  3678  001A24  6E2F               	movwf	(_dtoa$2791+1)^0,c
  3679  001A26  0E2B               	movlw	43
  3680  001A28  6E2E               	movwf	_dtoa$2791^0,c
  3681  001A2A  EF1B  F00D         	goto	l2695
  3682  001A2E                     l2693:
  3683  001A2E  0E00               	movlw	0
  3684  001A30  6E2F               	movwf	(_dtoa$2791+1)^0,c
  3685  001A32  0E2D               	movlw	45
  3686  001A34  6E2E               	movwf	_dtoa$2791^0,c
  3687  001A36                     l2695:
  3688  001A36  0E00               	movlw	low _dbuf
  3689  001A38  243E               	addwf	dtoa@i^0,w,c
  3690  001A3A  6ED9               	movwf	fsr2l,c
  3691  001A3C  0E01               	movlw	high _dbuf
  3692  001A3E  203F               	addwfc	(dtoa@i+1)^0,w,c
  3693  001A40  6EDA               	movwf	fsr2h,c
  3694  001A42  C02E  FFDF         	movff	_dtoa$2791,indf2
  3695  001A46                     l2697:
  3696                           
  3697                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 327:     return p
      +                          ad(fp, &dbuf[i], w);
  3698  001A46  C01C  F011         	movff	dtoa@fp,pad@fp
  3699  001A4A  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  3700  001A4E  0E00               	movlw	low _dbuf
  3701  001A50  243E               	addwf	dtoa@i^0,w,c
  3702  001A52  6E13               	movwf	pad@buf^0,c
  3703  001A54  0E01               	movlw	high _dbuf
  3704  001A56  203F               	addwfc	(dtoa@i+1)^0,w,c
  3705  001A58  6E14               	movwf	(pad@buf+1)^0,c
  3706  001A5A  C032  F015         	movff	dtoa@w,pad@p
  3707  001A5E  C033  F016         	movff	dtoa@w+1,pad@p+1
  3708  001A62  EC95  F015         	call	_pad	;wreg free
  3709  001A66  C011  F01C         	movff	?_pad,?_dtoa
  3710  001A6A  C012  F01D         	movff	?_pad+1,?_dtoa+1
  3711  001A6E  0012               	return		;funcret
  3712  001A70                     __end_of_dtoa:
  3713                           	callstack 0
  3714                           
  3715 ;; *************** function _pad *****************
  3716 ;; Defined at:
  3717 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c"
  3718 ;; Parameters:    Size  Location     Type
  3719 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  3720 ;;		 -> sprintf@f(6), 
  3721 ;;  buf             2   18[COMRAM] PTR unsigned char 
  3722 ;;		 -> dbuf(32), 
  3723 ;;  p               2   20[COMRAM] int 
  3724 ;; Auto vars:     Size  Location     Type
  3725 ;;  w               2   25[COMRAM] int 
  3726 ;;  i               2   23[COMRAM] int 
  3727 ;; Return value:  Size  Location     Type
  3728 ;;                  2   16[COMRAM] int 
  3729 ;; Registers used:
  3730 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3731 ;; Tracked objects:
  3732 ;;		On entry : 0/0
  3733 ;;		On exit  : 0/0
  3734 ;;		Unchanged: 0/0
  3735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3736 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3737 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3738 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3739 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3740 ;;Total ram usage:       11 bytes
  3741 ;; Hardware stack levels used:    1
  3742 ;; Hardware stack levels required when called:    4
  3743 ;; This function calls:
  3744 ;;		_fputc
  3745 ;;		_fputs
  3746 ;;		_strlen
  3747 ;; This function is called by:
  3748 ;;		_dtoa
  3749 ;; This function uses a non-reentrant model
  3750 ;;
  3751                           
  3752                           	psect	text14
  3753  002B2A                     __ptext14:
  3754                           	callstack 0
  3755  002B2A                     _pad:
  3756                           	callstack 22
  3757  002B2A                     
  3758                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
  3759  002B2A  0100               	movlb	0	; () banked
  3760  002B2C  A1EC               	btfss	_flags& (0+255),0,b
  3761  002B2E  EF9B  F015         	goto	u1811
  3762  002B32  EF9D  F015         	goto	u1810
  3763  002B36                     u1811:
  3764  002B36  EFA7  F015         	goto	l2567
  3765  002B3A                     u1810:
  3766  002B3A                     
  3767                           ; BSR set to: 0
  3768                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
  3769  002B3A  C013  F00A         	movff	pad@buf,fputs@s
  3770  002B3E  C014  F00B         	movff	pad@buf+1,fputs@s+1
  3771  002B42  C011  F00C         	movff	pad@fp,fputs@fp
  3772  002B46  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  3773  002B4A  EC0F  F019         	call	_fputs	;wreg free
  3774  002B4E                     l2567:
  3775                           
  3776                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
  3777  002B4E  BE16               	btfsc	(pad@p+1)^0,7,c
  3778  002B50  EFAC  F015         	goto	u1821
  3779  002B54  EFAE  F015         	goto	u1820
  3780  002B58                     u1821:
  3781  002B58  EFB4  F015         	goto	l2571
  3782  002B5C                     u1820:
  3783  002B5C  C015  F01A         	movff	pad@p,pad@w
  3784  002B60  C016  F01B         	movff	pad@p+1,pad@w+1
  3785  002B64  EFB8  F015         	goto	l1234
  3786  002B68                     l2571:
  3787  002B68  0E00               	movlw	0
  3788  002B6A  6E1B               	movwf	(pad@w+1)^0,c
  3789  002B6C  0E00               	movlw	0
  3790  002B6E  6E1A               	movwf	pad@w^0,c
  3791  002B70                     l1234:
  3792                           
  3793                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  3794  002B70  0E00               	movlw	0
  3795  002B72  6E19               	movwf	(pad@i+1)^0,c
  3796  002B74  0E00               	movlw	0
  3797  002B76  6E18               	movwf	pad@i^0,c
  3798                           
  3799                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  3800  002B78  EFCA  F015         	goto	l2577
  3801  002B7C                     l2573:
  3802                           
  3803                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
  3804  002B7C  0E00               	movlw	0
  3805  002B7E  6E02               	movwf	(fputc@c+1)^0,c
  3806  002B80  0E20               	movlw	32
  3807  002B82  6E01               	movwf	fputc@c^0,c
  3808  002B84  C011  F003         	movff	pad@fp,fputc@fp
  3809  002B88  C012  F004         	movff	pad@fp+1,fputc@fp+1
  3810  002B8C  EC30  F015         	call	_fputc	;wreg free
  3811  002B90                     
  3812                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 86:         ++i;
  3813  002B90  4A18               	infsnz	pad@i^0,f,c
  3814  002B92  2A19               	incf	(pad@i+1)^0,f,c
  3815  002B94                     l2577:
  3816                           
  3817                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  3818  002B94  501A               	movf	pad@w^0,w,c
  3819  002B96  5C18               	subwf	pad@i^0,w,c
  3820  002B98  5019               	movf	(pad@i+1)^0,w,c
  3821  002B9A  0A80               	xorlw	128
  3822  002B9C  6E17               	movwf	??_pad^0,c
  3823  002B9E  501B               	movf	(pad@w+1)^0,w,c
  3824  002BA0  0A80               	xorlw	128
  3825  002BA2  5817               	subwfb	??_pad^0,w,c
  3826  002BA4  A0D8               	btfss	status,0,c
  3827  002BA6  EFD7  F015         	goto	u1831
  3828  002BAA  EFD9  F015         	goto	u1830
  3829  002BAE                     u1831:
  3830  002BAE  EFBE  F015         	goto	l2573
  3831  002BB2                     u1830:
  3832  002BB2                     
  3833                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
  3834  002BB2  0100               	movlb	0	; () banked
  3835  002BB4  B1EC               	btfsc	_flags& (0+255),0,b
  3836  002BB6  EFDF  F015         	goto	u1841
  3837  002BBA  EFE1  F015         	goto	u1840
  3838  002BBE                     u1841:
  3839  002BBE  EFEB  F015         	goto	l2581
  3840  002BC2                     u1840:
  3841  002BC2                     
  3842                           ; BSR set to: 0
  3843                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
  3844  002BC2  C013  F00A         	movff	pad@buf,fputs@s
  3845  002BC6  C014  F00B         	movff	pad@buf+1,fputs@s+1
  3846  002BCA  C011  F00C         	movff	pad@fp,fputs@fp
  3847  002BCE  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  3848  002BD2  EC0F  F019         	call	_fputs	;wreg free
  3849  002BD6                     l2581:
  3850                           
  3851                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 94:     return (i
      +                          nt)(strlen(buf) + (size_t)w);
  3852  002BD6  C013  F001         	movff	pad@buf,strlen@s
  3853  002BDA  C014  F002         	movff	pad@buf+1,strlen@s+1
  3854  002BDE  EC72  F019         	call	_strlen	;wreg free
  3855  002BE2  501A               	movf	pad@w^0,w,c
  3856  002BE4  2401               	addwf	?_strlen^0,w,c
  3857  002BE6  6E11               	movwf	?_pad^0,c
  3858  002BE8  501B               	movf	(pad@w+1)^0,w,c
  3859  002BEA  2002               	addwfc	(?_strlen+1)^0,w,c
  3860  002BEC  6E12               	movwf	(?_pad+1)^0,c
  3861  002BEE  0012               	return		;funcret
  3862  002BF0                     __end_of_pad:
  3863                           	callstack 0
  3864                           
  3865 ;; *************** function _strlen *****************
  3866 ;; Defined at:
  3867 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\strlen.c"
  3868 ;; Parameters:    Size  Location     Type
  3869 ;;  s               2    0[COMRAM] PTR const unsigned char 
  3870 ;;		 -> dbuf(32), 
  3871 ;; Auto vars:     Size  Location     Type
  3872 ;;  a               2    2[COMRAM] PTR const unsigned char 
  3873 ;;		 -> dbuf(32), 
  3874 ;; Return value:  Size  Location     Type
  3875 ;;                  2    0[COMRAM] unsigned int 
  3876 ;; Registers used:
  3877 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3878 ;; Tracked objects:
  3879 ;;		On entry : 0/0
  3880 ;;		On exit  : 0/0
  3881 ;;		Unchanged: 0/0
  3882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3883 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3884 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3886 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3887 ;;Total ram usage:        4 bytes
  3888 ;; Hardware stack levels used:    1
  3889 ;; Hardware stack levels required when called:    1
  3890 ;; This function calls:
  3891 ;;		Nothing
  3892 ;; This function is called by:
  3893 ;;		_pad
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           	psect	text15
  3898  0032E4                     __ptext15:
  3899                           	callstack 0
  3900  0032E4                     _strlen:
  3901                           	callstack 24
  3902  0032E4  C001  F003         	movff	strlen@s,strlen@a
  3903  0032E8  C002  F004         	movff	strlen@s+1,strlen@a+1
  3904  0032EC  EF7A  F019         	goto	l2447
  3905  0032F0                     l2445:
  3906  0032F0  4A01               	infsnz	strlen@s^0,f,c
  3907  0032F2  2A02               	incf	(strlen@s+1)^0,f,c
  3908  0032F4                     l2447:
  3909  0032F4  C001  FFD9         	movff	strlen@s,fsr2l
  3910  0032F8  C002  FFDA         	movff	strlen@s+1,fsr2h
  3911  0032FC  50DF               	movf	indf2,w,c
  3912  0032FE  A4D8               	btfss	status,2,c
  3913  003300  EF84  F019         	goto	u1651
  3914  003304  EF86  F019         	goto	u1650
  3915  003308                     u1651:
  3916  003308  EF78  F019         	goto	l2445
  3917  00330C                     u1650:
  3918  00330C  5003               	movf	strlen@a^0,w,c
  3919  00330E  5C01               	subwf	strlen@s^0,w,c
  3920  003310  6E01               	movwf	?_strlen^0,c
  3921  003312  5004               	movf	(strlen@a+1)^0,w,c
  3922  003314  5802               	subwfb	(strlen@s+1)^0,w,c
  3923  003316  6E02               	movwf	(?_strlen+1)^0,c
  3924  003318  0012               	return		;funcret
  3925  00331A                     __end_of_strlen:
  3926                           	callstack 0
  3927                           
  3928 ;; *************** function _fputs *****************
  3929 ;; Defined at:
  3930 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\nf_fputs.c"
  3931 ;; Parameters:    Size  Location     Type
  3932 ;;  s               2    9[COMRAM] PTR const unsigned char 
  3933 ;;		 -> dbuf(32), 
  3934 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  3935 ;;		 -> sprintf@f(6), 
  3936 ;; Auto vars:     Size  Location     Type
  3937 ;;  i               2   14[COMRAM] int 
  3938 ;;  c               1   13[COMRAM] unsigned char 
  3939 ;; Return value:  Size  Location     Type
  3940 ;;                  2    9[COMRAM] int 
  3941 ;; Registers used:
  3942 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3943 ;; Tracked objects:
  3944 ;;		On entry : 0/0
  3945 ;;		On exit  : 0/0
  3946 ;;		Unchanged: 0/0
  3947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3948 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3949 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3951 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3952 ;;Total ram usage:        7 bytes
  3953 ;; Hardware stack levels used:    1
  3954 ;; Hardware stack levels required when called:    3
  3955 ;; This function calls:
  3956 ;;		_fputc
  3957 ;; This function is called by:
  3958 ;;		_pad
  3959 ;; This function uses a non-reentrant model
  3960 ;;
  3961                           
  3962                           	psect	text16
  3963  00321E                     __ptext16:
  3964                           	callstack 0
  3965  00321E                     _fputs:
  3966                           	callstack 22
  3967  00321E  0E00               	movlw	0
  3968  003220  6E10               	movwf	(fputs@i+1)^0,c
  3969  003222  0E00               	movlw	0
  3970  003224  6E0F               	movwf	fputs@i^0,c
  3971  003226  EF20  F019         	goto	l2441
  3972  00322A                     l2437:
  3973  00322A  C00E  F001         	movff	fputs@c,fputc@c
  3974  00322E  6A02               	clrf	(fputc@c+1)^0,c
  3975  003230  C00C  F003         	movff	fputs@fp,fputc@fp
  3976  003234  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  3977  003238  EC30  F015         	call	_fputc	;wreg free
  3978  00323C  4A0F               	infsnz	fputs@i^0,f,c
  3979  00323E  2A10               	incf	(fputs@i+1)^0,f,c
  3980  003240                     l2441:
  3981  003240  500F               	movf	fputs@i^0,w,c
  3982  003242  240A               	addwf	fputs@s^0,w,c
  3983  003244  6ED9               	movwf	fsr2l,c
  3984  003246  5010               	movf	(fputs@i+1)^0,w,c
  3985  003248  200B               	addwfc	(fputs@s+1)^0,w,c
  3986  00324A  6EDA               	movwf	fsr2h,c
  3987  00324C  50DF               	movf	indf2,w,c
  3988  00324E  6E0E               	movwf	fputs@c^0,c
  3989  003250  500E               	movf	fputs@c^0,w,c
  3990  003252  A4D8               	btfss	status,2,c
  3991  003254  EF2E  F019         	goto	u1641
  3992  003258  EF30  F019         	goto	u1640
  3993  00325C                     u1641:
  3994  00325C  EF15  F019         	goto	l2437
  3995  003260                     u1640:
  3996  003260  0012               	return		;funcret
  3997  003262                     __end_of_fputs:
  3998                           	callstack 0
  3999                           
  4000 ;; *************** function _fputc *****************
  4001 ;; Defined at:
  4002 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\nf_fputc.c"
  4003 ;; Parameters:    Size  Location     Type
  4004 ;;  c               2    0[COMRAM] int 
  4005 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  4006 ;;		 -> sprintf@f(6), 
  4007 ;; Auto vars:     Size  Location     Type
  4008 ;;		None
  4009 ;; Return value:  Size  Location     Type
  4010 ;;                  2    0[COMRAM] int 
  4011 ;; Registers used:
  4012 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4013 ;; Tracked objects:
  4014 ;;		On entry : 0/0
  4015 ;;		On exit  : 0/0
  4016 ;;		Unchanged: 0/0
  4017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4018 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4020 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4021 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4022 ;;Total ram usage:        9 bytes
  4023 ;; Hardware stack levels used:    1
  4024 ;; Hardware stack levels required when called:    2
  4025 ;; This function calls:
  4026 ;;		_putch
  4027 ;; This function is called by:
  4028 ;;		_pad
  4029 ;;		_vfpfcnvrt
  4030 ;;		_fputs
  4031 ;; This function uses a non-reentrant model
  4032 ;;
  4033                           
  4034                           	psect	text17
  4035  002A60                     __ptext17:
  4036                           	callstack 0
  4037  002A60                     _fputc:
  4038                           	callstack 25
  4039  002A60  5003               	movf	fputc@fp^0,w,c
  4040  002A62  1004               	iorwf	(fputc@fp+1)^0,w,c
  4041  002A64  B4D8               	btfsc	status,2,c
  4042  002A66  EF37  F015         	goto	u1581
  4043  002A6A  EF39  F015         	goto	u1580
  4044  002A6E                     u1581:
  4045  002A6E  EF42  F015         	goto	l2421
  4046  002A72                     u1580:
  4047  002A72  5003               	movf	fputc@fp^0,w,c
  4048  002A74  1004               	iorwf	(fputc@fp+1)^0,w,c
  4049  002A76  A4D8               	btfss	status,2,c
  4050  002A78  EF40  F015         	goto	u1591
  4051  002A7C  EF42  F015         	goto	u1590
  4052  002A80                     u1591:
  4053  002A80  EF47  F015         	goto	l2423
  4054  002A84                     u1590:
  4055  002A84                     l2421:
  4056  002A84  5001               	movf	fputc@c^0,w,c
  4057  002A86  EC39  F01B         	call	_putch
  4058  002A8A  EF94  F015         	goto	l1298
  4059  002A8E                     l2423:
  4060  002A8E  EE20 F004          	lfsr	2,4
  4061  002A92  5003               	movf	fputc@fp^0,w,c
  4062  002A94  26D9               	addwf	fsr2l,f,c
  4063  002A96  5004               	movf	(fputc@fp+1)^0,w,c
  4064  002A98  22DA               	addwfc	fsr2h,f,c
  4065  002A9A  50DE               	movf	postinc2,w,c
  4066  002A9C  10DE               	iorwf	postinc2,w,c
  4067  002A9E  B4D8               	btfsc	status,2,c
  4068  002AA0  EF54  F015         	goto	u1601
  4069  002AA4  EF56  F015         	goto	u1600
  4070  002AA8                     u1601:
  4071  002AA8  EF71  F015         	goto	l2427
  4072  002AAC                     u1600:
  4073  002AAC  EE20 F004          	lfsr	2,4
  4074  002AB0  5003               	movf	fputc@fp^0,w,c
  4075  002AB2  26D9               	addwf	fsr2l,f,c
  4076  002AB4  5004               	movf	(fputc@fp+1)^0,w,c
  4077  002AB6  22DA               	addwfc	fsr2h,f,c
  4078  002AB8  EE10 F002          	lfsr	1,2
  4079  002ABC  5003               	movf	fputc@fp^0,w,c
  4080  002ABE  26E1               	addwf	fsr1l,f,c
  4081  002AC0  5004               	movf	(fputc@fp+1)^0,w,c
  4082  002AC2  22E2               	addwfc	fsr1h,f,c
  4083  002AC4  50DE               	movf	postinc2,w,c
  4084  002AC6  5CE6               	subwf	postinc1,w,c
  4085  002AC8  50E6               	movf	postinc1,w,c
  4086  002ACA  0A80               	xorlw	128
  4087  002ACC  6E09               	movwf	(??_fputc+4)^0,c
  4088  002ACE  50DE               	movf	postinc2,w,c
  4089  002AD0  0A80               	xorlw	128
  4090  002AD2  5809               	subwfb	(??_fputc+4)^0,w,c
  4091  002AD4  B0D8               	btfsc	status,0,c
  4092  002AD6  EF6F  F015         	goto	u1611
  4093  002ADA  EF71  F015         	goto	u1610
  4094  002ADE                     u1611:
  4095  002ADE  EF94  F015         	goto	l1298
  4096  002AE2                     u1610:
  4097  002AE2                     l2427:
  4098  002AE2  EE20 F002          	lfsr	2,2
  4099  002AE6  5003               	movf	fputc@fp^0,w,c
  4100  002AE8  26D9               	addwf	fsr2l,f,c
  4101  002AEA  5004               	movf	(fputc@fp+1)^0,w,c
  4102  002AEC  22DA               	addwfc	fsr2h,f,c
  4103  002AEE  CFDE F005          	movff	postinc2,??_fputc
  4104  002AF2  CFDD F006          	movff	postdec2,??_fputc+1
  4105  002AF6  C003  FFD9         	movff	fputc@fp,fsr2l
  4106  002AFA  C004  FFDA         	movff	fputc@fp+1,fsr2h
  4107  002AFE  CFDE F007          	movff	postinc2,??_fputc+2
  4108  002B02  CFDD F008          	movff	postdec2,??_fputc+3
  4109  002B06  5005               	movf	??_fputc^0,w,c
  4110  002B08  2407               	addwf	(??_fputc+2)^0,w,c
  4111  002B0A  6ED9               	movwf	fsr2l,c
  4112  002B0C  5006               	movf	(??_fputc+1)^0,w,c
  4113  002B0E  2008               	addwfc	(??_fputc+3)^0,w,c
  4114  002B10  6EDA               	movwf	fsr2h,c
  4115  002B12  C001  FFDF         	movff	fputc@c,indf2
  4116  002B16  EE20 F002          	lfsr	2,2
  4117  002B1A  5003               	movf	fputc@fp^0,w,c
  4118  002B1C  26D9               	addwf	fsr2l,f,c
  4119  002B1E  5004               	movf	(fputc@fp+1)^0,w,c
  4120  002B20  22DA               	addwfc	fsr2h,f,c
  4121  002B22  2ADE               	incf	postinc2,f,c
  4122  002B24  0E00               	movlw	0
  4123  002B26  22DD               	addwfc	postdec2,f,c
  4124  002B28                     l1298:
  4125  002B28  0012               	return		;funcret
  4126  002B2A                     __end_of_fputc:
  4127                           	callstack 0
  4128                           
  4129 ;; *************** function _putch *****************
  4130 ;; Defined at:
  4131 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\putch.c"
  4132 ;; Parameters:    Size  Location     Type
  4133 ;;  c               1    wreg     unsigned char 
  4134 ;; Auto vars:     Size  Location     Type
  4135 ;;  c               1    0[COMRAM] unsigned char 
  4136 ;; Return value:  Size  Location     Type
  4137 ;;                  1    wreg      void 
  4138 ;; Registers used:
  4139 ;;		wreg
  4140 ;; Tracked objects:
  4141 ;;		On entry : 0/0
  4142 ;;		On exit  : 0/0
  4143 ;;		Unchanged: 0/0
  4144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4148 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4149 ;;Total ram usage:        0 bytes
  4150 ;; Hardware stack levels used:    1
  4151 ;; Hardware stack levels required when called:    1
  4152 ;; This function calls:
  4153 ;;		Nothing
  4154 ;; This function is called by:
  4155 ;;		_fputc
  4156 ;; This function uses a non-reentrant model
  4157 ;;
  4158                           
  4159                           	psect	text18
  4160  003672                     __ptext18:
  4161                           	callstack 0
  4162  003672                     _putch:
  4163                           	callstack 25
  4164  003672  0012               	return		;funcret
  4165  003674                     __end_of_putch:
  4166                           	callstack 0
  4167                           
  4168 ;; *************** function _abs *****************
  4169 ;; Defined at:
  4170 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\abs.c"
  4171 ;; Parameters:    Size  Location     Type
  4172 ;;  a               2   18[COMRAM] int 
  4173 ;; Auto vars:     Size  Location     Type
  4174 ;;		None
  4175 ;; Return value:  Size  Location     Type
  4176 ;;                  2   18[COMRAM] int 
  4177 ;; Registers used:
  4178 ;;		wreg, status,2, status,0
  4179 ;; Tracked objects:
  4180 ;;		On entry : 0/0
  4181 ;;		On exit  : 0/0
  4182 ;;		Unchanged: 0/0
  4183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4184 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4186 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4187 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4188 ;;Total ram usage:        4 bytes
  4189 ;; Hardware stack levels used:    1
  4190 ;; Hardware stack levels required when called:    1
  4191 ;; This function calls:
  4192 ;;		Nothing
  4193 ;; This function is called by:
  4194 ;;		_dtoa
  4195 ;; This function uses a non-reentrant model
  4196 ;;
  4197                           
  4198                           	psect	text19
  4199  0032A4                     __ptext19:
  4200                           	callstack 0
  4201  0032A4                     _abs:
  4202                           	callstack 25
  4203  0032A4  BE14               	btfsc	(abs@a+1)^0,7,c
  4204  0032A6  EF5F  F019         	goto	u1850
  4205  0032AA  5014               	movf	(abs@a+1)^0,w,c
  4206  0032AC  E106               	bnz	u1851
  4207  0032AE  0413               	decf	abs@a^0,w,c
  4208  0032B0  B0D8               	btfsc	status,0,c
  4209  0032B2  EF5D  F019         	goto	u1851
  4210  0032B6  EF5F  F019         	goto	u1850
  4211  0032BA                     u1851:
  4212  0032BA  EF6D  F019         	goto	l1283
  4213  0032BE                     u1850:
  4214  0032BE  C013  F015         	movff	abs@a,??_abs
  4215  0032C2  C014  F016         	movff	abs@a+1,??_abs+1
  4216  0032C6  1E15               	comf	??_abs^0,f,c
  4217  0032C8  1E16               	comf	(??_abs+1)^0,f,c
  4218  0032CA  4A15               	infsnz	??_abs^0,f,c
  4219  0032CC  2A16               	incf	(??_abs+1)^0,f,c
  4220  0032CE  C015  F013         	movff	??_abs,?_abs
  4221  0032D2  C016  F014         	movff	??_abs+1,?_abs+1
  4222  0032D6  EF71  F019         	goto	l1286
  4223  0032DA                     l1283:
  4224  0032DA  C013  F013         	movff	abs@a,?_abs
  4225  0032DE  C014  F014         	movff	abs@a+1,?_abs+1
  4226  0032E2                     l1286:
  4227  0032E2  0012               	return		;funcret
  4228  0032E4                     __end_of_abs:
  4229                           	callstack 0
  4230                           
  4231 ;; *************** function ___aomod *****************
  4232 ;; Defined at:
  4233 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\aomod.c"
  4234 ;; Parameters:    Size  Location     Type
  4235 ;;  dividend        8    0[COMRAM] long long 
  4236 ;;  divisor         8    8[COMRAM] long long 
  4237 ;; Auto vars:     Size  Location     Type
  4238 ;;  sign            1   17[COMRAM] unsigned char 
  4239 ;;  counter         1   16[COMRAM] unsigned char 
  4240 ;; Return value:  Size  Location     Type
  4241 ;;                  8    0[COMRAM] long long 
  4242 ;; Registers used:
  4243 ;;		wreg, status,2, status,0
  4244 ;; Tracked objects:
  4245 ;;		On entry : 0/0
  4246 ;;		On exit  : 0/0
  4247 ;;		Unchanged: 0/0
  4248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4249 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4250 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4252 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4253 ;;Total ram usage:       18 bytes
  4254 ;; Hardware stack levels used:    1
  4255 ;; Hardware stack levels required when called:    1
  4256 ;; This function calls:
  4257 ;;		Nothing
  4258 ;; This function is called by:
  4259 ;;		_dtoa
  4260 ;; This function uses a non-reentrant model
  4261 ;;
  4262                           
  4263                           	psect	text20
  4264  0025AC                     __ptext20:
  4265                           	callstack 0
  4266  0025AC                     ___aomod:
  4267                           	callstack 25
  4268  0025AC  0E00               	movlw	0
  4269  0025AE  6E12               	movwf	___aomod@sign^0,c
  4270  0025B0  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  4271  0025B2  EFDF  F012         	goto	u1750
  4272  0025B6  EFDD  F012         	goto	u1751
  4273  0025BA                     u1751:
  4274  0025BA  EFF1  F012         	goto	l2535
  4275  0025BE                     u1750:
  4276  0025BE  1E08               	comf	(___aomod@dividend+7)^0,f,c
  4277  0025C0  1E07               	comf	(___aomod@dividend+6)^0,f,c
  4278  0025C2  1E06               	comf	(___aomod@dividend+5)^0,f,c
  4279  0025C4  1E05               	comf	(___aomod@dividend+4)^0,f,c
  4280  0025C6  1E04               	comf	(___aomod@dividend+3)^0,f,c
  4281  0025C8  1E03               	comf	(___aomod@dividend+2)^0,f,c
  4282  0025CA  1E02               	comf	(___aomod@dividend+1)^0,f,c
  4283  0025CC  6C01               	negf	___aomod@dividend^0,c
  4284  0025CE  0E00               	movlw	0
  4285  0025D0  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  4286  0025D2  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  4287  0025D4  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  4288  0025D6  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  4289  0025D8  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  4290  0025DA  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  4291  0025DC  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  4292  0025DE  0E01               	movlw	1
  4293  0025E0  6E12               	movwf	___aomod@sign^0,c
  4294  0025E2                     l2535:
  4295  0025E2  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  4296  0025E4  EFF8  F012         	goto	u1760
  4297  0025E8  EFF6  F012         	goto	u1761
  4298  0025EC                     u1761:
  4299  0025EC  EF08  F013         	goto	l2539
  4300  0025F0                     u1760:
  4301  0025F0  1E10               	comf	(___aomod@divisor+7)^0,f,c
  4302  0025F2  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  4303  0025F4  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  4304  0025F6  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  4305  0025F8  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  4306  0025FA  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  4307  0025FC  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  4308  0025FE  6C09               	negf	___aomod@divisor^0,c
  4309  002600  0E00               	movlw	0
  4310  002602  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  4311  002604  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  4312  002606  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  4313  002608  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  4314  00260A  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  4315  00260C  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  4316  00260E  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  4317  002610                     l2539:
  4318  002610  5009               	movf	___aomod@divisor^0,w,c
  4319  002612  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  4320  002614  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  4321  002616  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  4322  002618  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  4323  00261A  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  4324  00261C  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  4325  00261E  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  4326  002620  B4D8               	btfsc	status,2,c
  4327  002622  EF15  F013         	goto	u1771
  4328  002626  EF17  F013         	goto	u1770
  4329  00262A                     u1771:
  4330  00262A  EF5F  F013         	goto	l2555
  4331  00262E                     u1770:
  4332  00262E  0E01               	movlw	1
  4333  002630  6E11               	movwf	___aomod@counter^0,c
  4334  002632  EF25  F013         	goto	l2545
  4335  002636                     l2543:
  4336  002636  90D8               	bcf	status,0,c
  4337  002638  3609               	rlcf	___aomod@divisor^0,f,c
  4338  00263A  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  4339  00263C  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  4340  00263E  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  4341  002640  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  4342  002642  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  4343  002644  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  4344  002646  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  4345  002648  2A11               	incf	___aomod@counter^0,f,c
  4346  00264A                     l2545:
  4347  00264A  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  4348  00264C  EF2A  F013         	goto	u1781
  4349  002650  EF2C  F013         	goto	u1780
  4350  002654                     u1781:
  4351  002654  EF1B  F013         	goto	l2543
  4352  002658                     u1780:
  4353  002658                     l2547:
  4354  002658  5009               	movf	___aomod@divisor^0,w,c
  4355  00265A  5C01               	subwf	___aomod@dividend^0,w,c
  4356  00265C  500A               	movf	(___aomod@divisor+1)^0,w,c
  4357  00265E  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  4358  002660  500B               	movf	(___aomod@divisor+2)^0,w,c
  4359  002662  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  4360  002664  500C               	movf	(___aomod@divisor+3)^0,w,c
  4361  002666  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  4362  002668  500D               	movf	(___aomod@divisor+4)^0,w,c
  4363  00266A  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  4364  00266C  500E               	movf	(___aomod@divisor+5)^0,w,c
  4365  00266E  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  4366  002670  500F               	movf	(___aomod@divisor+6)^0,w,c
  4367  002672  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  4368  002674  5010               	movf	(___aomod@divisor+7)^0,w,c
  4369  002676  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  4370  002678  A0D8               	btfss	status,0,c
  4371  00267A  EF41  F013         	goto	u1791
  4372  00267E  EF43  F013         	goto	u1790
  4373  002682                     u1791:
  4374  002682  EF53  F013         	goto	l2551
  4375  002686                     u1790:
  4376  002686  5009               	movf	___aomod@divisor^0,w,c
  4377  002688  5E01               	subwf	___aomod@dividend^0,f,c
  4378  00268A  500A               	movf	(___aomod@divisor+1)^0,w,c
  4379  00268C  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  4380  00268E  500B               	movf	(___aomod@divisor+2)^0,w,c
  4381  002690  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  4382  002692  500C               	movf	(___aomod@divisor+3)^0,w,c
  4383  002694  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  4384  002696  500D               	movf	(___aomod@divisor+4)^0,w,c
  4385  002698  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  4386  00269A  500E               	movf	(___aomod@divisor+5)^0,w,c
  4387  00269C  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  4388  00269E  500F               	movf	(___aomod@divisor+6)^0,w,c
  4389  0026A0  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  4390  0026A2  5010               	movf	(___aomod@divisor+7)^0,w,c
  4391  0026A4  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  4392  0026A6                     l2551:
  4393  0026A6  90D8               	bcf	status,0,c
  4394  0026A8  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  4395  0026AA  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  4396  0026AC  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  4397  0026AE  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  4398  0026B0  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  4399  0026B2  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  4400  0026B4  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  4401  0026B6  3209               	rrcf	___aomod@divisor^0,f,c
  4402  0026B8  2E11               	decfsz	___aomod@counter^0,f,c
  4403  0026BA  EF2C  F013         	goto	l2547
  4404  0026BE                     l2555:
  4405  0026BE  5012               	movf	___aomod@sign^0,w,c
  4406  0026C0  B4D8               	btfsc	status,2,c
  4407  0026C2  EF65  F013         	goto	u1801
  4408  0026C6  EF67  F013         	goto	u1800
  4409  0026CA                     u1801:
  4410  0026CA  EF77  F013         	goto	l2559
  4411  0026CE                     u1800:
  4412  0026CE  1E08               	comf	(___aomod@dividend+7)^0,f,c
  4413  0026D0  1E07               	comf	(___aomod@dividend+6)^0,f,c
  4414  0026D2  1E06               	comf	(___aomod@dividend+5)^0,f,c
  4415  0026D4  1E05               	comf	(___aomod@dividend+4)^0,f,c
  4416  0026D6  1E04               	comf	(___aomod@dividend+3)^0,f,c
  4417  0026D8  1E03               	comf	(___aomod@dividend+2)^0,f,c
  4418  0026DA  1E02               	comf	(___aomod@dividend+1)^0,f,c
  4419  0026DC  6C01               	negf	___aomod@dividend^0,c
  4420  0026DE  0E00               	movlw	0
  4421  0026E0  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  4422  0026E2  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  4423  0026E4  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  4424  0026E6  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  4425  0026E8  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  4426  0026EA  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  4427  0026EC  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  4428  0026EE                     l2559:
  4429  0026EE  C001  F001         	movff	___aomod@dividend,?___aomod
  4430  0026F2  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  4431  0026F6  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  4432  0026FA  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  4433  0026FE  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  4434  002702  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  4435  002706  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  4436  00270A  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  4437  00270E  0012               	return		;funcret
  4438  002710                     __end_of___aomod:
  4439                           	callstack 0
  4440                           
  4441 ;; *************** function ___aodiv *****************
  4442 ;; Defined at:
  4443 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\aodiv.c"
  4444 ;; Parameters:    Size  Location     Type
  4445 ;;  dividend        8    0[COMRAM] long long 
  4446 ;;  divisor         8    8[COMRAM] long long 
  4447 ;; Auto vars:     Size  Location     Type
  4448 ;;  quotient        8   18[COMRAM] long long 
  4449 ;;  sign            1   17[COMRAM] unsigned char 
  4450 ;;  counter         1   16[COMRAM] unsigned char 
  4451 ;; Return value:  Size  Location     Type
  4452 ;;                  8    0[COMRAM] long long 
  4453 ;; Registers used:
  4454 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4455 ;; Tracked objects:
  4456 ;;		On entry : 0/0
  4457 ;;		On exit  : 0/0
  4458 ;;		Unchanged: 0/0
  4459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4460 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4461 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4463 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4464 ;;Total ram usage:       26 bytes
  4465 ;; Hardware stack levels used:    1
  4466 ;; Hardware stack levels required when called:    1
  4467 ;; This function calls:
  4468 ;;		Nothing
  4469 ;; This function is called by:
  4470 ;;		_dtoa
  4471 ;; This function uses a non-reentrant model
  4472 ;;
  4473                           
  4474                           	psect	text21
  4475  00229E                     __ptext21:
  4476                           	callstack 0
  4477  00229E                     ___aodiv:
  4478                           	callstack 25
  4479  00229E  0E00               	movlw	0
  4480  0022A0  6E12               	movwf	___aodiv@sign^0,c
  4481  0022A2  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  4482  0022A4  EF58  F011         	goto	u1680
  4483  0022A8  EF56  F011         	goto	u1681
  4484  0022AC                     u1681:
  4485  0022AC  EF6A  F011         	goto	l2491
  4486  0022B0                     u1680:
  4487  0022B0  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  4488  0022B2  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  4489  0022B4  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  4490  0022B6  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  4491  0022B8  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  4492  0022BA  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  4493  0022BC  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  4494  0022BE  6C09               	negf	___aodiv@divisor^0,c
  4495  0022C0  0E00               	movlw	0
  4496  0022C2  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  4497  0022C4  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  4498  0022C6  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  4499  0022C8  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  4500  0022CA  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  4501  0022CC  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  4502  0022CE  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  4503  0022D0  0E01               	movlw	1
  4504  0022D2  6E12               	movwf	___aodiv@sign^0,c
  4505  0022D4                     l2491:
  4506  0022D4  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  4507  0022D6  EF71  F011         	goto	u1690
  4508  0022DA  EF6F  F011         	goto	u1691
  4509  0022DE                     u1691:
  4510  0022DE  EF83  F011         	goto	l2497
  4511  0022E2                     u1690:
  4512  0022E2  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  4513  0022E4  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  4514  0022E6  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  4515  0022E8  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  4516  0022EA  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  4517  0022EC  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  4518  0022EE  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  4519  0022F0  6C01               	negf	___aodiv@dividend^0,c
  4520  0022F2  0E00               	movlw	0
  4521  0022F4  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  4522  0022F6  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  4523  0022F8  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  4524  0022FA  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  4525  0022FC  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  4526  0022FE  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  4527  002300  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  4528  002302  0E01               	movlw	1
  4529  002304  1A12               	xorwf	___aodiv@sign^0,f,c
  4530  002306                     l2497:
  4531  002306  EE20  F013         	lfsr	2,___aodiv@quotient
  4532  00230A  0E07               	movlw	7
  4533  00230C                     u1701:
  4534  00230C  6ADE               	clrf	postinc2,c
  4535  00230E  06E8               	decf	wreg,f,c
  4536  002310  E2FD               	bc	u1701
  4537  002312  5009               	movf	___aodiv@divisor^0,w,c
  4538  002314  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  4539  002316  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  4540  002318  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  4541  00231A  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  4542  00231C  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  4543  00231E  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  4544  002320  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  4545  002322  B4D8               	btfsc	status,2,c
  4546  002324  EF96  F011         	goto	u1711
  4547  002328  EF98  F011         	goto	u1710
  4548  00232C                     u1711:
  4549  00232C  EFEA  F011         	goto	l2519
  4550  002330                     u1710:
  4551  002330  0E01               	movlw	1
  4552  002332  6E11               	movwf	___aodiv@counter^0,c
  4553  002334  EFA6  F011         	goto	l2505
  4554  002338                     l2503:
  4555  002338  90D8               	bcf	status,0,c
  4556  00233A  3609               	rlcf	___aodiv@divisor^0,f,c
  4557  00233C  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  4558  00233E  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  4559  002340  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  4560  002342  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  4561  002344  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  4562  002346  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  4563  002348  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  4564  00234A  2A11               	incf	___aodiv@counter^0,f,c
  4565  00234C                     l2505:
  4566  00234C  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  4567  00234E  EFAB  F011         	goto	u1721
  4568  002352  EFAD  F011         	goto	u1720
  4569  002356                     u1721:
  4570  002356  EF9C  F011         	goto	l2503
  4571  00235A                     u1720:
  4572  00235A                     l2507:
  4573  00235A  90D8               	bcf	status,0,c
  4574  00235C  3613               	rlcf	___aodiv@quotient^0,f,c
  4575  00235E  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  4576  002360  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  4577  002362  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  4578  002364  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  4579  002366  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  4580  002368  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  4581  00236A  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  4582  00236C  5009               	movf	___aodiv@divisor^0,w,c
  4583  00236E  5C01               	subwf	___aodiv@dividend^0,w,c
  4584  002370  500A               	movf	(___aodiv@divisor+1)^0,w,c
  4585  002372  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  4586  002374  500B               	movf	(___aodiv@divisor+2)^0,w,c
  4587  002376  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  4588  002378  500C               	movf	(___aodiv@divisor+3)^0,w,c
  4589  00237A  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  4590  00237C  500D               	movf	(___aodiv@divisor+4)^0,w,c
  4591  00237E  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  4592  002380  500E               	movf	(___aodiv@divisor+5)^0,w,c
  4593  002382  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  4594  002384  500F               	movf	(___aodiv@divisor+6)^0,w,c
  4595  002386  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  4596  002388  5010               	movf	(___aodiv@divisor+7)^0,w,c
  4597  00238A  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  4598  00238C  A0D8               	btfss	status,0,c
  4599  00238E  EFCB  F011         	goto	u1731
  4600  002392  EFCD  F011         	goto	u1730
  4601  002396                     u1731:
  4602  002396  EFDE  F011         	goto	l2515
  4603  00239A                     u1730:
  4604  00239A  5009               	movf	___aodiv@divisor^0,w,c
  4605  00239C  5E01               	subwf	___aodiv@dividend^0,f,c
  4606  00239E  500A               	movf	(___aodiv@divisor+1)^0,w,c
  4607  0023A0  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  4608  0023A2  500B               	movf	(___aodiv@divisor+2)^0,w,c
  4609  0023A4  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  4610  0023A6  500C               	movf	(___aodiv@divisor+3)^0,w,c
  4611  0023A8  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  4612  0023AA  500D               	movf	(___aodiv@divisor+4)^0,w,c
  4613  0023AC  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  4614  0023AE  500E               	movf	(___aodiv@divisor+5)^0,w,c
  4615  0023B0  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  4616  0023B2  500F               	movf	(___aodiv@divisor+6)^0,w,c
  4617  0023B4  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  4618  0023B6  5010               	movf	(___aodiv@divisor+7)^0,w,c
  4619  0023B8  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  4620  0023BA  8013               	bsf	___aodiv@quotient^0,0,c
  4621  0023BC                     l2515:
  4622  0023BC  90D8               	bcf	status,0,c
  4623  0023BE  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  4624  0023C0  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  4625  0023C2  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  4626  0023C4  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  4627  0023C6  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  4628  0023C8  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  4629  0023CA  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  4630  0023CC  3209               	rrcf	___aodiv@divisor^0,f,c
  4631  0023CE  2E11               	decfsz	___aodiv@counter^0,f,c
  4632  0023D0  EFAD  F011         	goto	l2507
  4633  0023D4                     l2519:
  4634  0023D4  5012               	movf	___aodiv@sign^0,w,c
  4635  0023D6  B4D8               	btfsc	status,2,c
  4636  0023D8  EFF0  F011         	goto	u1741
  4637  0023DC  EFF2  F011         	goto	u1740
  4638  0023E0                     u1741:
  4639  0023E0  EF02  F012         	goto	l2523
  4640  0023E4                     u1740:
  4641  0023E4  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  4642  0023E6  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  4643  0023E8  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  4644  0023EA  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  4645  0023EC  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  4646  0023EE  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  4647  0023F0  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  4648  0023F2  6C13               	negf	___aodiv@quotient^0,c
  4649  0023F4  0E00               	movlw	0
  4650  0023F6  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  4651  0023F8  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  4652  0023FA  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  4653  0023FC  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  4654  0023FE  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  4655  002400  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  4656  002402  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  4657  002404                     l2523:
  4658  002404  C013  F001         	movff	___aodiv@quotient,?___aodiv
  4659  002408  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  4660  00240C  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  4661  002410  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  4662  002414  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  4663  002418  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  4664  00241C  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  4665  002420  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  4666  002424  0012               	return		;funcret
  4667  002426                     __end_of___aodiv:
  4668                           	callstack 0
  4669                           
  4670 ;; *************** function _setTurnDelay *****************
  4671 ;; Defined at:
  4672 ;;		line 93 in file "dc_motor.c"
  4673 ;; Parameters:    Size  Location     Type
  4674 ;;  tL              2   10[COMRAM] PTR struct turnDelay
  4675 ;;		 -> main@turnL(11), 
  4676 ;;  tR              2   12[COMRAM] PTR struct turnDelay
  4677 ;;		 -> main@turnR(11), 
  4678 ;;  battery         2   14[COMRAM] unsigned int 
  4679 ;; Auto vars:     Size  Location     Type
  4680 ;;		None
  4681 ;; Return value:  Size  Location     Type
  4682 ;;                  1    wreg      void 
  4683 ;; Registers used:
  4684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4685 ;; Tracked objects:
  4686 ;;		On entry : 0/0
  4687 ;;		On exit  : 0/0
  4688 ;;		Unchanged: 0/0
  4689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4690 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4692 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4693 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4694 ;;Total ram usage:       10 bytes
  4695 ;; Hardware stack levels used:    1
  4696 ;; Hardware stack levels required when called:    2
  4697 ;; This function calls:
  4698 ;;		___wmul
  4699 ;; This function is called by:
  4700 ;;		_main
  4701 ;; This function uses a non-reentrant model
  4702 ;;
  4703                           
  4704                           	psect	text22
  4705  001A70                     __ptext22:
  4706                           	callstack 0
  4707  001A70                     _setTurnDelay:
  4708                           	callstack 28
  4709  001A70                     
  4710                           ;dc_motor.c: 95:     if (battery==100){
  4711  001A70  0E64               	movlw	100
  4712  001A72  180F               	xorwf	setTurnDelay@battery^0,w,c
  4713  001A74  1010               	iorwf	(setTurnDelay@battery+1)^0,w,c
  4714  001A76  A4D8               	btfss	status,2,c
  4715  001A78  EF40  F00D         	goto	u2631
  4716  001A7C  EF42  F00D         	goto	u2630
  4717  001A80                     u2631:
  4718  001A80  EF9A  F00D         	goto	l3043
  4719  001A84                     u2630:
  4720  001A84                     
  4721                           ;dc_motor.c: 96:         tL->thirty =0;
  4722  001A84  C00B  FFD9         	movff	setTurnDelay@tL,fsr2l
  4723  001A88  C00C  FFDA         	movff	setTurnDelay@tL+1,fsr2h
  4724  001A8C  0E00               	movlw	0
  4725  001A8E  6EDE               	movwf	postinc2,c
  4726  001A90  0E00               	movlw	0
  4727  001A92  6EDD               	movwf	postdec2,c
  4728  001A94                     
  4729                           ;dc_motor.c: 97:         tL->sixty = 15;
  4730  001A94  EE20 F002          	lfsr	2,2
  4731  001A98  500B               	movf	setTurnDelay@tL^0,w,c
  4732  001A9A  26D9               	addwf	fsr2l,f,c
  4733  001A9C  500C               	movf	(setTurnDelay@tL+1)^0,w,c
  4734  001A9E  22DA               	addwfc	fsr2h,f,c
  4735  001AA0  0E0F               	movlw	15
  4736  001AA2  6EDE               	movwf	postinc2,c
  4737  001AA4  0E00               	movlw	0
  4738  001AA6  6EDD               	movwf	postdec2,c
  4739  001AA8                     
  4740                           ;dc_motor.c: 98:         tL->ninety = 80;
  4741  001AA8  EE20 F004          	lfsr	2,4
  4742  001AAC  500B               	movf	setTurnDelay@tL^0,w,c
  4743  001AAE  26D9               	addwf	fsr2l,f,c
  4744  001AB0  500C               	movf	(setTurnDelay@tL+1)^0,w,c
  4745  001AB2  22DA               	addwfc	fsr2h,f,c
  4746  001AB4  0E50               	movlw	80
  4747  001AB6  6EDE               	movwf	postinc2,c
  4748  001AB8  0E00               	movlw	0
  4749  001ABA  6EDD               	movwf	postdec2,c
  4750  001ABC                     
  4751                           ;dc_motor.c: 99:         tL->oneThirtyFive = 255;
  4752  001ABC  EE20 F006          	lfsr	2,6
  4753  001AC0  500B               	movf	setTurnDelay@tL^0,w,c
  4754  001AC2  26D9               	addwf	fsr2l,f,c
  4755  001AC4  500C               	movf	(setTurnDelay@tL+1)^0,w,c
  4756  001AC6  22DA               	addwfc	fsr2h,f,c
  4757  001AC8  0EFF               	movlw	255
  4758  001ACA  6EDE               	movwf	postinc2,c
  4759  001ACC  0E00               	movlw	0
  4760  001ACE  6EDD               	movwf	postdec2,c
  4761  001AD0                     
  4762                           ;dc_motor.c: 100:         tL->oneEighty = 395;
  4763  001AD0  EE20 F008          	lfsr	2,8
  4764  001AD4  500B               	movf	setTurnDelay@tL^0,w,c
  4765  001AD6  26D9               	addwf	fsr2l,f,c
  4766  001AD8  500C               	movf	(setTurnDelay@tL+1)^0,w,c
  4767  001ADA  22DA               	addwfc	fsr2h,f,c
  4768  001ADC  0E8B               	movlw	139
  4769  001ADE  6EDE               	movwf	postinc2,c
  4770  001AE0  0E01               	movlw	1
  4771  001AE2  6EDD               	movwf	postdec2,c
  4772                           
  4773                           ;dc_motor.c: 102:         tR->thirty = 0;
  4774  001AE4  C00D  FFD9         	movff	setTurnDelay@tR,fsr2l
  4775  001AE8  C00E  FFDA         	movff	setTurnDelay@tR+1,fsr2h
  4776  001AEC  0E00               	movlw	0
  4777  001AEE  6EDE               	movwf	postinc2,c
  4778  001AF0  0E00               	movlw	0
  4779  001AF2  6EDD               	movwf	postdec2,c
  4780  001AF4                     
  4781                           ;dc_motor.c: 103:         tR->sixty = 5;
  4782  001AF4  EE20 F002          	lfsr	2,2
  4783  001AF8  500D               	movf	setTurnDelay@tR^0,w,c
  4784  001AFA  26D9               	addwf	fsr2l,f,c
  4785  001AFC  500E               	movf	(setTurnDelay@tR+1)^0,w,c
  4786  001AFE  22DA               	addwfc	fsr2h,f,c
  4787  001B00  0E05               	movlw	5
  4788  001B02  6EDE               	movwf	postinc2,c
  4789  001B04  0E00               	movlw	0
  4790  001B06  6EDD               	movwf	postdec2,c
  4791  001B08                     
  4792                           ;dc_motor.c: 104:         tR->ninety = 75;
  4793  001B08  EE20 F004          	lfsr	2,4
  4794  001B0C  500D               	movf	setTurnDelay@tR^0,w,c
  4795  001B0E  26D9               	addwf	fsr2l,f,c
  4796  001B10  500E               	movf	(setTurnDelay@tR+1)^0,w,c
  4797  001B12  22DA               	addwfc	fsr2h,f,c
  4798  001B14  0E4B               	movlw	75
  4799  001B16  6EDE               	movwf	postinc2,c
  4800  001B18  0E00               	movlw	0
  4801  001B1A  6EDD               	movwf	postdec2,c
  4802  001B1C                     
  4803                           ;dc_motor.c: 105:         tR->oneThirtyFive = 220;
  4804  001B1C  EE20 F006          	lfsr	2,6
  4805  001B20  500D               	movf	setTurnDelay@tR^0,w,c
  4806  001B22  26D9               	addwf	fsr2l,f,c
  4807  001B24  500E               	movf	(setTurnDelay@tR+1)^0,w,c
  4808  001B26  22DA               	addwfc	fsr2h,f,c
  4809  001B28  0EDC               	movlw	220
  4810  001B2A  6EDE               	movwf	postinc2,c
  4811  001B2C  0E00               	movlw	0
  4812  001B2E  6EDD               	movwf	postdec2,c
  4813                           
  4814                           ;dc_motor.c: 106:     }
  4815  001B30  EF7C  F00E         	goto	l198
  4816  001B34                     l3043:
  4817                           
  4818                           ;dc_motor.c: 111:         tL->thirty = (20-battery)/2;
  4819  001B34  0E14               	movlw	20
  4820  001B36  6E11               	movwf	??_setTurnDelay^0,c
  4821  001B38  0E00               	movlw	0
  4822  001B3A  6E12               	movwf	(??_setTurnDelay+1)^0,c
  4823  001B3C  500F               	movf	setTurnDelay@battery^0,w,c
  4824  001B3E  5E11               	subwf	??_setTurnDelay^0,f,c
  4825  001B40  5010               	movf	(setTurnDelay@battery+1)^0,w,c
  4826  001B42  5A12               	subwfb	(??_setTurnDelay+1)^0,f,c
  4827  001B44  90D8               	bcf	status,0,c
  4828  001B46  3012               	rrcf	(??_setTurnDelay+1)^0,w,c
  4829  001B48  6E14               	movwf	(??_setTurnDelay+3)^0,c
  4830  001B4A  3011               	rrcf	??_setTurnDelay^0,w,c
  4831  001B4C  6E13               	movwf	(??_setTurnDelay+2)^0,c
  4832  001B4E  C00B  FFD9         	movff	setTurnDelay@tL,fsr2l
  4833  001B52  C00C  FFDA         	movff	setTurnDelay@tL+1,fsr2h
  4834  001B56  C013  FFDE         	movff	??_setTurnDelay+2,postinc2
  4835  001B5A  C014  FFDD         	movff	??_setTurnDelay+3,postdec2
  4836  001B5E                     
  4837                           ;dc_motor.c: 112:         tL->sixty = 15 + 3*(20-battery);
  4838  001B5E  C00F  F005         	movff	setTurnDelay@battery,___wmul@multiplier
  4839  001B62  C010  F006         	movff	setTurnDelay@battery+1,___wmul@multiplier+1
  4840  001B66  0EFF               	movlw	255
  4841  001B68  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  4842  001B6A  0EFD               	movlw	253
  4843  001B6C  6E07               	movwf	___wmul@multiplicand^0,c
  4844  001B6E  EC10  F01A         	call	___wmul	;wreg free
  4845  001B72  0E4B               	movlw	75
  4846  001B74  2605               	addwf	?___wmul^0,f,c
  4847  001B76  0E00               	movlw	0
  4848  001B78  2206               	addwfc	(?___wmul+1)^0,f,c
  4849  001B7A  EE20 F002          	lfsr	2,2
  4850  001B7E  500B               	movf	setTurnDelay@tL^0,w,c
  4851  001B80  26D9               	addwf	fsr2l,f,c
  4852  001B82  500C               	movf	(setTurnDelay@tL+1)^0,w,c
  4853  001B84  22DA               	addwfc	fsr2h,f,c
  4854  001B86  C005  FFDE         	movff	?___wmul,postinc2
  4855  001B8A  C006  FFDD         	movff	?___wmul+1,postdec2
  4856  001B8E                     
  4857                           ;dc_motor.c: 113:         tL->ninety = 80 + (3*(20-battery));
  4858  001B8E  C00F  F005         	movff	setTurnDelay@battery,___wmul@multiplier
  4859  001B92  C010  F006         	movff	setTurnDelay@battery+1,___wmul@multiplier+1
  4860  001B96  0EFF               	movlw	255
  4861  001B98  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  4862  001B9A  0EFD               	movlw	253
  4863  001B9C  6E07               	movwf	___wmul@multiplicand^0,c
  4864  001B9E  EC10  F01A         	call	___wmul	;wreg free
  4865  001BA2  0E8C               	movlw	140
  4866  001BA4  2605               	addwf	?___wmul^0,f,c
  4867  001BA6  0E00               	movlw	0
  4868  001BA8  2206               	addwfc	(?___wmul+1)^0,f,c
  4869  001BAA  EE20 F004          	lfsr	2,4
  4870  001BAE  500B               	movf	setTurnDelay@tL^0,w,c
  4871  001BB0  26D9               	addwf	fsr2l,f,c
  4872  001BB2  500C               	movf	(setTurnDelay@tL+1)^0,w,c
  4873  001BB4  22DA               	addwfc	fsr2h,f,c
  4874  001BB6  C005  FFDE         	movff	?___wmul,postinc2
  4875  001BBA  C006  FFDD         	movff	?___wmul+1,postdec2
  4876  001BBE                     
  4877                           ;dc_motor.c: 114:         tL->oneThirtyFive = 255 + 3*(20-battery);
  4878  001BBE  0E3B               	movlw	59
  4879  001BC0  6E11               	movwf	??_setTurnDelay^0,c
  4880  001BC2  0E01               	movlw	1
  4881  001BC4  6E12               	movwf	(??_setTurnDelay+1)^0,c
  4882  001BC6  C00F  F005         	movff	setTurnDelay@battery,___wmul@multiplier
  4883  001BCA  C010  F006         	movff	setTurnDelay@battery+1,___wmul@multiplier+1
  4884  001BCE  0EFF               	movlw	255
  4885  001BD0  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  4886  001BD2  0EFD               	movlw	253
  4887  001BD4  6E07               	movwf	___wmul@multiplicand^0,c
  4888  001BD6  EC10  F01A         	call	___wmul	;wreg free
  4889  001BDA  5011               	movf	??_setTurnDelay^0,w,c
  4890  001BDC  2605               	addwf	?___wmul^0,f,c
  4891  001BDE  5012               	movf	(??_setTurnDelay+1)^0,w,c
  4892  001BE0  2206               	addwfc	(?___wmul+1)^0,f,c
  4893  001BE2  EE20 F006          	lfsr	2,6
  4894  001BE6  500B               	movf	setTurnDelay@tL^0,w,c
  4895  001BE8  26D9               	addwf	fsr2l,f,c
  4896  001BEA  500C               	movf	(setTurnDelay@tL+1)^0,w,c
  4897  001BEC  22DA               	addwfc	fsr2h,f,c
  4898  001BEE  C005  FFDE         	movff	?___wmul,postinc2
  4899  001BF2  C006  FFDD         	movff	?___wmul+1,postdec2
  4900  001BF6                     
  4901                           ;dc_motor.c: 115:         tL->oneEighty = 395 + 4*(20 - battery);
  4902  001BF6  0E8B               	movlw	139
  4903  001BF8  6E11               	movwf	??_setTurnDelay^0,c
  4904  001BFA  0E01               	movlw	1
  4905  001BFC  6E12               	movwf	(??_setTurnDelay+1)^0,c
  4906  001BFE  0E14               	movlw	20
  4907  001C00  6E13               	movwf	(??_setTurnDelay+2)^0,c
  4908  001C02  0E00               	movlw	0
  4909  001C04  6E14               	movwf	(??_setTurnDelay+3)^0,c
  4910  001C06  500F               	movf	setTurnDelay@battery^0,w,c
  4911  001C08  5E13               	subwf	(??_setTurnDelay+2)^0,f,c
  4912  001C0A  5010               	movf	(setTurnDelay@battery+1)^0,w,c
  4913  001C0C  5A14               	subwfb	(??_setTurnDelay+3)^0,f,c
  4914  001C0E  90D8               	bcf	status,0,c
  4915  001C10  3613               	rlcf	(??_setTurnDelay+2)^0,f,c
  4916  001C12  3614               	rlcf	(??_setTurnDelay+3)^0,f,c
  4917  001C14  90D8               	bcf	status,0,c
  4918  001C16  3613               	rlcf	(??_setTurnDelay+2)^0,f,c
  4919  001C18  3614               	rlcf	(??_setTurnDelay+3)^0,f,c
  4920  001C1A  5011               	movf	??_setTurnDelay^0,w,c
  4921  001C1C  2613               	addwf	(??_setTurnDelay+2)^0,f,c
  4922  001C1E  5012               	movf	(??_setTurnDelay+1)^0,w,c
  4923  001C20  2214               	addwfc	(??_setTurnDelay+3)^0,f,c
  4924  001C22  EE20 F008          	lfsr	2,8
  4925  001C26  500B               	movf	setTurnDelay@tL^0,w,c
  4926  001C28  26D9               	addwf	fsr2l,f,c
  4927  001C2A  500C               	movf	(setTurnDelay@tL+1)^0,w,c
  4928  001C2C  22DA               	addwfc	fsr2h,f,c
  4929  001C2E  C013  FFDE         	movff	??_setTurnDelay+2,postinc2
  4930  001C32  C014  FFDD         	movff	??_setTurnDelay+3,postdec2
  4931  001C36                     
  4932                           ;dc_motor.c: 117:         tR->thirty = (20-battery)/2;
  4933  001C36  0E14               	movlw	20
  4934  001C38  6E11               	movwf	??_setTurnDelay^0,c
  4935  001C3A  0E00               	movlw	0
  4936  001C3C  6E12               	movwf	(??_setTurnDelay+1)^0,c
  4937  001C3E  500F               	movf	setTurnDelay@battery^0,w,c
  4938  001C40  5E11               	subwf	??_setTurnDelay^0,f,c
  4939  001C42  5010               	movf	(setTurnDelay@battery+1)^0,w,c
  4940  001C44  5A12               	subwfb	(??_setTurnDelay+1)^0,f,c
  4941  001C46  90D8               	bcf	status,0,c
  4942  001C48  3012               	rrcf	(??_setTurnDelay+1)^0,w,c
  4943  001C4A  6E14               	movwf	(??_setTurnDelay+3)^0,c
  4944  001C4C  3011               	rrcf	??_setTurnDelay^0,w,c
  4945  001C4E  6E13               	movwf	(??_setTurnDelay+2)^0,c
  4946  001C50  C00D  FFD9         	movff	setTurnDelay@tR,fsr2l
  4947  001C54  C00E  FFDA         	movff	setTurnDelay@tR+1,fsr2h
  4948  001C58  C013  FFDE         	movff	??_setTurnDelay+2,postinc2
  4949  001C5C  C014  FFDD         	movff	??_setTurnDelay+3,postdec2
  4950  001C60                     
  4951                           ;dc_motor.c: 118:         tR->sixty = 5 + 3*(20 - battery);
  4952  001C60  C00F  F005         	movff	setTurnDelay@battery,___wmul@multiplier
  4953  001C64  C010  F006         	movff	setTurnDelay@battery+1,___wmul@multiplier+1
  4954  001C68  0EFF               	movlw	255
  4955  001C6A  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  4956  001C6C  0EFD               	movlw	253
  4957  001C6E  6E07               	movwf	___wmul@multiplicand^0,c
  4958  001C70  EC10  F01A         	call	___wmul	;wreg free
  4959  001C74  0E41               	movlw	65
  4960  001C76  2605               	addwf	?___wmul^0,f,c
  4961  001C78  0E00               	movlw	0
  4962  001C7A  2206               	addwfc	(?___wmul+1)^0,f,c
  4963  001C7C  EE20 F002          	lfsr	2,2
  4964  001C80  500D               	movf	setTurnDelay@tR^0,w,c
  4965  001C82  26D9               	addwf	fsr2l,f,c
  4966  001C84  500E               	movf	(setTurnDelay@tR+1)^0,w,c
  4967  001C86  22DA               	addwfc	fsr2h,f,c
  4968  001C88  C005  FFDE         	movff	?___wmul,postinc2
  4969  001C8C  C006  FFDD         	movff	?___wmul+1,postdec2
  4970  001C90                     
  4971                           ;dc_motor.c: 119:         tR->ninety = 75 + 3*(20-battery);
  4972  001C90  C00F  F005         	movff	setTurnDelay@battery,___wmul@multiplier
  4973  001C94  C010  F006         	movff	setTurnDelay@battery+1,___wmul@multiplier+1
  4974  001C98  0EFF               	movlw	255
  4975  001C9A  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  4976  001C9C  0EFD               	movlw	253
  4977  001C9E  6E07               	movwf	___wmul@multiplicand^0,c
  4978  001CA0  EC10  F01A         	call	___wmul	;wreg free
  4979  001CA4  0E87               	movlw	135
  4980  001CA6  2605               	addwf	?___wmul^0,f,c
  4981  001CA8  0E00               	movlw	0
  4982  001CAA  2206               	addwfc	(?___wmul+1)^0,f,c
  4983  001CAC  EE20 F004          	lfsr	2,4
  4984  001CB0  500D               	movf	setTurnDelay@tR^0,w,c
  4985  001CB2  26D9               	addwf	fsr2l,f,c
  4986  001CB4  500E               	movf	(setTurnDelay@tR+1)^0,w,c
  4987  001CB6  22DA               	addwfc	fsr2h,f,c
  4988  001CB8  C005  FFDE         	movff	?___wmul,postinc2
  4989  001CBC  C006  FFDD         	movff	?___wmul+1,postdec2
  4990  001CC0                     
  4991                           ;dc_motor.c: 120:         tR->oneThirtyFive = 220 + 3*(20-battery);
  4992  001CC0  0E18               	movlw	24
  4993  001CC2  6E11               	movwf	??_setTurnDelay^0,c
  4994  001CC4  0E01               	movlw	1
  4995  001CC6  6E12               	movwf	(??_setTurnDelay+1)^0,c
  4996  001CC8  C00F  F005         	movff	setTurnDelay@battery,___wmul@multiplier
  4997  001CCC  C010  F006         	movff	setTurnDelay@battery+1,___wmul@multiplier+1
  4998  001CD0  0EFF               	movlw	255
  4999  001CD2  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  5000  001CD4  0EFD               	movlw	253
  5001  001CD6  6E07               	movwf	___wmul@multiplicand^0,c
  5002  001CD8  EC10  F01A         	call	___wmul	;wreg free
  5003  001CDC  5011               	movf	??_setTurnDelay^0,w,c
  5004  001CDE  2605               	addwf	?___wmul^0,f,c
  5005  001CE0  5012               	movf	(??_setTurnDelay+1)^0,w,c
  5006  001CE2  2206               	addwfc	(?___wmul+1)^0,f,c
  5007  001CE4  EE20 F006          	lfsr	2,6
  5008  001CE8  500D               	movf	setTurnDelay@tR^0,w,c
  5009  001CEA  26D9               	addwf	fsr2l,f,c
  5010  001CEC  500E               	movf	(setTurnDelay@tR+1)^0,w,c
  5011  001CEE  22DA               	addwfc	fsr2h,f,c
  5012  001CF0  C005  FFDE         	movff	?___wmul,postinc2
  5013  001CF4  C006  FFDD         	movff	?___wmul+1,postdec2
  5014  001CF8                     l198:
  5015                           
  5016                           ;dc_motor.c: 122:     tL->direction = 0;
  5017  001CF8  EE20 F00A          	lfsr	2,10
  5018  001CFC  500B               	movf	setTurnDelay@tL^0,w,c
  5019  001CFE  26D9               	addwf	fsr2l,f,c
  5020  001D00  500C               	movf	(setTurnDelay@tL+1)^0,w,c
  5021  001D02  22DA               	addwfc	fsr2h,f,c
  5022  001D04  0E00               	movlw	0
  5023  001D06  6EDF               	movwf	indf2,c
  5024                           
  5025                           ;dc_motor.c: 123:     tR->direction = 1;
  5026  001D08  EE20 F00A          	lfsr	2,10
  5027  001D0C  500D               	movf	setTurnDelay@tR^0,w,c
  5028  001D0E  26D9               	addwf	fsr2l,f,c
  5029  001D10  500E               	movf	(setTurnDelay@tR+1)^0,w,c
  5030  001D12  22DA               	addwfc	fsr2h,f,c
  5031  001D14  0E01               	movlw	1
  5032  001D16  6EDF               	movwf	indf2,c
  5033  001D18  0012               	return		;funcret
  5034  001D1A                     __end_of_setTurnDelay:
  5035                           	callstack 0
  5036                           
  5037 ;; *************** function _sendStringSerial4 *****************
  5038 ;; Defined at:
  5039 ;;		line 31 in file "serial.c"
  5040 ;; Parameters:    Size  Location     Type
  5041 ;;  string          2    1[COMRAM] PTR unsigned char 
  5042 ;;		 -> main@battery_level(10), 
  5043 ;; Auto vars:     Size  Location     Type
  5044 ;;		None
  5045 ;; Return value:  Size  Location     Type
  5046 ;;                  1    wreg      void 
  5047 ;; Registers used:
  5048 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5049 ;; Tracked objects:
  5050 ;;		On entry : 0/0
  5051 ;;		On exit  : 0/0
  5052 ;;		Unchanged: 0/0
  5053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5054 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5057 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5058 ;;Total ram usage:        2 bytes
  5059 ;; Hardware stack levels used:    1
  5060 ;; Hardware stack levels required when called:    2
  5061 ;; This function calls:
  5062 ;;		_sendCharSerial4
  5063 ;; This function is called by:
  5064 ;;		_main
  5065 ;; This function uses a non-reentrant model
  5066 ;;
  5067                           
  5068                           	psect	text23
  5069  00334E                     __ptext23:
  5070                           	callstack 0
  5071  00334E                     _sendStringSerial4:
  5072                           	callstack 28
  5073  00334E                     
  5074                           ;serial.c: 32:  while(*string != 0){
  5075  00334E  EFB2  F019         	goto	l3307
  5076  003352                     l3303:
  5077                           
  5078                           ;serial.c: 33:   sendCharSerial4(*string++);
  5079  003352  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  5080  003356  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  5081  00335A  50DF               	movf	indf2,w,c
  5082  00335C  EC06  F01B         	call	_sendCharSerial4
  5083  003360  4A02               	infsnz	sendStringSerial4@string^0,f,c
  5084  003362  2A03               	incf	(sendStringSerial4@string+1)^0,f,c
  5085  003364                     l3307:
  5086                           
  5087                           ;serial.c: 32:  while(*string != 0){
  5088  003364  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  5089  003368  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  5090  00336C  50DF               	movf	indf2,w,c
  5091  00336E  A4D8               	btfss	status,2,c
  5092  003370  EFBC  F019         	goto	u2891
  5093  003374  EFBE  F019         	goto	u2890
  5094  003378                     u2891:
  5095  003378  EFA9  F019         	goto	l3303
  5096  00337C                     u2890:
  5097  00337C  0012               	return		;funcret
  5098  00337E                     __end_of_sendStringSerial4:
  5099                           	callstack 0
  5100                           
  5101 ;; *************** function _sendCharSerial4 *****************
  5102 ;; Defined at:
  5103 ;;		line 23 in file "serial.c"
  5104 ;; Parameters:    Size  Location     Type
  5105 ;;  charToSend      1    wreg     unsigned char 
  5106 ;; Auto vars:     Size  Location     Type
  5107 ;;  charToSend      1    0[COMRAM] unsigned char 
  5108 ;; Return value:  Size  Location     Type
  5109 ;;                  1    wreg      void 
  5110 ;; Registers used:
  5111 ;;		wreg
  5112 ;; Tracked objects:
  5113 ;;		On entry : 0/0
  5114 ;;		On exit  : 0/0
  5115 ;;		Unchanged: 0/0
  5116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5118 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5120 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5121 ;;Total ram usage:        1 bytes
  5122 ;; Hardware stack levels used:    1
  5123 ;; Hardware stack levels required when called:    1
  5124 ;; This function calls:
  5125 ;;		Nothing
  5126 ;; This function is called by:
  5127 ;;		_sendStringSerial4
  5128 ;; This function uses a non-reentrant model
  5129 ;;
  5130                           
  5131                           	psect	text24
  5132  00360C                     __ptext24:
  5133                           	callstack 0
  5134  00360C                     _sendCharSerial4:
  5135                           	callstack 28
  5136                           
  5137                           ;incstack = 0
  5138                           ;sendCharSerial4@charToSend stored from wreg
  5139  00360C  6E01               	movwf	sendCharSerial4@charToSend^0,c
  5140  00360E                     l496:
  5141  00360E  010E               	movlb	14	; () banked
  5142  003610  A537               	btfss	55,2,b	;volatile
  5143  003612  EF0D  F01B         	goto	u2301
  5144  003616  EF0F  F01B         	goto	u2300
  5145  00361A                     u2301:
  5146  00361A  EF07  F01B         	goto	l496
  5147  00361E                     u2300:
  5148  00361E                     
  5149                           ; BSR set to: 14
  5150                           ;serial.c: 26:     TX4REG = charToSend;
  5151  00361E  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  5152  003622                     
  5153                           ; BSR set to: 14
  5154  003622  0012               	return		;funcret
  5155  003624                     __end_of_sendCharSerial4:
  5156                           	callstack 0
  5157                           
  5158 ;; *************** function _returnSwitch *****************
  5159 ;; Defined at:
  5160 ;;		line 261 in file "dc_motor.c"
  5161 ;; Parameters:    Size  Location     Type
  5162 ;;  C               1    wreg     unsigned char 
  5163 ;; Auto vars:     Size  Location     Type
  5164 ;;  C               1    0[COMRAM] unsigned char 
  5165 ;; Return value:  Size  Location     Type
  5166 ;;                  1    wreg      unsigned char 
  5167 ;; Registers used:
  5168 ;;		wreg, status,2, status,0
  5169 ;; Tracked objects:
  5170 ;;		On entry : 0/0
  5171 ;;		On exit  : 0/0
  5172 ;;		Unchanged: 0/0
  5173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5175 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5177 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5178 ;;Total ram usage:        1 bytes
  5179 ;; Hardware stack levels used:    1
  5180 ;; Hardware stack levels required when called:    1
  5181 ;; This function calls:
  5182 ;;		Nothing
  5183 ;; This function is called by:
  5184 ;;		_main
  5185 ;; This function uses a non-reentrant model
  5186 ;;
  5187                           
  5188                           	psect	text25
  5189  002D66                     __ptext25:
  5190                           	callstack 0
  5191  002D66                     _returnSwitch:
  5192                           	callstack 29
  5193                           
  5194                           ; BSR set to: 14
  5195                           ;incstack = 0
  5196                           ;returnSwitch@C stored from wreg
  5197  002D66  6E01               	movwf	returnSwitch@C^0,c
  5198  002D68                     
  5199                           ;dc_motor.c: 261: char returnSwitch(char C);dc_motor.c: 262: {;dc_motor.c: 263:     if(C
      +                          ==2){return 6;}
  5200  002D68  0E02               	movlw	2
  5201  002D6A  1801               	xorwf	returnSwitch@C^0,w,c
  5202  002D6C  A4D8               	btfss	status,2,c
  5203  002D6E  EFBB  F016         	goto	u2811
  5204  002D72  EFBD  F016         	goto	u2810
  5205  002D76                     u2811:
  5206  002D76  EFC0  F016         	goto	l3179
  5207  002D7A                     u2810:
  5208  002D7A  0E06               	movlw	6
  5209  002D7C  EF09  F017         	goto	l251
  5210  002D80                     l3179:
  5211                           
  5212                           ;dc_motor.c: 264:     if(C==3){return 10;}
  5213  002D80  0E03               	movlw	3
  5214  002D82  1801               	xorwf	returnSwitch@C^0,w,c
  5215  002D84  A4D8               	btfss	status,2,c
  5216  002D86  EFC7  F016         	goto	u2821
  5217  002D8A  EFC9  F016         	goto	u2820
  5218  002D8E                     u2821:
  5219  002D8E  EFCC  F016         	goto	l3185
  5220  002D92                     u2820:
  5221  002D92  0E0A               	movlw	10
  5222  002D94  EF09  F017         	goto	l251
  5223  002D98                     l3185:
  5224                           
  5225                           ;dc_motor.c: 265:     if(C==4){return 4;}
  5226  002D98  0E04               	movlw	4
  5227  002D9A  1801               	xorwf	returnSwitch@C^0,w,c
  5228  002D9C  A4D8               	btfss	status,2,c
  5229  002D9E  EFD3  F016         	goto	u2831
  5230  002DA2  EFD5  F016         	goto	u2830
  5231  002DA6                     u2831:
  5232  002DA6  EFD8  F016         	goto	l3191
  5233  002DAA                     u2830:
  5234  002DAA  0E04               	movlw	4
  5235  002DAC  EF09  F017         	goto	l251
  5236  002DB0                     l3191:
  5237                           
  5238                           ;dc_motor.c: 266:     if(C==5){return 9;}
  5239  002DB0  0E05               	movlw	5
  5240  002DB2  1801               	xorwf	returnSwitch@C^0,w,c
  5241  002DB4  A4D8               	btfss	status,2,c
  5242  002DB6  EFDF  F016         	goto	u2841
  5243  002DBA  EFE1  F016         	goto	u2840
  5244  002DBE                     u2841:
  5245  002DBE  EFE4  F016         	goto	l3197
  5246  002DC2                     u2840:
  5247  002DC2  0E09               	movlw	9
  5248  002DC4  EF09  F017         	goto	l251
  5249  002DC8                     l3197:
  5250                           
  5251                           ;dc_motor.c: 267:     if(C==6){return 2;}
  5252  002DC8  0E06               	movlw	6
  5253  002DCA  1801               	xorwf	returnSwitch@C^0,w,c
  5254  002DCC  A4D8               	btfss	status,2,c
  5255  002DCE  EFEB  F016         	goto	u2851
  5256  002DD2  EFED  F016         	goto	u2850
  5257  002DD6                     u2851:
  5258  002DD6  EFF0  F016         	goto	l3203
  5259  002DDA                     u2850:
  5260  002DDA  0E02               	movlw	2
  5261  002DDC  EF09  F017         	goto	l251
  5262  002DE0                     l3203:
  5263                           
  5264                           ;dc_motor.c: 268:     if(C==7){return 8;}
  5265  002DE0  0E07               	movlw	7
  5266  002DE2  1801               	xorwf	returnSwitch@C^0,w,c
  5267  002DE4  A4D8               	btfss	status,2,c
  5268  002DE6  EFF7  F016         	goto	u2861
  5269  002DEA  EFF9  F016         	goto	u2860
  5270  002DEE                     u2861:
  5271  002DEE  EFFC  F016         	goto	l3209
  5272  002DF2                     u2860:
  5273  002DF2  0E08               	movlw	8
  5274  002DF4  EF09  F017         	goto	l251
  5275  002DF8                     l3209:
  5276                           
  5277                           ;dc_motor.c: 269:     if(C==8){return 7;}
  5278  002DF8  0E08               	movlw	8
  5279  002DFA  1801               	xorwf	returnSwitch@C^0,w,c
  5280  002DFC  A4D8               	btfss	status,2,c
  5281  002DFE  EF03  F017         	goto	u2871
  5282  002E02  EF05  F017         	goto	u2870
  5283  002E06                     u2871:
  5284  002E06  EF08  F017         	goto	l3217
  5285  002E0A                     u2870:
  5286  002E0A  0E07               	movlw	7
  5287  002E0C  EF09  F017         	goto	l251
  5288  002E10                     l3217:
  5289  002E10  0E05               	movlw	5
  5290  002E12                     l251:
  5291  002E12  0012               	return		;funcret
  5292  002E14                     __end_of_returnSwitch:
  5293                           	callstack 0
  5294                           
  5295 ;; *************** function _initUSART4 *****************
  5296 ;; Defined at:
  5297 ;;		line 4 in file "serial.c"
  5298 ;; Parameters:    Size  Location     Type
  5299 ;;		None
  5300 ;; Auto vars:     Size  Location     Type
  5301 ;;		None
  5302 ;; Return value:  Size  Location     Type
  5303 ;;                  1    wreg      void 
  5304 ;; Registers used:
  5305 ;;		wreg, status,2
  5306 ;; Tracked objects:
  5307 ;;		On entry : 0/0
  5308 ;;		On exit  : 0/0
  5309 ;;		Unchanged: 0/0
  5310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5315 ;;Total ram usage:        0 bytes
  5316 ;; Hardware stack levels used:    1
  5317 ;; Hardware stack levels required when called:    1
  5318 ;; This function calls:
  5319 ;;		Nothing
  5320 ;; This function is called by:
  5321 ;;		_main
  5322 ;; This function uses a non-reentrant model
  5323 ;;
  5324                           
  5325                           	psect	text26
  5326  0035B8                     __ptext26:
  5327                           	callstack 0
  5328  0035B8                     _initUSART4:
  5329                           	callstack 29
  5330  0035B8                     
  5331                           ;serial.c: 8:     RC0PPS = 0x12;
  5332  0035B8  0E12               	movlw	18
  5333  0035BA  010E               	movlb	14	; () banked
  5334  0035BC  6F62               	movwf	98,b	;volatile
  5335                           
  5336                           ;serial.c: 9:     RX4PPS = 0x11;
  5337  0035BE  0E11               	movlw	17
  5338  0035C0  6F15               	movwf	21,b	;volatile
  5339  0035C2                     
  5340                           ; BSR set to: 14
  5341                           ;serial.c: 11:     BAUD4CONbits.BRG16 = 0;
  5342  0035C2  97E9               	bcf	233,3,b	;volatile
  5343  0035C4                     
  5344                           ; BSR set to: 14
  5345                           ;serial.c: 12:     TX4STAbits.BRGH = 0;
  5346  0035C4  95E8               	bcf	232,2,b	;volatile
  5347                           
  5348                           ;serial.c: 13:     SP4BRGL = 51;
  5349  0035C6  0E33               	movlw	51
  5350  0035C8  6FE5               	movwf	229,b	;volatile
  5351                           
  5352                           ;serial.c: 14:     SP4BRGH = 0;
  5353  0035CA  0E00               	movlw	0
  5354  0035CC  6FE6               	movwf	230,b	;volatile
  5355  0035CE                     
  5356                           ; BSR set to: 14
  5357                           ;serial.c: 16:     RC4STAbits.CREN = 1;
  5358  0035CE  89E7               	bsf	231,4,b	;volatile
  5359  0035D0                     
  5360                           ; BSR set to: 14
  5361                           ;serial.c: 17:     TX4STAbits.TXEN = 1;
  5362  0035D0  8BE8               	bsf	232,5,b	;volatile
  5363  0035D2                     
  5364                           ; BSR set to: 14
  5365                           ;serial.c: 18:     RC4STAbits.SPEN = 1;
  5366  0035D2  8FE7               	bsf	231,7,b	;volatile
  5367  0035D4                     
  5368                           ; BSR set to: 14
  5369  0035D4  0012               	return		;funcret
  5370  0035D6                     __end_of_initUSART4:
  5371                           	callstack 0
  5372                           
  5373 ;; *************** function _initRGB *****************
  5374 ;; Defined at:
  5375 ;;		line 21 in file "color.c"
  5376 ;; Parameters:    Size  Location     Type
  5377 ;;		None
  5378 ;; Auto vars:     Size  Location     Type
  5379 ;;		None
  5380 ;; Return value:  Size  Location     Type
  5381 ;;                  1    wreg      void 
  5382 ;; Registers used:
  5383 ;;		None
  5384 ;; Tracked objects:
  5385 ;;		On entry : 0/0
  5386 ;;		On exit  : 0/0
  5387 ;;		Unchanged: 0/0
  5388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5392 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5393 ;;Total ram usage:        0 bytes
  5394 ;; Hardware stack levels used:    1
  5395 ;; Hardware stack levels required when called:    1
  5396 ;; This function calls:
  5397 ;;		Nothing
  5398 ;; This function is called by:
  5399 ;;		_main
  5400 ;; This function uses a non-reentrant model
  5401 ;;
  5402                           
  5403                           	psect	text27
  5404  00363A                     __ptext27:
  5405                           	callstack 0
  5406  00363A                     _initRGB:
  5407                           	callstack 29
  5408  00363A                     
  5409                           ;color.c: 22:     LATGbits.LATG0 = 0;
  5410  00363A  907F               	bcf	127,0,c	;volatile
  5411                           
  5412                           ;color.c: 23:     TRISGbits.TRISG0 = 0;
  5413  00363C  9087               	bcf	135,0,c	;volatile
  5414                           
  5415                           ;color.c: 25:     LATEbits.LATE7 = 0;
  5416  00363E  9E7D               	bcf	125,7,c	;volatile
  5417                           
  5418                           ;color.c: 26:     TRISEbits.TRISE7 = 0;
  5419  003640  9E85               	bcf	133,7,c	;volatile
  5420                           
  5421                           ;color.c: 28:     LATAbits.LATA3 = 0;
  5422  003642  9679               	bcf	121,3,c	;volatile
  5423                           
  5424                           ;color.c: 29:     TRISAbits.TRISA3 = 0;
  5425  003644  9681               	bcf	129,3,c	;volatile
  5426  003646  0012               	return		;funcret
  5427  003648                     __end_of_initRGB:
  5428                           	callstack 0
  5429                           
  5430 ;; *************** function _initDebugs *****************
  5431 ;; Defined at:
  5432 ;;		line 10 in file "buggyFunc.c"
  5433 ;; Parameters:    Size  Location     Type
  5434 ;;		None
  5435 ;; Auto vars:     Size  Location     Type
  5436 ;;		None
  5437 ;; Return value:  Size  Location     Type
  5438 ;;                  1    wreg      void 
  5439 ;; Registers used:
  5440 ;;		None
  5441 ;; Tracked objects:
  5442 ;;		On entry : 0/0
  5443 ;;		On exit  : 0/0
  5444 ;;		Unchanged: 0/0
  5445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5450 ;;Total ram usage:        0 bytes
  5451 ;; Hardware stack levels used:    1
  5452 ;; Hardware stack levels required when called:    1
  5453 ;; This function calls:
  5454 ;;		Nothing
  5455 ;; This function is called by:
  5456 ;;		_main
  5457 ;; This function uses a non-reentrant model
  5458 ;;
  5459                           
  5460                           	psect	text28
  5461  00346C                     __ptext28:
  5462                           	callstack 0
  5463  00346C                     _initDebugs:
  5464                           	callstack 29
  5465  00346C                     
  5466                           ;buggyFunc.c: 12:     LATDbits.LATD7 = 0;
  5467  00346C  9E7C               	bcf	124,7,c	;volatile
  5468                           
  5469                           ;buggyFunc.c: 13:     TRISDbits.TRISD7 = 0;
  5470  00346E  9E84               	bcf	132,7,c	;volatile
  5471                           
  5472                           ;buggyFunc.c: 15:     LATHbits.LATH3 = 0;
  5473  003470  9680               	bcf	128,3,c	;volatile
  5474                           
  5475                           ;buggyFunc.c: 16:     TRISHbits.TRISH3 = 0;
  5476  003472  9688               	bcf	136,3,c	;volatile
  5477                           
  5478                           ;buggyFunc.c: 19:     TRISFbits.TRISF2 = 1;
  5479  003474  8486               	bsf	134,2,c	;volatile
  5480                           
  5481                           ;buggyFunc.c: 20:     ANSELFbits.ANSELF2=0;
  5482  003476  010E               	movlb	14	; () banked
  5483  003478  95B4               	bcf	180,2,b	;volatile
  5484                           
  5485                           ;buggyFunc.c: 23:     LATHbits.LATH1 = 0;
  5486  00347A  9280               	bcf	128,1,c	;volatile
  5487                           
  5488                           ;buggyFunc.c: 24:     TRISHbits.TRISH1 = 0;
  5489  00347C  9288               	bcf	136,1,c	;volatile
  5490                           
  5491                           ;buggyFunc.c: 27:     LATDbits.LATD3 = 0;
  5492  00347E  967C               	bcf	124,3,c	;volatile
  5493                           
  5494                           ;buggyFunc.c: 28:     TRISDbits.TRISD3 = 0;
  5495  003480  9684               	bcf	132,3,c	;volatile
  5496                           
  5497                           ;buggyFunc.c: 31:     LATDbits.LATD4 = 0;
  5498  003482  987C               	bcf	124,4,c	;volatile
  5499                           
  5500                           ;buggyFunc.c: 32:     TRISDbits.TRISD4 = 0;
  5501  003484  9884               	bcf	132,4,c	;volatile
  5502                           
  5503                           ;buggyFunc.c: 35:     LATFbits.LATF0 = 0;
  5504  003486  907E               	bcf	126,0,c	;volatile
  5505                           
  5506                           ;buggyFunc.c: 36:     TRISFbits.TRISF0 = 0;
  5507  003488  9086               	bcf	134,0,c	;volatile
  5508                           
  5509                           ;buggyFunc.c: 39:     LATHbits.LATH0 = 0;
  5510  00348A  9080               	bcf	128,0,c	;volatile
  5511                           
  5512                           ;buggyFunc.c: 40:     TRISHbits.TRISH0 = 0;
  5513  00348C  9088               	bcf	136,0,c	;volatile
  5514  00348E                     
  5515                           ; BSR set to: 14
  5516  00348E  0012               	return		;funcret
  5517  003490                     __end_of_initDebugs:
  5518                           	callstack 0
  5519                           
  5520 ;; *************** function _initDCmotorsPWM *****************
  5521 ;; Defined at:
  5522 ;;		line 10 in file "dc_motor.c"
  5523 ;; Parameters:    Size  Location     Type
  5524 ;;  PWMperiod       1    wreg     unsigned char 
  5525 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  5526 ;;		 -> main@motorL(8), 
  5527 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5528 ;;		 -> main@motorR(8), 
  5529 ;; Auto vars:     Size  Location     Type
  5530 ;;  PWMperiod       1   23[COMRAM] unsigned char 
  5531 ;; Return value:  Size  Location     Type
  5532 ;;                  1    wreg      void 
  5533 ;; Registers used:
  5534 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5535 ;; Tracked objects:
  5536 ;;		On entry : 0/0
  5537 ;;		On exit  : 0/0
  5538 ;;		Unchanged: 0/0
  5539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5540 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5541 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5543 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5544 ;;Total ram usage:        5 bytes
  5545 ;; Hardware stack levels used:    1
  5546 ;; Hardware stack levels required when called:    3
  5547 ;; This function calls:
  5548 ;;		_setMotorPWM
  5549 ;; This function is called by:
  5550 ;;		_main
  5551 ;; This function uses a non-reentrant model
  5552 ;;
  5553                           
  5554                           	psect	text29
  5555  00283A                     __ptext29:
  5556                           	callstack 0
  5557  00283A                     _initDCmotorsPWM:
  5558                           	callstack 27
  5559                           
  5560                           ; BSR set to: 14
  5561                           ;incstack = 0
  5562                           ;initDCmotorsPWM@PWMperiod stored from wreg
  5563  00283A  6E18               	movwf	initDCmotorsPWM@PWMperiod^0,c
  5564  00283C                     
  5565                           ;dc_motor.c: 12:     LATEbits.LATE0 = 0;
  5566  00283C  907D               	bcf	125,0,c	;volatile
  5567                           
  5568                           ;dc_motor.c: 13:     LATCbits.LATC7 = 0;
  5569  00283E  9E7B               	bcf	123,7,c	;volatile
  5570                           
  5571                           ;dc_motor.c: 14:     TRISEbits.TRISE2 = 0;
  5572  002840  9485               	bcf	133,2,c	;volatile
  5573                           
  5574                           ;dc_motor.c: 15:     TRISCbits.TRISC7 = 0;
  5575  002842  9E83               	bcf	131,7,c	;volatile
  5576                           
  5577                           ;dc_motor.c: 16:     TRISEbits.TRISE4 = 0;
  5578  002844  9885               	bcf	133,4,c	;volatile
  5579                           
  5580                           ;dc_motor.c: 17:     TRISGbits.TRISG6 = 0;
  5581  002846  9C87               	bcf	135,6,c	;volatile
  5582  002848                     
  5583                           ;dc_motor.c: 20:     T2CONbits.CKPS=0b11;
  5584  002848  50BD               	movf	189,w,c	;volatile
  5585  00284A  0B8F               	andlw	-113
  5586  00284C  0930               	iorlw	48
  5587  00284E  6EBD               	movwf	189,c	;volatile
  5588                           
  5589                           ;dc_motor.c: 21:     T2HLTbits.MODE=0b00000;
  5590  002850  0EE0               	movlw	-32
  5591  002852  16BE               	andwf	190,f,c	;volatile
  5592                           
  5593                           ;dc_motor.c: 22:     T2CLKCONbits.CS=0b0001;
  5594  002854  50BF               	movf	191,w,c	;volatile
  5595  002856  0BF0               	andlw	-16
  5596  002858  0901               	iorlw	1
  5597  00285A  6EBF               	movwf	191,c	;volatile
  5598  00285C                     
  5599                           ;dc_motor.c: 25:     T2PR=PWMperiod;
  5600  00285C  C018  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  5601  002860                     
  5602                           ;dc_motor.c: 26:     T2CONbits.ON=1;
  5603  002860  8EBD               	bsf	189,7,c	;volatile
  5604                           
  5605                           ;dc_motor.c: 28:     RE2PPS=0x0A;
  5606  002862  0E0A               	movlw	10
  5607  002864  010E               	movlb	14	; () banked
  5608  002866  6F74               	movwf	116,b	;volatile
  5609                           
  5610                           ;dc_motor.c: 29:     RC7PPS=0x0B;
  5611  002868  0E0B               	movlw	11
  5612  00286A  6F69               	movwf	105,b	;volatile
  5613                           
  5614                           ;dc_motor.c: 31:     PWM6DCH=0;
  5615  00286C  0E00               	movlw	0
  5616  00286E  6EA3               	movwf	163,c	;volatile
  5617                           
  5618                           ;dc_motor.c: 32:     PWM7DCH=0;
  5619  002870  0E00               	movlw	0
  5620  002872  6EA0               	movwf	160,c	;volatile
  5621  002874                     
  5622                           ; BSR set to: 14
  5623                           ;dc_motor.c: 34:     PWM6CONbits.EN = 1;
  5624  002874  8EA4               	bsf	164,7,c	;volatile
  5625  002876                     
  5626                           ; BSR set to: 14
  5627                           ;dc_motor.c: 35:     PWM7CONbits.EN = 1;
  5628  002876  8EA1               	bsf	161,7,c	;volatile
  5629  002878                     
  5630                           ; BSR set to: 14
  5631                           ;dc_motor.c: 38:     mL->power=0;
  5632  002878  C014  FFD9         	movff	initDCmotorsPWM@mL,fsr2l
  5633  00287C  C015  FFDA         	movff	initDCmotorsPWM@mL+1,fsr2h
  5634  002880  0E00               	movlw	0
  5635  002882  6EDF               	movwf	indf2,c
  5636  002884                     
  5637                           ; BSR set to: 14
  5638                           ;dc_motor.c: 39:     mL->direction=0;
  5639  002884  EE20 F001          	lfsr	2,1
  5640  002888  5014               	movf	initDCmotorsPWM@mL^0,w,c
  5641  00288A  26D9               	addwf	fsr2l,f,c
  5642  00288C  5015               	movf	(initDCmotorsPWM@mL+1)^0,w,c
  5643  00288E  22DA               	addwfc	fsr2h,f,c
  5644  002890  0E00               	movlw	0
  5645  002892  6EDF               	movwf	indf2,c
  5646  002894                     
  5647                           ; BSR set to: 14
  5648                           ;dc_motor.c: 40:     mL->dutyHighByte=(unsigned char *)(&PWM6DCH);
  5649  002894  EE20 F002          	lfsr	2,2
  5650  002898  5014               	movf	initDCmotorsPWM@mL^0,w,c
  5651  00289A  26D9               	addwf	fsr2l,f,c
  5652  00289C  5015               	movf	(initDCmotorsPWM@mL+1)^0,w,c
  5653  00289E  22DA               	addwfc	fsr2h,f,c
  5654  0028A0  0EA3               	movlw	163
  5655  0028A2  6EDE               	movwf	postinc2,c
  5656  0028A4  0E0F               	movlw	15
  5657  0028A6  6EDD               	movwf	postdec2,c
  5658  0028A8                     
  5659                           ; BSR set to: 14
  5660                           ;dc_motor.c: 41:     mL->dir_LAT=(unsigned char *)(&LATE);
  5661  0028A8  EE20 F004          	lfsr	2,4
  5662  0028AC  5014               	movf	initDCmotorsPWM@mL^0,w,c
  5663  0028AE  26D9               	addwf	fsr2l,f,c
  5664  0028B0  5015               	movf	(initDCmotorsPWM@mL+1)^0,w,c
  5665  0028B2  22DA               	addwfc	fsr2h,f,c
  5666  0028B4  0E7D               	movlw	125
  5667  0028B6  6EDE               	movwf	postinc2,c
  5668  0028B8  0E0F               	movlw	15
  5669  0028BA  6EDD               	movwf	postdec2,c
  5670  0028BC                     
  5671                           ; BSR set to: 14
  5672                           ;dc_motor.c: 42:     mL->dir_pin=4;
  5673  0028BC  EE20 F006          	lfsr	2,6
  5674  0028C0  5014               	movf	initDCmotorsPWM@mL^0,w,c
  5675  0028C2  26D9               	addwf	fsr2l,f,c
  5676  0028C4  5015               	movf	(initDCmotorsPWM@mL+1)^0,w,c
  5677  0028C6  22DA               	addwfc	fsr2h,f,c
  5678  0028C8  0E04               	movlw	4
  5679  0028CA  6EDF               	movwf	indf2,c
  5680  0028CC                     
  5681                           ; BSR set to: 14
  5682                           ;dc_motor.c: 43:     mL->PWMperiod=199;
  5683  0028CC  EE20 F007          	lfsr	2,7
  5684  0028D0  5014               	movf	initDCmotorsPWM@mL^0,w,c
  5685  0028D2  26D9               	addwf	fsr2l,f,c
  5686  0028D4  5015               	movf	(initDCmotorsPWM@mL+1)^0,w,c
  5687  0028D6  22DA               	addwfc	fsr2h,f,c
  5688  0028D8  0EC7               	movlw	199
  5689  0028DA  6EDF               	movwf	indf2,c
  5690  0028DC                     
  5691                           ; BSR set to: 14
  5692                           ;dc_motor.c: 46:     mR->power=0;
  5693  0028DC  C016  FFD9         	movff	initDCmotorsPWM@mR,fsr2l
  5694  0028E0  C017  FFDA         	movff	initDCmotorsPWM@mR+1,fsr2h
  5695  0028E4  0E00               	movlw	0
  5696  0028E6  6EDF               	movwf	indf2,c
  5697  0028E8                     
  5698                           ; BSR set to: 14
  5699                           ;dc_motor.c: 47:     mR->direction=0;
  5700  0028E8  EE20 F001          	lfsr	2,1
  5701  0028EC  5016               	movf	initDCmotorsPWM@mR^0,w,c
  5702  0028EE  26D9               	addwf	fsr2l,f,c
  5703  0028F0  5017               	movf	(initDCmotorsPWM@mR+1)^0,w,c
  5704  0028F2  22DA               	addwfc	fsr2h,f,c
  5705  0028F4  0E00               	movlw	0
  5706  0028F6  6EDF               	movwf	indf2,c
  5707  0028F8                     
  5708                           ; BSR set to: 14
  5709                           ;dc_motor.c: 48:     mR->dutyHighByte=(unsigned char *)(&PWM7DCH);
  5710  0028F8  EE20 F002          	lfsr	2,2
  5711  0028FC  5016               	movf	initDCmotorsPWM@mR^0,w,c
  5712  0028FE  26D9               	addwf	fsr2l,f,c
  5713  002900  5017               	movf	(initDCmotorsPWM@mR+1)^0,w,c
  5714  002902  22DA               	addwfc	fsr2h,f,c
  5715  002904  0EA0               	movlw	160
  5716  002906  6EDE               	movwf	postinc2,c
  5717  002908  0E0F               	movlw	15
  5718  00290A  6EDD               	movwf	postdec2,c
  5719  00290C                     
  5720                           ; BSR set to: 14
  5721                           ;dc_motor.c: 49:     mR->dir_LAT=(unsigned char *)(&LATG);
  5722  00290C  EE20 F004          	lfsr	2,4
  5723  002910  5016               	movf	initDCmotorsPWM@mR^0,w,c
  5724  002912  26D9               	addwf	fsr2l,f,c
  5725  002914  5017               	movf	(initDCmotorsPWM@mR+1)^0,w,c
  5726  002916  22DA               	addwfc	fsr2h,f,c
  5727  002918  0E7F               	movlw	127
  5728  00291A  6EDE               	movwf	postinc2,c
  5729  00291C  0E0F               	movlw	15
  5730  00291E  6EDD               	movwf	postdec2,c
  5731  002920                     
  5732                           ; BSR set to: 14
  5733                           ;dc_motor.c: 50:     mR->dir_pin=6;
  5734  002920  EE20 F006          	lfsr	2,6
  5735  002924  5016               	movf	initDCmotorsPWM@mR^0,w,c
  5736  002926  26D9               	addwf	fsr2l,f,c
  5737  002928  5017               	movf	(initDCmotorsPWM@mR+1)^0,w,c
  5738  00292A  22DA               	addwfc	fsr2h,f,c
  5739  00292C  0E06               	movlw	6
  5740  00292E  6EDF               	movwf	indf2,c
  5741  002930                     
  5742                           ; BSR set to: 14
  5743                           ;dc_motor.c: 51:     mR->PWMperiod=199;
  5744  002930  EE20 F007          	lfsr	2,7
  5745  002934  5016               	movf	initDCmotorsPWM@mR^0,w,c
  5746  002936  26D9               	addwf	fsr2l,f,c
  5747  002938  5017               	movf	(initDCmotorsPWM@mR+1)^0,w,c
  5748  00293A  22DA               	addwfc	fsr2h,f,c
  5749  00293C  0EC7               	movlw	199
  5750  00293E  6EDF               	movwf	indf2,c
  5751  002940                     
  5752                           ; BSR set to: 14
  5753                           ;dc_motor.c: 54:     setMotorPWM(mL);
  5754  002940  C014  F009         	movff	initDCmotorsPWM@mL,setMotorPWM@m
  5755  002944  C015  F00A         	movff	initDCmotorsPWM@mL+1,setMotorPWM@m+1
  5756  002948  EC95  F00F         	call	_setMotorPWM	;wreg free
  5757  00294C                     
  5758                           ;dc_motor.c: 55:     setMotorPWM(mR);
  5759  00294C  C016  F009         	movff	initDCmotorsPWM@mR,setMotorPWM@m
  5760  002950  C017  F00A         	movff	initDCmotorsPWM@mR+1,setMotorPWM@m+1
  5761  002954  EC95  F00F         	call	_setMotorPWM	;wreg free
  5762  002958  0012               	return		;funcret
  5763  00295A                     __end_of_initDCmotorsPWM:
  5764                           	callstack 0
  5765                           
  5766 ;; *************** function _identifier *****************
  5767 ;; Defined at:
  5768 ;;		line 181 in file "color.c"
  5769 ;; Parameters:    Size  Location     Type
  5770 ;;  aC              2   29[COMRAM] PTR struct RGBC_val
  5771 ;;		 -> main@ambientC(8), 
  5772 ;;  aR              2   31[COMRAM] PTR struct RGBC_val
  5773 ;;		 -> main@ambientR(8), 
  5774 ;;  aG              2   33[COMRAM] PTR struct RGBC_val
  5775 ;;		 -> main@ambientG(8), 
  5776 ;;  aB              2   35[COMRAM] PTR struct RGBC_val
  5777 ;;		 -> main@ambientB(8), 
  5778 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  5779 ;;		 -> main@motorL(8), 
  5780 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  5781 ;;		 -> main@motorR(8), 
  5782 ;; Auto vars:     Size  Location     Type
  5783 ;;  blueVals        8   70[COMRAM] struct RGBC_val
  5784 ;;  vals            8   62[COMRAM] struct RGBC_val
  5785 ;;  greenVals       8   54[COMRAM] struct RGBC_val
  5786 ;;  redVals         8   46[COMRAM] struct RGBC_val
  5787 ;;  tracker         2   78[COMRAM] unsigned int 
  5788 ;;  color_number    1   45[COMRAM] unsigned char 
  5789 ;; Return value:  Size  Location     Type
  5790 ;;                  1    wreg      unsigned char 
  5791 ;; Registers used:
  5792 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5793 ;; Tracked objects:
  5794 ;;		On entry : 0/0
  5795 ;;		On exit  : 0/0
  5796 ;;		Unchanged: 0/0
  5797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5798 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5799 ;;      Locals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5800 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5801 ;;      Totals:        51       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5802 ;;Total ram usage:       51 bytes
  5803 ;; Hardware stack levels used:    1
  5804 ;; Hardware stack levels required when called:    6
  5805 ;; This function calls:
  5806 ;;		_calibrate
  5807 ;;		_scan
  5808 ;;		_shuffle
  5809 ;; This function is called by:
  5810 ;;		_main
  5811 ;; This function uses a non-reentrant model
  5812 ;;
  5813                           
  5814                           	psect	text30
  5815  001344                     __ptext30:
  5816                           	callstack 0
  5817  001344                     _identifier:
  5818                           	callstack 24
  5819  001344                     
  5820                           ;color.c: 181: char identifier(struct RGBC_val *aC,struct RGBC_val *aR,struct RGBC_val *
      +                          aG,struct RGBC_val *aB, struct DC_motor *mL, struct DC_motor *mR);color.c: 182: {;color.
      +                          c: 184:     struct RGBC_val vals, redVals, greenVals, blueVals;;color.c: 185:     unsign
      +                          ed char color_number = 0;
  5821  001344  0E00               	movlw	0
  5822  001346  6E2E               	movwf	identifier@color_number^0,c
  5823  001348                     
  5824                           ;color.c: 187:     scan(&vals, &redVals, &greenVals, &blueVals);
  5825  001348  0E3F               	movlw	low identifier@vals
  5826  00134A  6E0F               	movwf	scan@C^0,c
  5827  00134C  0E00               	movlw	high identifier@vals
  5828  00134E  6E10               	movwf	(scan@C+1)^0,c
  5829  001350  0E2F               	movlw	low identifier@redVals
  5830  001352  6E11               	movwf	scan@R^0,c
  5831  001354  0E00               	movlw	high identifier@redVals
  5832  001356  6E12               	movwf	(scan@R+1)^0,c
  5833  001358  0E37               	movlw	low identifier@greenVals
  5834  00135A  6E13               	movwf	scan@G^0,c
  5835  00135C  0E00               	movlw	high identifier@greenVals
  5836  00135E  6E14               	movwf	(scan@G+1)^0,c
  5837  001360  0E47               	movlw	low identifier@blueVals
  5838  001362  6E15               	movwf	scan@B^0,c
  5839  001364  0E00               	movlw	high identifier@blueVals
  5840  001366  6E16               	movwf	(scan@B+1)^0,c
  5841  001368  EC5A  F016         	call	_scan	;wreg free
  5842  00136C                     
  5843                           ;color.c: 189:     calibrate(&vals, aC);
  5844  00136C  0E3F               	movlw	low identifier@vals
  5845  00136E  6E01               	movwf	calibrate@v^0,c
  5846  001370  0E00               	movlw	high identifier@vals
  5847  001372  6E02               	movwf	(calibrate@v+1)^0,c
  5848  001374  C01E  F003         	movff	identifier@aC,calibrate@n
  5849  001378  C01F  F004         	movff	identifier@aC+1,calibrate@n+1
  5850  00137C  ECAD  F014         	call	_calibrate	;wreg free
  5851  001380                     
  5852                           ;color.c: 190:     calibrate(&redVals,aR);
  5853  001380  0E2F               	movlw	low identifier@redVals
  5854  001382  6E01               	movwf	calibrate@v^0,c
  5855  001384  0E00               	movlw	high identifier@redVals
  5856  001386  6E02               	movwf	(calibrate@v+1)^0,c
  5857  001388  C020  F003         	movff	identifier@aR,calibrate@n
  5858  00138C  C021  F004         	movff	identifier@aR+1,calibrate@n+1
  5859  001390  ECAD  F014         	call	_calibrate	;wreg free
  5860  001394                     
  5861                           ;color.c: 191:     calibrate(&greenVals,aG);
  5862  001394  0E37               	movlw	low identifier@greenVals
  5863  001396  6E01               	movwf	calibrate@v^0,c
  5864  001398  0E00               	movlw	high identifier@greenVals
  5865  00139A  6E02               	movwf	(calibrate@v+1)^0,c
  5866  00139C  C022  F003         	movff	identifier@aG,calibrate@n
  5867  0013A0  C023  F004         	movff	identifier@aG+1,calibrate@n+1
  5868  0013A4  ECAD  F014         	call	_calibrate	;wreg free
  5869  0013A8                     
  5870                           ;color.c: 192:     calibrate(&blueVals,aB);
  5871  0013A8  0E47               	movlw	low identifier@blueVals
  5872  0013AA  6E01               	movwf	calibrate@v^0,c
  5873  0013AC  0E00               	movlw	high identifier@blueVals
  5874  0013AE  6E02               	movwf	(calibrate@v+1)^0,c
  5875  0013B0  C024  F003         	movff	identifier@aB,calibrate@n
  5876  0013B4  C025  F004         	movff	identifier@aB+1,calibrate@n+1
  5877  0013B8  ECAD  F014         	call	_calibrate	;wreg free
  5878  0013BC                     
  5879                           ;color.c: 194:     unsigned int tracker = 0;
  5880  0013BC  0E00               	movlw	0
  5881  0013BE  6E50               	movwf	(identifier@tracker+1)^0,c
  5882  0013C0  0E00               	movlw	0
  5883  0013C2  6E4F               	movwf	identifier@tracker^0,c
  5884  0013C4                     
  5885                           ;color.c: 208:     if (vals.C > 150){tracker+=1;}
  5886  0013C4  BE46               	btfsc	(identifier@vals+7)^0,7,c
  5887  0013C6  EFEE  F009         	goto	u2411
  5888  0013CA  5046               	movf	(identifier@vals+7)^0,w,c
  5889  0013CC  E109               	bnz	u2410
  5890  0013CE  0E97               	movlw	151
  5891  0013D0  5C45               	subwf	(identifier@vals+6)^0,w,c
  5892  0013D2  A0D8               	btfss	status,0,c
  5893  0013D4  EFEE  F009         	goto	u2411
  5894  0013D8  EFF0  F009         	goto	u2410
  5895  0013DC                     u2411:
  5896  0013DC  EFF2  F009         	goto	l2915
  5897  0013E0                     u2410:
  5898  0013E0  4A4F               	infsnz	identifier@tracker^0,f,c
  5899  0013E2  2A50               	incf	(identifier@tracker+1)^0,f,c
  5900  0013E4                     l2915:
  5901                           
  5902                           ;color.c: 209:     if (blueVals.B > 30){tracker+=(1<<1);}
  5903  0013E4  BE4C               	btfsc	(identifier@blueVals+5)^0,7,c
  5904  0013E6  EFFE  F009         	goto	u2421
  5905  0013EA  504C               	movf	(identifier@blueVals+5)^0,w,c
  5906  0013EC  E109               	bnz	u2420
  5907  0013EE  0E1F               	movlw	31
  5908  0013F0  5C4B               	subwf	(identifier@blueVals+4)^0,w,c
  5909  0013F2  A0D8               	btfss	status,0,c
  5910  0013F4  EFFE  F009         	goto	u2421
  5911  0013F8  EF00  F00A         	goto	u2420
  5912  0013FC                     u2421:
  5913  0013FC  EF04  F00A         	goto	l67
  5914  001400                     u2420:
  5915  001400  0E02               	movlw	2
  5916  001402  264F               	addwf	identifier@tracker^0,f,c
  5917  001404  0E00               	movlw	0
  5918  001406  2250               	addwfc	(identifier@tracker+1)^0,f,c
  5919  001408                     l67:
  5920                           
  5921                           ;color.c: 211:     if ((tracker&0b11) == 0b01){color_number = 1;}
  5922  001408  0E03               	movlw	3
  5923  00140A  144F               	andwf	identifier@tracker^0,w,c
  5924  00140C  6E2A               	movwf	??_identifier^0,c
  5925  00140E  0E00               	movlw	0
  5926  001410  1450               	andwf	(identifier@tracker+1)^0,w,c
  5927  001412  6E2B               	movwf	(??_identifier+1)^0,c
  5928  001414  042A               	decf	??_identifier^0,w,c
  5929  001416  102B               	iorwf	(??_identifier+1)^0,w,c
  5930  001418  A4D8               	btfss	status,2,c
  5931  00141A  EF11  F00A         	goto	u2431
  5932  00141E  EF13  F00A         	goto	u2430
  5933  001422                     u2431:
  5934  001422  EF17  F00A         	goto	l2921
  5935  001426                     u2430:
  5936  001426  0E01               	movlw	1
  5937  001428  6E2E               	movwf	identifier@color_number^0,c
  5938  00142A  EFC4  F00B         	goto	l69
  5939  00142E                     l2921:
  5940  00142E  0E03               	movlw	3
  5941  001430  144F               	andwf	identifier@tracker^0,w,c
  5942  001432  6E2A               	movwf	??_identifier^0,c
  5943  001434  0E00               	movlw	0
  5944  001436  1450               	andwf	(identifier@tracker+1)^0,w,c
  5945  001438  6E2B               	movwf	(??_identifier+1)^0,c
  5946  00143A  0E03               	movlw	3
  5947  00143C  182A               	xorwf	??_identifier^0,w,c
  5948  00143E  102B               	iorwf	(??_identifier+1)^0,w,c
  5949  001440  A4D8               	btfss	status,2,c
  5950  001442  EF25  F00A         	goto	u2441
  5951  001446  EF27  F00A         	goto	u2440
  5952  00144A                     u2441:
  5953  00144A  EF2B  F00A         	goto	l2925
  5954  00144E                     u2440:
  5955  00144E  0E03               	movlw	3
  5956  001450  6E2E               	movwf	identifier@color_number^0,c
  5957  001452  EFC4  F00B         	goto	l69
  5958  001456                     l2925:
  5959                           
  5960                           ;color.c: 215:         shuffle(mL, mR, 5, 1);
  5961  001456  C026  F014         	movff	identifier@mL,shuffle@mL
  5962  00145A  C027  F015         	movff	identifier@mL+1,shuffle@mL+1
  5963  00145E  C028  F016         	movff	identifier@mR,shuffle@mR
  5964  001462  C029  F017         	movff	identifier@mR+1,shuffle@mR+1
  5965  001466  0E05               	movlw	5
  5966  001468  6E18               	movwf	shuffle@dist^0,c
  5967  00146A  0E01               	movlw	1
  5968  00146C  6E19               	movwf	shuffle@dir^0,c
  5969  00146E  EC88  F013         	call	_shuffle	;wreg free
  5970  001472                     
  5971                           ;color.c: 216:         scan(&vals, &redVals, &greenVals, &blueVals);
  5972  001472  0E3F               	movlw	low identifier@vals
  5973  001474  6E0F               	movwf	scan@C^0,c
  5974  001476  0E00               	movlw	high identifier@vals
  5975  001478  6E10               	movwf	(scan@C+1)^0,c
  5976  00147A  0E2F               	movlw	low identifier@redVals
  5977  00147C  6E11               	movwf	scan@R^0,c
  5978  00147E  0E00               	movlw	high identifier@redVals
  5979  001480  6E12               	movwf	(scan@R+1)^0,c
  5980  001482  0E37               	movlw	low identifier@greenVals
  5981  001484  6E13               	movwf	scan@G^0,c
  5982  001486  0E00               	movlw	high identifier@greenVals
  5983  001488  6E14               	movwf	(scan@G+1)^0,c
  5984  00148A  0E47               	movlw	low identifier@blueVals
  5985  00148C  6E15               	movwf	scan@B^0,c
  5986  00148E  0E00               	movlw	high identifier@blueVals
  5987  001490  6E16               	movwf	(scan@B+1)^0,c
  5988  001492  EC5A  F016         	call	_scan	;wreg free
  5989  001496                     
  5990                           ;color.c: 218:         if (blueVals.B>90){tracker+=(1<<2);}
  5991  001496  BE4C               	btfsc	(identifier@blueVals+5)^0,7,c
  5992  001498  EF57  F00A         	goto	u2451
  5993  00149C  504C               	movf	(identifier@blueVals+5)^0,w,c
  5994  00149E  E109               	bnz	u2450
  5995  0014A0  0E5B               	movlw	91
  5996  0014A2  5C4B               	subwf	(identifier@blueVals+4)^0,w,c
  5997  0014A4  A0D8               	btfss	status,0,c
  5998  0014A6  EF57  F00A         	goto	u2451
  5999  0014AA  EF59  F00A         	goto	u2450
  6000  0014AE                     u2451:
  6001  0014AE  EF5D  F00A         	goto	l72
  6002  0014B2                     u2450:
  6003  0014B2  0E04               	movlw	4
  6004  0014B4  264F               	addwf	identifier@tracker^0,f,c
  6005  0014B6  0E00               	movlw	0
  6006  0014B8  2250               	addwfc	(identifier@tracker+1)^0,f,c
  6007  0014BA                     l72:
  6008                           
  6009                           ;color.c: 219:         if (greenVals.G>600){tracker+=(1<<3);}
  6010  0014BA  BE3A               	btfsc	(identifier@greenVals+3)^0,7,c
  6011  0014BC  EF69  F00A         	goto	u2461
  6012  0014C0  0E59               	movlw	89
  6013  0014C2  5C39               	subwf	(identifier@greenVals+2)^0,w,c
  6014  0014C4  0E02               	movlw	2
  6015  0014C6  583A               	subwfb	(identifier@greenVals+3)^0,w,c
  6016  0014C8  A0D8               	btfss	status,0,c
  6017  0014CA  EF69  F00A         	goto	u2461
  6018  0014CE  EF6B  F00A         	goto	u2460
  6019  0014D2                     u2461:
  6020  0014D2  EF6F  F00A         	goto	l73
  6021  0014D6                     u2460:
  6022  0014D6  0E08               	movlw	8
  6023  0014D8  264F               	addwf	identifier@tracker^0,f,c
  6024  0014DA  0E00               	movlw	0
  6025  0014DC  2250               	addwfc	(identifier@tracker+1)^0,f,c
  6026  0014DE                     l73:
  6027                           
  6028                           ;color.c: 220:         if (greenVals.G>320){tracker+=(1<<4);}
  6029  0014DE  BE3A               	btfsc	(identifier@greenVals+3)^0,7,c
  6030  0014E0  EF7B  F00A         	goto	u2471
  6031  0014E4  0E41               	movlw	65
  6032  0014E6  5C39               	subwf	(identifier@greenVals+2)^0,w,c
  6033  0014E8  0E01               	movlw	1
  6034  0014EA  583A               	subwfb	(identifier@greenVals+3)^0,w,c
  6035  0014EC  A0D8               	btfss	status,0,c
  6036  0014EE  EF7B  F00A         	goto	u2471
  6037  0014F2  EF7D  F00A         	goto	u2470
  6038  0014F6                     u2471:
  6039  0014F6  EF81  F00A         	goto	l74
  6040  0014FA                     u2470:
  6041  0014FA  0E10               	movlw	16
  6042  0014FC  264F               	addwf	identifier@tracker^0,f,c
  6043  0014FE  0E00               	movlw	0
  6044  001500  2250               	addwfc	(identifier@tracker+1)^0,f,c
  6045  001502                     l74:
  6046                           
  6047                           ;color.c: 221:         if (redVals.R>550){tracker+=(1<<5);}
  6048  001502  BE30               	btfsc	(identifier@redVals+1)^0,7,c
  6049  001504  EF8D  F00A         	goto	u2481
  6050  001508  0E27               	movlw	39
  6051  00150A  5C2F               	subwf	identifier@redVals^0,w,c
  6052  00150C  0E02               	movlw	2
  6053  00150E  5830               	subwfb	(identifier@redVals+1)^0,w,c
  6054  001510  A0D8               	btfss	status,0,c
  6055  001512  EF8D  F00A         	goto	u2481
  6056  001516  EF8F  F00A         	goto	u2480
  6057  00151A                     u2481:
  6058  00151A  EF93  F00A         	goto	l75
  6059  00151E                     u2480:
  6060  00151E  0E20               	movlw	32
  6061  001520  264F               	addwf	identifier@tracker^0,f,c
  6062  001522  0E00               	movlw	0
  6063  001524  2250               	addwfc	(identifier@tracker+1)^0,f,c
  6064  001526                     l75:
  6065                           
  6066                           ;color.c: 222:         if (vals.R>730){tracker+=(1<<6);}
  6067  001526  BE40               	btfsc	(identifier@vals+1)^0,7,c
  6068  001528  EF9F  F00A         	goto	u2491
  6069  00152C  0EDB               	movlw	219
  6070  00152E  5C3F               	subwf	identifier@vals^0,w,c
  6071  001530  0E02               	movlw	2
  6072  001532  5840               	subwfb	(identifier@vals+1)^0,w,c
  6073  001534  A0D8               	btfss	status,0,c
  6074  001536  EF9F  F00A         	goto	u2491
  6075  00153A  EFA1  F00A         	goto	u2490
  6076  00153E                     u2491:
  6077  00153E  EFA5  F00A         	goto	l76
  6078  001542                     u2490:
  6079  001542  0E40               	movlw	64
  6080  001544  264F               	addwf	identifier@tracker^0,f,c
  6081  001546  0E00               	movlw	0
  6082  001548  2250               	addwfc	(identifier@tracker+1)^0,f,c
  6083  00154A                     l76:
  6084                           
  6085                           ;color.c: 223:         if (vals.G>245){tracker+=(1<<7);}
  6086  00154A  BE42               	btfsc	(identifier@vals+3)^0,7,c
  6087  00154C  EFB1  F00A         	goto	u2501
  6088  001550  5042               	movf	(identifier@vals+3)^0,w,c
  6089  001552  E109               	bnz	u2500
  6090  001554  0EF6               	movlw	246
  6091  001556  5C41               	subwf	(identifier@vals+2)^0,w,c
  6092  001558  A0D8               	btfss	status,0,c
  6093  00155A  EFB1  F00A         	goto	u2501
  6094  00155E  EFB3  F00A         	goto	u2500
  6095  001562                     u2501:
  6096  001562  EFB7  F00A         	goto	l77
  6097  001566                     u2500:
  6098  001566  0E80               	movlw	128
  6099  001568  264F               	addwf	identifier@tracker^0,f,c
  6100  00156A  0E00               	movlw	0
  6101  00156C  2250               	addwfc	(identifier@tracker+1)^0,f,c
  6102  00156E                     l77:
  6103                           
  6104                           ;color.c: 224:         if (blueVals.B>60){tracker+=(1<<8);}
  6105  00156E  BE4C               	btfsc	(identifier@blueVals+5)^0,7,c
  6106  001570  EFC3  F00A         	goto	u2511
  6107  001574  504C               	movf	(identifier@blueVals+5)^0,w,c
  6108  001576  E109               	bnz	u2510
  6109  001578  0E3D               	movlw	61
  6110  00157A  5C4B               	subwf	(identifier@blueVals+4)^0,w,c
  6111  00157C  A0D8               	btfss	status,0,c
  6112  00157E  EFC3  F00A         	goto	u2511
  6113  001582  EFC5  F00A         	goto	u2510
  6114  001586                     u2511:
  6115  001586  EFC7  F00A         	goto	l78
  6116  00158A                     u2510:
  6117  00158A  0E01               	movlw	1
  6118  00158C  2650               	addwf	(identifier@tracker+1)^0,f,c
  6119  00158E                     l78:
  6120                           
  6121                           ;color.c: 225:         if (blueVals.B>50){tracker+=(1<<9);}
  6122  00158E  BE4C               	btfsc	(identifier@blueVals+5)^0,7,c
  6123  001590  EFD3  F00A         	goto	u2521
  6124  001594  504C               	movf	(identifier@blueVals+5)^0,w,c
  6125  001596  E109               	bnz	u2520
  6126  001598  0E33               	movlw	51
  6127  00159A  5C4B               	subwf	(identifier@blueVals+4)^0,w,c
  6128  00159C  A0D8               	btfss	status,0,c
  6129  00159E  EFD3  F00A         	goto	u2521
  6130  0015A2  EFD5  F00A         	goto	u2520
  6131  0015A6                     u2521:
  6132  0015A6  EFD7  F00A         	goto	l79
  6133  0015AA                     u2520:
  6134  0015AA  0E02               	movlw	2
  6135  0015AC  2650               	addwf	(identifier@tracker+1)^0,f,c
  6136  0015AE                     l79:
  6137                           
  6138                           ;color.c: 226:         if (vals.C<950){tracker+=(1<<10);}
  6139  0015AE  BE46               	btfsc	(identifier@vals+7)^0,7,c
  6140  0015B0  EFE5  F00A         	goto	u2530
  6141  0015B4  0EB6               	movlw	182
  6142  0015B6  5C45               	subwf	(identifier@vals+6)^0,w,c
  6143  0015B8  0E03               	movlw	3
  6144  0015BA  5846               	subwfb	(identifier@vals+7)^0,w,c
  6145  0015BC  B0D8               	btfsc	status,0,c
  6146  0015BE  EFE3  F00A         	goto	u2531
  6147  0015C2  EFE5  F00A         	goto	u2530
  6148  0015C6                     u2531:
  6149  0015C6  EFE7  F00A         	goto	l80
  6150  0015CA                     u2530:
  6151  0015CA  0E04               	movlw	4
  6152  0015CC  2650               	addwf	(identifier@tracker+1)^0,f,c
  6153  0015CE                     l80:
  6154                           
  6155                           ;color.c: 229:         if ((tracker&0b00101001101) == 0b00100000000){color_number = 2;}
  6156  0015CE  0E4D               	movlw	77
  6157  0015D0  6E2A               	movwf	??_identifier^0,c
  6158  0015D2  0E01               	movlw	1
  6159  0015D4  6E2B               	movwf	(??_identifier+1)^0,c
  6160  0015D6  C04F  F02C         	movff	identifier@tracker,??_identifier+2
  6161  0015DA  C050  F02D         	movff	identifier@tracker+1,??_identifier+3
  6162  0015DE  502A               	movf	??_identifier^0,w,c
  6163  0015E0  162C               	andwf	(??_identifier+2)^0,f,c
  6164  0015E2  502B               	movf	(??_identifier+1)^0,w,c
  6165  0015E4  162D               	andwf	(??_identifier+3)^0,f,c
  6166  0015E6  042D               	decf	(??_identifier+3)^0,w,c
  6167  0015E8  102C               	iorwf	(??_identifier+2)^0,w,c
  6168  0015EA  A4D8               	btfss	status,2,c
  6169  0015EC  EFFA  F00A         	goto	u2541
  6170  0015F0  EFFC  F00A         	goto	u2540
  6171  0015F4                     u2541:
  6172  0015F4  EFFE  F00A         	goto	l2951
  6173  0015F8                     u2540:
  6174  0015F8  0E02               	movlw	2
  6175  0015FA  6E2E               	movwf	identifier@color_number^0,c
  6176  0015FC                     l2951:
  6177                           
  6178                           ;color.c: 230:         if ((tracker&0b11111111100) == 0b11110000100){color_number = 3;}
  6179  0015FC  0EFC               	movlw	252
  6180  0015FE  6E2A               	movwf	??_identifier^0,c
  6181  001600  0E07               	movlw	7
  6182  001602  6E2B               	movwf	(??_identifier+1)^0,c
  6183  001604  C04F  F02C         	movff	identifier@tracker,??_identifier+2
  6184  001608  C050  F02D         	movff	identifier@tracker+1,??_identifier+3
  6185  00160C  502A               	movf	??_identifier^0,w,c
  6186  00160E  162C               	andwf	(??_identifier+2)^0,f,c
  6187  001610  502B               	movf	(??_identifier+1)^0,w,c
  6188  001612  162D               	andwf	(??_identifier+3)^0,f,c
  6189  001614  0E84               	movlw	132
  6190  001616  182C               	xorwf	(??_identifier+2)^0,w,c
  6191  001618  E107               	bnz	u2551
  6192  00161A  0E07               	movlw	7
  6193  00161C  182D               	xorwf	(??_identifier+3)^0,w,c
  6194  00161E  A4D8               	btfss	status,2,c
  6195  001620  EF14  F00B         	goto	u2551
  6196  001624  EF16  F00B         	goto	u2550
  6197  001628                     u2551:
  6198  001628  EF18  F00B         	goto	l2955
  6199  00162C                     u2550:
  6200  00162C  0E03               	movlw	3
  6201  00162E  6E2E               	movwf	identifier@color_number^0,c
  6202  001630                     l2955:
  6203                           
  6204                           ;color.c: 231:         if ((tracker&0b10111111101) == 0b00110010100){color_number = 4;}
  6205  001630  0EFD               	movlw	253
  6206  001632  6E2A               	movwf	??_identifier^0,c
  6207  001634  0E05               	movlw	5
  6208  001636  6E2B               	movwf	(??_identifier+1)^0,c
  6209  001638  C04F  F02C         	movff	identifier@tracker,??_identifier+2
  6210  00163C  C050  F02D         	movff	identifier@tracker+1,??_identifier+3
  6211  001640  502A               	movf	??_identifier^0,w,c
  6212  001642  162C               	andwf	(??_identifier+2)^0,f,c
  6213  001644  502B               	movf	(??_identifier+1)^0,w,c
  6214  001646  162D               	andwf	(??_identifier+3)^0,f,c
  6215  001648  0E94               	movlw	148
  6216  00164A  182C               	xorwf	(??_identifier+2)^0,w,c
  6217  00164C  E106               	bnz	u2561
  6218  00164E  042D               	decf	(??_identifier+3)^0,w,c
  6219  001650  A4D8               	btfss	status,2,c
  6220  001652  EF2D  F00B         	goto	u2561
  6221  001656  EF2F  F00B         	goto	u2560
  6222  00165A                     u2561:
  6223  00165A  EF31  F00B         	goto	l2959
  6224  00165E                     u2560:
  6225  00165E  0E04               	movlw	4
  6226  001660  6E2E               	movwf	identifier@color_number^0,c
  6227  001662                     l2959:
  6228                           
  6229                           ;color.c: 232:         if ((tracker&0b10101011101) == 0b10000000000){color_number = 5;}
  6230  001662  0E5D               	movlw	93
  6231  001664  6E2A               	movwf	??_identifier^0,c
  6232  001666  0E05               	movlw	5
  6233  001668  6E2B               	movwf	(??_identifier+1)^0,c
  6234  00166A  C04F  F02C         	movff	identifier@tracker,??_identifier+2
  6235  00166E  C050  F02D         	movff	identifier@tracker+1,??_identifier+3
  6236  001672  502A               	movf	??_identifier^0,w,c
  6237  001674  162C               	andwf	(??_identifier+2)^0,f,c
  6238  001676  502B               	movf	(??_identifier+1)^0,w,c
  6239  001678  162D               	andwf	(??_identifier+3)^0,f,c
  6240  00167A  0E04               	movlw	4
  6241  00167C  182D               	xorwf	(??_identifier+3)^0,w,c
  6242  00167E  102C               	iorwf	(??_identifier+2)^0,w,c
  6243  001680  A4D8               	btfss	status,2,c
  6244  001682  EF45  F00B         	goto	u2571
  6245  001686  EF47  F00B         	goto	u2570
  6246  00168A                     u2571:
  6247  00168A  EF49  F00B         	goto	l2963
  6248  00168E                     u2570:
  6249  00168E  0E05               	movlw	5
  6250  001690  6E2E               	movwf	identifier@color_number^0,c
  6251  001692                     l2963:
  6252                           
  6253                           ;color.c: 233:         if ((tracker&0b10111101101) == 0b00010000000){color_number = 6;}
  6254  001692  0EED               	movlw	237
  6255  001694  6E2A               	movwf	??_identifier^0,c
  6256  001696  0E05               	movlw	5
  6257  001698  6E2B               	movwf	(??_identifier+1)^0,c
  6258  00169A  C04F  F02C         	movff	identifier@tracker,??_identifier+2
  6259  00169E  C050  F02D         	movff	identifier@tracker+1,??_identifier+3
  6260  0016A2  502A               	movf	??_identifier^0,w,c
  6261  0016A4  162C               	andwf	(??_identifier+2)^0,f,c
  6262  0016A6  502B               	movf	(??_identifier+1)^0,w,c
  6263  0016A8  162D               	andwf	(??_identifier+3)^0,f,c
  6264  0016AA  0E80               	movlw	128
  6265  0016AC  182C               	xorwf	(??_identifier+2)^0,w,c
  6266  0016AE  102D               	iorwf	(??_identifier+3)^0,w,c
  6267  0016B0  A4D8               	btfss	status,2,c
  6268  0016B2  EF5D  F00B         	goto	u2581
  6269  0016B6  EF5F  F00B         	goto	u2580
  6270  0016BA                     u2581:
  6271  0016BA  EF61  F00B         	goto	l2967
  6272  0016BE                     u2580:
  6273  0016BE  0E06               	movlw	6
  6274  0016C0  6E2E               	movwf	identifier@color_number^0,c
  6275  0016C2                     l2967:
  6276                           
  6277                           ;color.c: 234:         if ((tracker&0b00111001101) == 0b00000000000){color_number = 7;}
  6278  0016C2  0ECD               	movlw	205
  6279  0016C4  6E2A               	movwf	??_identifier^0,c
  6280  0016C6  0E01               	movlw	1
  6281  0016C8  6E2B               	movwf	(??_identifier+1)^0,c
  6282  0016CA  C04F  F02C         	movff	identifier@tracker,??_identifier+2
  6283  0016CE  C050  F02D         	movff	identifier@tracker+1,??_identifier+3
  6284  0016D2  502A               	movf	??_identifier^0,w,c
  6285  0016D4  162C               	andwf	(??_identifier+2)^0,f,c
  6286  0016D6  502B               	movf	(??_identifier+1)^0,w,c
  6287  0016D8  162D               	andwf	(??_identifier+3)^0,f,c
  6288  0016DA  502C               	movf	(??_identifier+2)^0,w,c
  6289  0016DC  102D               	iorwf	(??_identifier+3)^0,w,c
  6290  0016DE  A4D8               	btfss	status,2,c
  6291  0016E0  EF74  F00B         	goto	u2591
  6292  0016E4  EF76  F00B         	goto	u2590
  6293  0016E8                     u2591:
  6294  0016E8  EF78  F00B         	goto	l2971
  6295  0016EC                     u2590:
  6296  0016EC  0E07               	movlw	7
  6297  0016EE  6E2E               	movwf	identifier@color_number^0,c
  6298  0016F0                     l2971:
  6299                           
  6300                           ;color.c: 235:         if ((tracker&0b00101101101) == 0b00000100000){color_number = 8;}
  6301  0016F0  0E6D               	movlw	109
  6302  0016F2  6E2A               	movwf	??_identifier^0,c
  6303  0016F4  0E01               	movlw	1
  6304  0016F6  6E2B               	movwf	(??_identifier+1)^0,c
  6305  0016F8  C04F  F02C         	movff	identifier@tracker,??_identifier+2
  6306  0016FC  C050  F02D         	movff	identifier@tracker+1,??_identifier+3
  6307  001700  502A               	movf	??_identifier^0,w,c
  6308  001702  162C               	andwf	(??_identifier+2)^0,f,c
  6309  001704  502B               	movf	(??_identifier+1)^0,w,c
  6310  001706  162D               	andwf	(??_identifier+3)^0,f,c
  6311  001708  0E20               	movlw	32
  6312  00170A  182C               	xorwf	(??_identifier+2)^0,w,c
  6313  00170C  102D               	iorwf	(??_identifier+3)^0,w,c
  6314  00170E  A4D8               	btfss	status,2,c
  6315  001710  EF8C  F00B         	goto	u2601
  6316  001714  EF8E  F00B         	goto	u2600
  6317  001718                     u2601:
  6318  001718  EF90  F00B         	goto	l2975
  6319  00171C                     u2600:
  6320  00171C  0E08               	movlw	8
  6321  00171E  6E2E               	movwf	identifier@color_number^0,c
  6322  001720                     l2975:
  6323                           
  6324                           ;color.c: 236:         if ((tracker&0b01111101101) == 0b01001100000){color_number = 9;}
  6325  001720  0EED               	movlw	237
  6326  001722  6E2A               	movwf	??_identifier^0,c
  6327  001724  0E03               	movlw	3
  6328  001726  6E2B               	movwf	(??_identifier+1)^0,c
  6329  001728  C04F  F02C         	movff	identifier@tracker,??_identifier+2
  6330  00172C  C050  F02D         	movff	identifier@tracker+1,??_identifier+3
  6331  001730  502A               	movf	??_identifier^0,w,c
  6332  001732  162C               	andwf	(??_identifier+2)^0,f,c
  6333  001734  502B               	movf	(??_identifier+1)^0,w,c
  6334  001736  162D               	andwf	(??_identifier+3)^0,f,c
  6335  001738  0E60               	movlw	96
  6336  00173A  182C               	xorwf	(??_identifier+2)^0,w,c
  6337  00173C  E107               	bnz	u2611
  6338  00173E  0E02               	movlw	2
  6339  001740  182D               	xorwf	(??_identifier+3)^0,w,c
  6340  001742  A4D8               	btfss	status,2,c
  6341  001744  EFA6  F00B         	goto	u2611
  6342  001748  EFA8  F00B         	goto	u2610
  6343  00174C                     u2611:
  6344  00174C  EFAA  F00B         	goto	l2979
  6345  001750                     u2610:
  6346  001750  0E09               	movlw	9
  6347  001752  6E2E               	movwf	identifier@color_number^0,c
  6348  001754                     l2979:
  6349                           
  6350                           ;color.c: 237:         if ((tracker&0b01011101101) == 0b01011100000){color_number = 10;}
  6351  001754  0EED               	movlw	237
  6352  001756  6E2A               	movwf	??_identifier^0,c
  6353  001758  0E02               	movlw	2
  6354  00175A  6E2B               	movwf	(??_identifier+1)^0,c
  6355  00175C  C04F  F02C         	movff	identifier@tracker,??_identifier+2
  6356  001760  C050  F02D         	movff	identifier@tracker+1,??_identifier+3
  6357  001764  502A               	movf	??_identifier^0,w,c
  6358  001766  162C               	andwf	(??_identifier+2)^0,f,c
  6359  001768  502B               	movf	(??_identifier+1)^0,w,c
  6360  00176A  162D               	andwf	(??_identifier+3)^0,f,c
  6361  00176C  0EE0               	movlw	224
  6362  00176E  182C               	xorwf	(??_identifier+2)^0,w,c
  6363  001770  E107               	bnz	u2621
  6364  001772  0E02               	movlw	2
  6365  001774  182D               	xorwf	(??_identifier+3)^0,w,c
  6366  001776  A4D8               	btfss	status,2,c
  6367  001778  EFC0  F00B         	goto	u2621
  6368  00177C  EFC2  F00B         	goto	u2620
  6369  001780                     u2621:
  6370  001780  EFC4  F00B         	goto	l69
  6371  001784                     u2620:
  6372  001784  0E0A               	movlw	10
  6373  001786  6E2E               	movwf	identifier@color_number^0,c
  6374  001788                     l69:
  6375                           
  6376                           ;color.c: 300:     return color_number;
  6377  001788  502E               	movf	identifier@color_number^0,w,c
  6378  00178A  0012               	return		;funcret
  6379  00178C                     __end_of_identifier:
  6380                           	callstack 0
  6381                           
  6382 ;; *************** function _shuffle *****************
  6383 ;; Defined at:
  6384 ;;		line 277 in file "dc_motor.c"
  6385 ;; Parameters:    Size  Location     Type
  6386 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  6387 ;;		 -> main@motorL(8), 
  6388 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  6389 ;;		 -> main@motorR(8), 
  6390 ;;  dist            1   23[COMRAM] unsigned char 
  6391 ;;  dir             1   24[COMRAM] unsigned char 
  6392 ;; Auto vars:     Size  Location     Type
  6393 ;;  pwr             2   27[COMRAM] unsigned int 
  6394 ;; Return value:  Size  Location     Type
  6395 ;;                  1    wreg      void 
  6396 ;; Registers used:
  6397 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6398 ;; Tracked objects:
  6399 ;;		On entry : 0/0
  6400 ;;		On exit  : 0/0
  6401 ;;		Unchanged: 0/0
  6402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6403 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6404 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6405 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6406 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6407 ;;Total ram usage:       10 bytes
  6408 ;; Hardware stack levels used:    1
  6409 ;; Hardware stack levels required when called:    3
  6410 ;; This function calls:
  6411 ;;		___wmul
  6412 ;;		_setMotorPWM
  6413 ;; This function is called by:
  6414 ;;		_identifier
  6415 ;;		_main
  6416 ;; This function uses a non-reentrant model
  6417 ;;
  6418                           
  6419                           	psect	text31
  6420  002710                     __ptext31:
  6421                           	callstack 0
  6422  002710                     _shuffle:
  6423                           	callstack 27
  6424  002710                     
  6425                           ;dc_motor.c: 277: void shuffle(struct DC_motor *mL, struct DC_motor *mR, char dist, char
      +                           dir);dc_motor.c: 278: {;dc_motor.c: 279:     mL->direction=dir;
  6426  002710  EE20 F001          	lfsr	2,1
  6427  002714  5014               	movf	shuffle@mL^0,w,c
  6428  002716  26D9               	addwf	fsr2l,f,c
  6429  002718  5015               	movf	(shuffle@mL+1)^0,w,c
  6430  00271A  22DA               	addwfc	fsr2h,f,c
  6431  00271C  C019  FFDF         	movff	shuffle@dir,indf2
  6432                           
  6433                           ;dc_motor.c: 280:     mR->direction=dir;
  6434  002720  EE20 F001          	lfsr	2,1
  6435  002724  5016               	movf	shuffle@mR^0,w,c
  6436  002726  26D9               	addwf	fsr2l,f,c
  6437  002728  5017               	movf	(shuffle@mR+1)^0,w,c
  6438  00272A  22DA               	addwfc	fsr2h,f,c
  6439  00272C  C019  FFDF         	movff	shuffle@dir,indf2
  6440  002730                     
  6441                           ;dc_motor.c: 282:     unsigned int pwr = 50 - 40 * dir;
  6442  002730  C019  F005         	movff	shuffle@dir,___wmul@multiplier
  6443  002734  6A06               	clrf	(___wmul@multiplier+1)^0,c
  6444  002736  0EFF               	movlw	255
  6445  002738  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  6446  00273A  0ED8               	movlw	216
  6447  00273C  6E07               	movwf	___wmul@multiplicand^0,c
  6448  00273E  EC10  F01A         	call	___wmul	;wreg free
  6449  002742  0E32               	movlw	50
  6450  002744  2405               	addwf	?___wmul^0,w,c
  6451  002746  6E1C               	movwf	shuffle@pwr^0,c
  6452  002748  0E00               	movlw	0
  6453  00274A  2006               	addwfc	(?___wmul+1)^0,w,c
  6454  00274C  6E1D               	movwf	(shuffle@pwr+1)^0,c
  6455                           
  6456                           ;dc_motor.c: 284:     while (mL->power<(pwr))
  6457  00274E  EFC7  F013         	goto	l261
  6458  002752                     l2819:
  6459                           
  6460                           ;dc_motor.c: 285:     {;dc_motor.c: 286:         mL->power++;
  6461  002752  C014  FFD9         	movff	shuffle@mL,fsr2l
  6462  002756  C015  FFDA         	movff	shuffle@mL+1,fsr2h
  6463  00275A  2ADF               	incf	indf2,f,c
  6464                           
  6465                           ;dc_motor.c: 287:         mR->power++;
  6466  00275C  C016  FFD9         	movff	shuffle@mR,fsr2l
  6467  002760  C017  FFDA         	movff	shuffle@mR+1,fsr2h
  6468  002764  2ADF               	incf	indf2,f,c
  6469  002766                     
  6470                           ;dc_motor.c: 288:         setMotorPWM(mL);
  6471  002766  C014  F009         	movff	shuffle@mL,setMotorPWM@m
  6472  00276A  C015  F00A         	movff	shuffle@mL+1,setMotorPWM@m+1
  6473  00276E  EC95  F00F         	call	_setMotorPWM	;wreg free
  6474  002772                     
  6475                           ;dc_motor.c: 289:         setMotorPWM(mR);
  6476  002772  C016  F009         	movff	shuffle@mR,setMotorPWM@m
  6477  002776  C017  F00A         	movff	shuffle@mR+1,setMotorPWM@m+1
  6478  00277A  EC95  F00F         	call	_setMotorPWM	;wreg free
  6479  00277E                     
  6480                           ;dc_motor.c: 290:         _delay((unsigned long)((5)*(64000000/4000.0)));
  6481  00277E  0E68               	movlw	104
  6482  002780  6E1A               	movwf	??_shuffle^0,c
  6483  002782  0EE4               	movlw	228
  6484  002784                     u3217:
  6485  002784  2EE8               	decfsz	wreg,f,c
  6486  002786  D7FE               	bra	u3217
  6487  002788  2E1A               	decfsz	??_shuffle^0,f,c
  6488  00278A  D7FC               	bra	u3217
  6489  00278C  D000               	nop2	
  6490  00278E                     l261:
  6491                           
  6492                           ;dc_motor.c: 284:     while (mL->power<(pwr))
  6493  00278E  C014  FFD9         	movff	shuffle@mL,fsr2l
  6494  002792  C015  FFDA         	movff	shuffle@mL+1,fsr2h
  6495  002796  50DF               	movf	indf2,w,c
  6496  002798  6E1A               	movwf	??_shuffle^0,c
  6497  00279A  6A1B               	clrf	(??_shuffle+1)^0,c
  6498  00279C  501C               	movf	shuffle@pwr^0,w,c
  6499  00279E  5C1A               	subwf	??_shuffle^0,w,c
  6500  0027A0  501D               	movf	(shuffle@pwr+1)^0,w,c
  6501  0027A2  581B               	subwfb	(??_shuffle+1)^0,w,c
  6502  0027A4  A0D8               	btfss	status,0,c
  6503  0027A6  EFD7  F013         	goto	u2211
  6504  0027AA  EFD9  F013         	goto	u2210
  6505  0027AE                     u2211:
  6506  0027AE  EFA9  F013         	goto	l2819
  6507  0027B2                     u2210:
  6508  0027B2  EFE8  F013         	goto	l2831
  6509  0027B6                     l2827:
  6510                           
  6511                           ;dc_motor.c: 293:         _delay((unsigned long)((200)*(64000000/4000.0)));
  6512  0027B6  0E11               	movlw	17
  6513  0027B8  6E1B               	movwf	(??_shuffle+1)^0,c
  6514  0027BA  0E3C               	movlw	60
  6515  0027BC  6E1A               	movwf	??_shuffle^0,c
  6516  0027BE  0ECB               	movlw	203
  6517  0027C0                     u3227:
  6518  0027C0  2EE8               	decfsz	wreg,f,c
  6519  0027C2  D7FE               	bra	u3227
  6520  0027C4  2E1A               	decfsz	??_shuffle^0,f,c
  6521  0027C6  D7FC               	bra	u3227
  6522  0027C8  2E1B               	decfsz	(??_shuffle+1)^0,f,c
  6523  0027CA  D7FA               	bra	u3227
  6524  0027CC  F000               	nop	
  6525  0027CE                     
  6526                           ;dc_motor.c: 294:         dist--;
  6527  0027CE  0618               	decf	shuffle@dist^0,f,c
  6528  0027D0                     l2831:
  6529                           
  6530                           ;dc_motor.c: 292:     while (dist>0){
  6531  0027D0  5018               	movf	shuffle@dist^0,w,c
  6532  0027D2  A4D8               	btfss	status,2,c
  6533  0027D4  EFEE  F013         	goto	u2221
  6534  0027D8  EFF0  F013         	goto	u2220
  6535  0027DC                     u2221:
  6536  0027DC  EFDB  F013         	goto	l2827
  6537  0027E0                     u2220:
  6538  0027E0  EF10  F014         	goto	l2841
  6539  0027E4                     l2833:
  6540                           
  6541                           ;dc_motor.c: 297:         mL->power--;
  6542  0027E4  C014  FFD9         	movff	shuffle@mL,fsr2l
  6543  0027E8  C015  FFDA         	movff	shuffle@mL+1,fsr2h
  6544  0027EC  06DF               	decf	indf2,f,c
  6545                           
  6546                           ;dc_motor.c: 298:         mR->power--;
  6547  0027EE  C016  FFD9         	movff	shuffle@mR,fsr2l
  6548  0027F2  C017  FFDA         	movff	shuffle@mR+1,fsr2h
  6549  0027F6  06DF               	decf	indf2,f,c
  6550  0027F8                     
  6551                           ;dc_motor.c: 299:         setMotorPWM(mL);
  6552  0027F8  C014  F009         	movff	shuffle@mL,setMotorPWM@m
  6553  0027FC  C015  F00A         	movff	shuffle@mL+1,setMotorPWM@m+1
  6554  002800  EC95  F00F         	call	_setMotorPWM	;wreg free
  6555  002804                     
  6556                           ;dc_motor.c: 300:         setMotorPWM(mR);
  6557  002804  C016  F009         	movff	shuffle@mR,setMotorPWM@m
  6558  002808  C017  F00A         	movff	shuffle@mR+1,setMotorPWM@m+1
  6559  00280C  EC95  F00F         	call	_setMotorPWM	;wreg free
  6560  002810                     
  6561                           ;dc_motor.c: 301:         _delay((unsigned long)((5)*(64000000/4000.0)));
  6562  002810  0E68               	movlw	104
  6563  002812  6E1A               	movwf	??_shuffle^0,c
  6564  002814  0EE4               	movlw	228
  6565  002816                     u3237:
  6566  002816  2EE8               	decfsz	wreg,f,c
  6567  002818  D7FE               	bra	u3237
  6568  00281A  2E1A               	decfsz	??_shuffle^0,f,c
  6569  00281C  D7FC               	bra	u3237
  6570  00281E  D000               	nop2	
  6571  002820                     l2841:
  6572                           
  6573                           ;dc_motor.c: 296:     while (mL->power>0){
  6574  002820  C014  FFD9         	movff	shuffle@mL,fsr2l
  6575  002824  C015  FFDA         	movff	shuffle@mL+1,fsr2h
  6576  002828  50DF               	movf	indf2,w,c
  6577  00282A  A4D8               	btfss	status,2,c
  6578  00282C  EF1A  F014         	goto	u2231
  6579  002830  EF1C  F014         	goto	u2230
  6580  002834                     u2231:
  6581  002834  EFF2  F013         	goto	l2833
  6582  002838                     u2230:
  6583  002838  0012               	return		;funcret
  6584  00283A                     __end_of_shuffle:
  6585                           	callstack 0
  6586                           
  6587 ;; *************** function ___wmul *****************
  6588 ;; Defined at:
  6589 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\Umul16.c"
  6590 ;; Parameters:    Size  Location     Type
  6591 ;;  multiplier      2    4[COMRAM] unsigned int 
  6592 ;;  multiplicand    2    6[COMRAM] unsigned int 
  6593 ;; Auto vars:     Size  Location     Type
  6594 ;;  product         2    8[COMRAM] unsigned int 
  6595 ;; Return value:  Size  Location     Type
  6596 ;;                  2    4[COMRAM] unsigned int 
  6597 ;; Registers used:
  6598 ;;		wreg, status,2, status,0, prodl, prodh
  6599 ;; Tracked objects:
  6600 ;;		On entry : 0/0
  6601 ;;		On exit  : 0/0
  6602 ;;		Unchanged: 0/0
  6603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6604 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6605 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6607 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6608 ;;Total ram usage:        6 bytes
  6609 ;; Hardware stack levels used:    1
  6610 ;; Hardware stack levels required when called:    1
  6611 ;; This function calls:
  6612 ;;		Nothing
  6613 ;; This function is called by:
  6614 ;;		_setTurnDelay
  6615 ;;		_shuffle
  6616 ;;		_main
  6617 ;; This function uses a non-reentrant model
  6618 ;;
  6619                           
  6620                           	psect	text32
  6621  003420                     __ptext32:
  6622                           	callstack 0
  6623  003420                     ___wmul:
  6624                           	callstack 28
  6625  003420  5005               	movf	___wmul@multiplier^0,w,c
  6626  003422  0207               	mulwf	___wmul@multiplicand^0,c
  6627  003424  CFF3 F009          	movff	prodl,___wmul@product
  6628  003428  CFF4 F00A          	movff	prodh,___wmul@product+1
  6629  00342C  5005               	movf	___wmul@multiplier^0,w,c
  6630  00342E  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  6631  003430  50F3               	movf	243,w,c
  6632  003432  260A               	addwf	(___wmul@product+1)^0,f,c
  6633  003434  5006               	movf	(___wmul@multiplier+1)^0,w,c
  6634  003436  0207               	mulwf	___wmul@multiplicand^0,c
  6635  003438  50F3               	movf	243,w,c
  6636  00343A  260A               	addwf	(___wmul@product+1)^0,f,c
  6637  00343C  C009  F005         	movff	___wmul@product,?___wmul
  6638  003440  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  6639  003444  0012               	return		;funcret
  6640  003446                     __end_of___wmul:
  6641                           	callstack 0
  6642                           
  6643 ;; *************** function _scan *****************
  6644 ;; Defined at:
  6645 ;;		line 141 in file "color.c"
  6646 ;; Parameters:    Size  Location     Type
  6647 ;;  C               2   14[COMRAM] PTR struct RGBC_val
  6648 ;;		 -> main@ambientC(8), identifier@vals(8), 
  6649 ;;  R               2   16[COMRAM] PTR struct RGBC_val
  6650 ;;		 -> main@ambientR(8), identifier@redVals(8), 
  6651 ;;  G               2   18[COMRAM] PTR struct RGBC_val
  6652 ;;		 -> main@ambientG(8), identifier@greenVals(8), 
  6653 ;;  B               2   20[COMRAM] PTR struct RGBC_val
  6654 ;;		 -> main@ambientB(8), identifier@blueVals(8), 
  6655 ;; Auto vars:     Size  Location     Type
  6656 ;;		None
  6657 ;; Return value:  Size  Location     Type
  6658 ;;                  1    wreg      void 
  6659 ;; Registers used:
  6660 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6661 ;; Tracked objects:
  6662 ;;		On entry : 0/0
  6663 ;;		On exit  : 0/0
  6664 ;;		Unchanged: 0/0
  6665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6666 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6668 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6669 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6670 ;;Total ram usage:       10 bytes
  6671 ;; Hardware stack levels used:    1
  6672 ;; Hardware stack levels required when called:    5
  6673 ;; This function calls:
  6674 ;;		_color_read_RGBC
  6675 ;;		_toggleB
  6676 ;;		_toggleG
  6677 ;;		_toggleR
  6678 ;; This function is called by:
  6679 ;;		_identifier
  6680 ;;		_main
  6681 ;; This function uses a non-reentrant model
  6682 ;;
  6683                           
  6684                           	psect	text33
  6685  002CB4                     __ptext33:
  6686                           	callstack 0
  6687  002CB4                     _scan:
  6688                           	callstack 25
  6689  002CB4                     
  6690                           ;color.c: 141: void scan(struct RGBC_val *C,struct RGBC_val *R,struct RGBC_val *G,struct
      +                           RGBC_val *B);color.c: 142: {;color.c: 143:     _delay((unsigned long)((200)*(64000000/4
      +                          000.0)));
  6691  002CB4  0E11               	movlw	17
  6692  002CB6  6E18               	movwf	(??_scan+1)^0,c
  6693  002CB8  0E3C               	movlw	60
  6694  002CBA  6E17               	movwf	??_scan^0,c
  6695  002CBC  0ECB               	movlw	203
  6696  002CBE                     u3247:
  6697  002CBE  2EE8               	decfsz	wreg,f,c
  6698  002CC0  D7FE               	bra	u3247
  6699  002CC2  2E17               	decfsz	??_scan^0,f,c
  6700  002CC4  D7FC               	bra	u3247
  6701  002CC6  2E18               	decfsz	(??_scan+1)^0,f,c
  6702  002CC8  D7FA               	bra	u3247
  6703  002CCA  F000               	nop	
  6704  002CCC                     
  6705                           ;color.c: 144:     color_read_RGBC(C);
  6706  002CCC  C00F  F00D         	movff	scan@C,color_read_RGBC@RGBC
  6707  002CD0  C010  F00E         	movff	scan@C+1,color_read_RGBC@RGBC+1
  6708  002CD4  EC08  F018         	call	_color_read_RGBC	;wreg free
  6709  002CD8                     
  6710                           ;color.c: 147:     toggleG();
  6711  002CD8  EC48  F01A         	call	_toggleG	;wreg free
  6712  002CDC                     
  6713                           ;color.c: 148:     toggleB();
  6714  002CDC  EC23  F01A         	call	_toggleB	;wreg free
  6715  002CE0                     
  6716                           ;color.c: 149:     _delay((unsigned long)((200)*(64000000/4000.0)));
  6717  002CE0  0E11               	movlw	17
  6718  002CE2  6E18               	movwf	(??_scan+1)^0,c
  6719  002CE4  0E3C               	movlw	60
  6720  002CE6  6E17               	movwf	??_scan^0,c
  6721  002CE8  0ECB               	movlw	203
  6722  002CEA                     u3257:
  6723  002CEA  2EE8               	decfsz	wreg,f,c
  6724  002CEC  D7FE               	bra	u3257
  6725  002CEE  2E17               	decfsz	??_scan^0,f,c
  6726  002CF0  D7FC               	bra	u3257
  6727  002CF2  2E18               	decfsz	(??_scan+1)^0,f,c
  6728  002CF4  D7FA               	bra	u3257
  6729  002CF6  F000               	nop	
  6730                           
  6731                           ;color.c: 150:     color_read_RGBC(R);
  6732  002CF8  C011  F00D         	movff	scan@R,color_read_RGBC@RGBC
  6733  002CFC  C012  F00E         	movff	scan@R+1,color_read_RGBC@RGBC+1
  6734  002D00  EC08  F018         	call	_color_read_RGBC	;wreg free
  6735  002D04                     
  6736                           ;color.c: 153:     toggleG();
  6737  002D04  EC48  F01A         	call	_toggleG	;wreg free
  6738  002D08                     
  6739                           ;color.c: 154:     toggleR();
  6740  002D08  EC9C  F01A         	call	_toggleR	;wreg free
  6741  002D0C                     
  6742                           ;color.c: 155:     _delay((unsigned long)((200)*(64000000/4000.0)));
  6743  002D0C  0E11               	movlw	17
  6744  002D0E  6E18               	movwf	(??_scan+1)^0,c
  6745  002D10  0E3C               	movlw	60
  6746  002D12  6E17               	movwf	??_scan^0,c
  6747  002D14  0ECB               	movlw	203
  6748  002D16                     u3267:
  6749  002D16  2EE8               	decfsz	wreg,f,c
  6750  002D18  D7FE               	bra	u3267
  6751  002D1A  2E17               	decfsz	??_scan^0,f,c
  6752  002D1C  D7FC               	bra	u3267
  6753  002D1E  2E18               	decfsz	(??_scan+1)^0,f,c
  6754  002D20  D7FA               	bra	u3267
  6755  002D22  F000               	nop	
  6756  002D24                     
  6757                           ;color.c: 156:     color_read_RGBC(G);
  6758  002D24  C013  F00D         	movff	scan@G,color_read_RGBC@RGBC
  6759  002D28  C014  F00E         	movff	scan@G+1,color_read_RGBC@RGBC+1
  6760  002D2C  EC08  F018         	call	_color_read_RGBC	;wreg free
  6761  002D30                     
  6762                           ;color.c: 159:     toggleG();
  6763  002D30  EC48  F01A         	call	_toggleG	;wreg free
  6764  002D34                     
  6765                           ;color.c: 160:     toggleB();
  6766  002D34  EC23  F01A         	call	_toggleB	;wreg free
  6767                           
  6768                           ;color.c: 161:     _delay((unsigned long)((200)*(64000000/4000.0)));
  6769  002D38  0E11               	movlw	17
  6770  002D3A  6E18               	movwf	(??_scan+1)^0,c
  6771  002D3C  0E3C               	movlw	60
  6772  002D3E  6E17               	movwf	??_scan^0,c
  6773  002D40  0ECB               	movlw	203
  6774  002D42                     u3277:
  6775  002D42  2EE8               	decfsz	wreg,f,c
  6776  002D44  D7FE               	bra	u3277
  6777  002D46  2E17               	decfsz	??_scan^0,f,c
  6778  002D48  D7FC               	bra	u3277
  6779  002D4A  2E18               	decfsz	(??_scan+1)^0,f,c
  6780  002D4C  D7FA               	bra	u3277
  6781  002D4E  F000               	nop	
  6782  002D50                     
  6783                           ;color.c: 162:     color_read_RGBC(B);
  6784  002D50  C015  F00D         	movff	scan@B,color_read_RGBC@RGBC
  6785  002D54  C016  F00E         	movff	scan@B+1,color_read_RGBC@RGBC+1
  6786  002D58  EC08  F018         	call	_color_read_RGBC	;wreg free
  6787  002D5C                     
  6788                           ;color.c: 163:     toggleG();
  6789  002D5C  EC48  F01A         	call	_toggleG	;wreg free
  6790  002D60                     
  6791                           ;color.c: 164:     toggleR();
  6792  002D60  EC9C  F01A         	call	_toggleR	;wreg free
  6793  002D64  0012               	return		;funcret
  6794  002D66                     __end_of_scan:
  6795                           	callstack 0
  6796                           
  6797 ;; *************** function _toggleR *****************
  6798 ;; Defined at:
  6799 ;;		line 42 in file "color.c"
  6800 ;; Parameters:    Size  Location     Type
  6801 ;;		None
  6802 ;; Auto vars:     Size  Location     Type
  6803 ;;		None
  6804 ;; Return value:  Size  Location     Type
  6805 ;;                  1    wreg      void 
  6806 ;; Registers used:
  6807 ;;		wreg, status,2, status,0
  6808 ;; Tracked objects:
  6809 ;;		On entry : 0/0
  6810 ;;		On exit  : 0/0
  6811 ;;		Unchanged: 0/0
  6812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6815 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6816 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6817 ;;Total ram usage:        1 bytes
  6818 ;; Hardware stack levels used:    1
  6819 ;; Hardware stack levels required when called:    1
  6820 ;; This function calls:
  6821 ;;		Nothing
  6822 ;; This function is called by:
  6823 ;;		_scan
  6824 ;; This function uses a non-reentrant model
  6825 ;;
  6826                           
  6827                           	psect	text34
  6828  003538                     __ptext34:
  6829                           	callstack 0
  6830  003538                     _toggleR:
  6831                           	callstack 28
  6832  003538                     
  6833                           ;color.c: 44:     LATGbits.LATG0 = !LATGbits.LATG0;
  6834  003538  A07F               	btfss	127,0,c	;volatile
  6835  00353A  EFA1  F01A         	goto	u2071
  6836  00353E  EFA5  F01A         	goto	u2070
  6837  003542                     u2071:
  6838  003542  6A01               	clrf	??_toggleR^0,c
  6839  003544  2A01               	incf	??_toggleR^0,f,c
  6840  003546  EFA6  F01A         	goto	u2088
  6841  00354A                     u2070:
  6842  00354A  6A01               	clrf	??_toggleR^0,c
  6843  00354C                     u2088:
  6844  00354C  507F               	movf	127,w,c	;volatile
  6845  00354E  1801               	xorwf	??_toggleR^0,w,c
  6846  003550  0BFE               	andlw	-2
  6847  003552  1801               	xorwf	??_toggleR^0,w,c
  6848  003554  6E7F               	movwf	127,c	;volatile
  6849  003556  0012               	return		;funcret
  6850  003558                     __end_of_toggleR:
  6851                           	callstack 0
  6852                           
  6853 ;; *************** function _toggleG *****************
  6854 ;; Defined at:
  6855 ;;		line 47 in file "color.c"
  6856 ;; Parameters:    Size  Location     Type
  6857 ;;		None
  6858 ;; Auto vars:     Size  Location     Type
  6859 ;;		None
  6860 ;; Return value:  Size  Location     Type
  6861 ;;                  1    wreg      void 
  6862 ;; Registers used:
  6863 ;;		wreg, status,2, status,0
  6864 ;; Tracked objects:
  6865 ;;		On entry : 0/0
  6866 ;;		On exit  : 0/0
  6867 ;;		Unchanged: 0/0
  6868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6871 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6872 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6873 ;;Total ram usage:        1 bytes
  6874 ;; Hardware stack levels used:    1
  6875 ;; Hardware stack levels required when called:    1
  6876 ;; This function calls:
  6877 ;;		Nothing
  6878 ;; This function is called by:
  6879 ;;		_scan
  6880 ;; This function uses a non-reentrant model
  6881 ;;
  6882                           
  6883                           	psect	text35
  6884  003490                     __ptext35:
  6885                           	callstack 0
  6886  003490                     _toggleG:
  6887                           	callstack 28
  6888  003490                     
  6889                           ;color.c: 49:     LATEbits.LATE7 = !LATEbits.LATE7;
  6890  003490  AE7D               	btfss	125,7,c	;volatile
  6891  003492  EF4D  F01A         	goto	u2091
  6892  003496  EF51  F01A         	goto	u2090
  6893  00349A                     u2091:
  6894  00349A  6A01               	clrf	??_toggleG^0,c
  6895  00349C  2A01               	incf	??_toggleG^0,f,c
  6896  00349E  EF52  F01A         	goto	u2108
  6897  0034A2                     u2090:
  6898  0034A2  6A01               	clrf	??_toggleG^0,c
  6899  0034A4                     u2108:
  6900  0034A4  3201               	rrcf	??_toggleG^0,f,c
  6901  0034A6  3201               	rrcf	??_toggleG^0,f,c
  6902  0034A8  507D               	movf	125,w,c	;volatile
  6903  0034AA  1801               	xorwf	??_toggleG^0,w,c
  6904  0034AC  0B7F               	andlw	-129
  6905  0034AE  1801               	xorwf	??_toggleG^0,w,c
  6906  0034B0  6E7D               	movwf	125,c	;volatile
  6907  0034B2  0012               	return		;funcret
  6908  0034B4                     __end_of_toggleG:
  6909                           	callstack 0
  6910                           
  6911 ;; *************** function _toggleB *****************
  6912 ;; Defined at:
  6913 ;;		line 52 in file "color.c"
  6914 ;; Parameters:    Size  Location     Type
  6915 ;;		None
  6916 ;; Auto vars:     Size  Location     Type
  6917 ;;		None
  6918 ;; Return value:  Size  Location     Type
  6919 ;;                  1    wreg      void 
  6920 ;; Registers used:
  6921 ;;		wreg, status,2, status,0
  6922 ;; Tracked objects:
  6923 ;;		On entry : 0/0
  6924 ;;		On exit  : 0/0
  6925 ;;		Unchanged: 0/0
  6926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6929 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6930 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6931 ;;Total ram usage:        1 bytes
  6932 ;; Hardware stack levels used:    1
  6933 ;; Hardware stack levels required when called:    1
  6934 ;; This function calls:
  6935 ;;		Nothing
  6936 ;; This function is called by:
  6937 ;;		_scan
  6938 ;; This function uses a non-reentrant model
  6939 ;;
  6940                           
  6941                           	psect	text36
  6942  003446                     __ptext36:
  6943                           	callstack 0
  6944  003446                     _toggleB:
  6945                           	callstack 28
  6946  003446                     
  6947                           ;color.c: 54:     LATAbits.LATA3 = !LATAbits.LATA3;
  6948  003446  A679               	btfss	121,3,c	;volatile
  6949  003448  EF28  F01A         	goto	u2111
  6950  00344C  EF2C  F01A         	goto	u2110
  6951  003450                     u2111:
  6952  003450  6A01               	clrf	??_toggleB^0,c
  6953  003452  2A01               	incf	??_toggleB^0,f,c
  6954  003454  EF2D  F01A         	goto	u2128
  6955  003458                     u2110:
  6956  003458  6A01               	clrf	??_toggleB^0,c
  6957  00345A                     u2128:
  6958  00345A  4601               	rlncf	??_toggleB^0,f,c
  6959  00345C  4601               	rlncf	??_toggleB^0,f,c
  6960  00345E  4601               	rlncf	??_toggleB^0,f,c
  6961  003460  5079               	movf	121,w,c	;volatile
  6962  003462  1801               	xorwf	??_toggleB^0,w,c
  6963  003464  0BF7               	andlw	-9
  6964  003466  1801               	xorwf	??_toggleB^0,w,c
  6965  003468  6E79               	movwf	121,c	;volatile
  6966  00346A  0012               	return		;funcret
  6967  00346C                     __end_of_toggleB:
  6968                           	callstack 0
  6969                           
  6970 ;; *************** function _color_read_RGBC *****************
  6971 ;; Defined at:
  6972 ;;		line 129 in file "color.c"
  6973 ;; Parameters:    Size  Location     Type
  6974 ;;  RGBC            2   12[COMRAM] PTR struct RGBC_val
  6975 ;;		 -> main@ambientB(8), main@ambientG(8), main@ambientR(8), main@ambientC(8), 
  6976 ;;		 -> identifier@blueVals(8), identifier@greenVals(8), identifier@redVals(8), identifier@vals(8), 
  6977 ;; Auto vars:     Size  Location     Type
  6978 ;;		None
  6979 ;; Return value:  Size  Location     Type
  6980 ;;                  1    wreg      void 
  6981 ;; Registers used:
  6982 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6983 ;; Tracked objects:
  6984 ;;		On entry : 0/0
  6985 ;;		On exit  : 0/0
  6986 ;;		Unchanged: 0/0
  6987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6988 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6991 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6992 ;;Total ram usage:        2 bytes
  6993 ;; Hardware stack levels used:    1
  6994 ;; Hardware stack levels required when called:    4
  6995 ;; This function calls:
  6996 ;;		_color_read
  6997 ;; This function is called by:
  6998 ;;		_scan
  6999 ;; This function uses a non-reentrant model
  7000 ;;
  7001                           
  7002                           	psect	text37
  7003  003010                     __ptext37:
  7004                           	callstack 0
  7005  003010                     _color_read_RGBC:
  7006                           	callstack 25
  7007  003010                     
  7008                           ;color.c: 129: void color_read_RGBC(struct RGBC_val *RGBC);color.c: 130: {;color.c: 131:
      +                               RGBC->R = color_read(0x16);
  7009  003010  0E16               	movlw	22
  7010  003012  EC99  F018         	call	_color_read
  7011  003016  C00D  FFD9         	movff	color_read_RGBC@RGBC,fsr2l
  7012  00301A  C00E  FFDA         	movff	color_read_RGBC@RGBC+1,fsr2h
  7013  00301E  C005  FFDE         	movff	?_color_read,postinc2
  7014  003022  C006  FFDD         	movff	?_color_read+1,postdec2
  7015                           
  7016                           ;color.c: 132:     RGBC->G = color_read(0x18);
  7017  003026  0E18               	movlw	24
  7018  003028  EC99  F018         	call	_color_read
  7019  00302C  EE20 F002          	lfsr	2,2
  7020  003030  500D               	movf	color_read_RGBC@RGBC^0,w,c
  7021  003032  26D9               	addwf	fsr2l,f,c
  7022  003034  500E               	movf	(color_read_RGBC@RGBC+1)^0,w,c
  7023  003036  22DA               	addwfc	fsr2h,f,c
  7024  003038  C005  FFDE         	movff	?_color_read,postinc2
  7025  00303C  C006  FFDD         	movff	?_color_read+1,postdec2
  7026                           
  7027                           ;color.c: 133:     RGBC->B = color_read(0x1A);
  7028  003040  0E1A               	movlw	26
  7029  003042  EC99  F018         	call	_color_read
  7030  003046  EE20 F004          	lfsr	2,4
  7031  00304A  500D               	movf	color_read_RGBC@RGBC^0,w,c
  7032  00304C  26D9               	addwf	fsr2l,f,c
  7033  00304E  500E               	movf	(color_read_RGBC@RGBC+1)^0,w,c
  7034  003050  22DA               	addwfc	fsr2h,f,c
  7035  003052  C005  FFDE         	movff	?_color_read,postinc2
  7036  003056  C006  FFDD         	movff	?_color_read+1,postdec2
  7037                           
  7038                           ;color.c: 134:     RGBC->C = color_read(0x14);
  7039  00305A  0E14               	movlw	20
  7040  00305C  EC99  F018         	call	_color_read
  7041  003060  EE20 F006          	lfsr	2,6
  7042  003064  500D               	movf	color_read_RGBC@RGBC^0,w,c
  7043  003066  26D9               	addwf	fsr2l,f,c
  7044  003068  500E               	movf	(color_read_RGBC@RGBC+1)^0,w,c
  7045  00306A  22DA               	addwfc	fsr2h,f,c
  7046  00306C  C005  FFDE         	movff	?_color_read,postinc2
  7047  003070  C006  FFDD         	movff	?_color_read+1,postdec2
  7048  003074  0012               	return		;funcret
  7049  003076                     __end_of_color_read_RGBC:
  7050                           	callstack 0
  7051                           
  7052 ;; *************** function _color_read *****************
  7053 ;; Defined at:
  7054 ;;		line 105 in file "color.c"
  7055 ;; Parameters:    Size  Location     Type
  7056 ;;  start           1    wreg     unsigned char 
  7057 ;; Auto vars:     Size  Location     Type
  7058 ;;  start           1    9[COMRAM] unsigned char 
  7059 ;;  tmp             2   10[COMRAM] int 
  7060 ;; Return value:  Size  Location     Type
  7061 ;;                  2    4[COMRAM] int 
  7062 ;; Registers used:
  7063 ;;		wreg, status,2, status,0, cstack
  7064 ;; Tracked objects:
  7065 ;;		On entry : 0/0
  7066 ;;		On exit  : 0/0
  7067 ;;		Unchanged: 0/0
  7068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7069 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7070 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7071 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7072 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7073 ;;Total ram usage:        8 bytes
  7074 ;; Hardware stack levels used:    1
  7075 ;; Hardware stack levels required when called:    3
  7076 ;; This function calls:
  7077 ;;		_I2C_2_Master_Read
  7078 ;;		_I2C_2_Master_RepStart
  7079 ;;		_I2C_2_Master_Start
  7080 ;;		_I2C_2_Master_Stop
  7081 ;;		_I2C_2_Master_Write
  7082 ;; This function is called by:
  7083 ;;		_color_read_RGBC
  7084 ;; This function uses a non-reentrant model
  7085 ;;
  7086                           
  7087                           	psect	text38
  7088  003132                     __ptext38:
  7089                           	callstack 0
  7090  003132                     _color_read:
  7091                           	callstack 25
  7092                           
  7093                           ;incstack = 0
  7094                           ;color_read@start stored from wreg
  7095  003132  6E0A               	movwf	color_read@start^0,c
  7096  003134                     
  7097                           ;color.c: 105: signed int color_read(char start);color.c: 106: {;color.c: 114:     signe
      +                          d int tmp;;color.c: 115:  I2C_2_Master_Start();
  7098  003134  EC2F  F01B         	call	_I2C_2_Master_Start	;wreg free
  7099                           
  7100                           ;color.c: 116:  I2C_2_Master_Write(0x52 | 0x00);
  7101  003138  0E52               	movlw	82
  7102  00313A  EC24  F01B         	call	_I2C_2_Master_Write
  7103                           
  7104                           ;color.c: 117:  I2C_2_Master_Write(0xA0 | start);
  7105  00313E  500A               	movf	color_read@start^0,w,c
  7106  003140  09A0               	iorlw	160
  7107  003142  EC24  F01B         	call	_I2C_2_Master_Write
  7108                           
  7109                           ;color.c: 118:  I2C_2_Master_RepStart();
  7110  003146  EC34  F01B         	call	_I2C_2_Master_RepStart	;wreg free
  7111                           
  7112                           ;color.c: 119:  I2C_2_Master_Write(0x52 | 0x01);
  7113  00314A  0E53               	movlw	83
  7114  00314C  EC24  F01B         	call	_I2C_2_Master_Write
  7115                           
  7116                           ;color.c: 120:  tmp=I2C_2_Master_Read(1);
  7117  003150  0E01               	movlw	1
  7118  003152  EC31  F019         	call	_I2C_2_Master_Read
  7119  003156  6E07               	movwf	??_color_read^0,c
  7120  003158  5007               	movf	??_color_read^0,w,c
  7121  00315A  6E0B               	movwf	color_read@tmp^0,c
  7122  00315C  6A0C               	clrf	(color_read@tmp+1)^0,c
  7123                           
  7124                           ;color.c: 121:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  7125  00315E  0E00               	movlw	0
  7126  003160  EC31  F019         	call	_I2C_2_Master_Read
  7127  003164  6E07               	movwf	??_color_read^0,c
  7128  003166  5007               	movf	??_color_read^0,w,c
  7129  003168  6E09               	movwf	(??_color_read+2)^0,c
  7130  00316A  6A08               	clrf	(??_color_read+1)^0,c
  7131  00316C  500B               	movf	color_read@tmp^0,w,c
  7132  00316E  1008               	iorwf	(??_color_read+1)^0,w,c
  7133  003170  6E0B               	movwf	color_read@tmp^0,c
  7134  003172  500C               	movf	(color_read@tmp+1)^0,w,c
  7135  003174  1009               	iorwf	(??_color_read+2)^0,w,c
  7136  003176  6E0C               	movwf	(color_read@tmp+1)^0,c
  7137                           
  7138                           ;color.c: 122:  I2C_2_Master_Stop();
  7139  003178  EC2A  F01B         	call	_I2C_2_Master_Stop	;wreg free
  7140  00317C                     
  7141                           ;color.c: 123:  return tmp;
  7142  00317C  C00B  F005         	movff	color_read@tmp,?_color_read
  7143  003180  C00C  F006         	movff	color_read@tmp+1,?_color_read+1
  7144  003184  0012               	return		;funcret
  7145  003186                     __end_of_color_read:
  7146                           	callstack 0
  7147                           
  7148 ;; *************** function _I2C_2_Master_Read *****************
  7149 ;; Defined at:
  7150 ;;		line 73 in file "i2c.c"
  7151 ;; Parameters:    Size  Location     Type
  7152 ;;  ack             1    wreg     unsigned char 
  7153 ;; Auto vars:     Size  Location     Type
  7154 ;;  ack             1    2[COMRAM] unsigned char 
  7155 ;;  tmp             1    3[COMRAM] unsigned char 
  7156 ;; Return value:  Size  Location     Type
  7157 ;;                  1    wreg      unsigned char 
  7158 ;; Registers used:
  7159 ;;		wreg, status,2, status,0, cstack
  7160 ;; Tracked objects:
  7161 ;;		On entry : 0/0
  7162 ;;		On exit  : 0/0
  7163 ;;		Unchanged: 0/0
  7164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7166 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7167 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7168 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7169 ;;Total ram usage:        3 bytes
  7170 ;; Hardware stack levels used:    1
  7171 ;; Hardware stack levels required when called:    2
  7172 ;; This function calls:
  7173 ;;		_I2C_2_Master_Idle
  7174 ;; This function is called by:
  7175 ;;		_color_read
  7176 ;; This function uses a non-reentrant model
  7177 ;;
  7178                           
  7179                           	psect	text39
  7180  003262                     __ptext39:
  7181                           	callstack 0
  7182  003262                     _I2C_2_Master_Read:
  7183                           	callstack 25
  7184                           
  7185                           ;incstack = 0
  7186                           ;I2C_2_Master_Read@ack stored from wreg
  7187  003262  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  7188  003264                     
  7189                           ;i2c.c: 73: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 74: {;i2c.c: 75:  
      +                           unsigned char tmp;;i2c.c: 76:   I2C_2_Master_Idle();
  7190  003264  ECE9  F019         	call	_I2C_2_Master_Idle	;wreg free
  7191  003268                     
  7192                           ;i2c.c: 77:   SSP2CON2bits.RCEN = 1;
  7193  003268  010E               	movlb	14	; () banked
  7194  00326A  87DA               	bsf	218,3,b	;volatile
  7195                           
  7196                           ;i2c.c: 78:   I2C_2_Master_Idle();
  7197  00326C  ECE9  F019         	call	_I2C_2_Master_Idle	;wreg free
  7198  003270                     
  7199                           ;i2c.c: 79:   tmp = SSP2BUF;
  7200  003270  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  7201                           
  7202                           ;i2c.c: 80:   I2C_2_Master_Idle();
  7203  003274  ECE9  F019         	call	_I2C_2_Master_Idle	;wreg free
  7204  003278                     
  7205                           ;i2c.c: 81:   SSP2CON2bits.ACKDT = !ack;
  7206  003278  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  7207  00327A  B4D8               	btfsc	status,2,c
  7208  00327C  EF42  F019         	goto	u1661
  7209  003280  EF46  F019         	goto	u1660
  7210  003284                     u1661:
  7211  003284  6A02               	clrf	??_I2C_2_Master_Read^0,c
  7212  003286  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  7213  003288  EF47  F019         	goto	u1678
  7214  00328C                     u1660:
  7215  00328C  6A02               	clrf	??_I2C_2_Master_Read^0,c
  7216  00328E                     u1678:
  7217  00328E  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  7218  003290  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  7219  003292  010E               	movlb	14	; () banked
  7220  003294  51DA               	movf	218,w,b	;volatile
  7221  003296  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  7222  003298  0BDF               	andlw	-33
  7223  00329A  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  7224  00329C  6FDA               	movwf	218,b	;volatile
  7225  00329E                     
  7226                           ; BSR set to: 14
  7227                           ;i2c.c: 82:   SSP2CON2bits.ACKEN = 1;
  7228  00329E  89DA               	bsf	218,4,b	;volatile
  7229  0032A0                     
  7230                           ; BSR set to: 14
  7231                           ;i2c.c: 83:   return tmp;
  7232  0032A0  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  7233  0032A2                     
  7234                           ; BSR set to: 14
  7235  0032A2  0012               	return		;funcret
  7236  0032A4                     __end_of_I2C_2_Master_Read:
  7237                           	callstack 0
  7238                           
  7239 ;; *************** function _calibrate *****************
  7240 ;; Defined at:
  7241 ;;		line 171 in file "color.c"
  7242 ;; Parameters:    Size  Location     Type
  7243 ;;  v               2    0[COMRAM] PTR struct RGBC_val
  7244 ;;		 -> identifier@blueVals(8), identifier@greenVals(8), identifier@redVals(8), identifier@vals(8), 
  7245 ;;  n               2    2[COMRAM] PTR struct RGBC_val
  7246 ;;		 -> main@ambientB(8), main@ambientG(8), main@ambientR(8), main@ambientC(8), 
  7247 ;; Auto vars:     Size  Location     Type
  7248 ;;		None
  7249 ;; Return value:  Size  Location     Type
  7250 ;;                  1    wreg      void 
  7251 ;; Registers used:
  7252 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7253 ;; Tracked objects:
  7254 ;;		On entry : 0/0
  7255 ;;		On exit  : 0/0
  7256 ;;		Unchanged: 0/0
  7257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7258 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7260 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7261 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7262 ;;Total ram usage:        8 bytes
  7263 ;; Hardware stack levels used:    1
  7264 ;; Hardware stack levels required when called:    1
  7265 ;; This function calls:
  7266 ;;		Nothing
  7267 ;; This function is called by:
  7268 ;;		_identifier
  7269 ;; This function uses a non-reentrant model
  7270 ;;
  7271                           
  7272                           	psect	text40
  7273  00295A                     __ptext40:
  7274                           	callstack 0
  7275  00295A                     _calibrate:
  7276                           	callstack 28
  7277  00295A                     
  7278                           ;color.c: 172:     v->R = v->R - n->R;
  7279  00295A  C003  FFD9         	movff	calibrate@n,fsr2l
  7280  00295E  C004  FFDA         	movff	calibrate@n+1,fsr2h
  7281  002962  CFDE F005          	movff	postinc2,??_calibrate
  7282  002966  CFDD F006          	movff	postdec2,??_calibrate+1
  7283  00296A  C001  FFD9         	movff	calibrate@v,fsr2l
  7284  00296E  C002  FFDA         	movff	calibrate@v+1,fsr2h
  7285  002972  CFDE F007          	movff	postinc2,??_calibrate+2
  7286  002976  CFDD F008          	movff	postdec2,??_calibrate+3
  7287  00297A  5005               	movf	??_calibrate^0,w,c
  7288  00297C  5E07               	subwf	(??_calibrate+2)^0,f,c
  7289  00297E  5006               	movf	(??_calibrate+1)^0,w,c
  7290  002980  5A08               	subwfb	(??_calibrate+3)^0,f,c
  7291  002982  C001  FFD9         	movff	calibrate@v,fsr2l
  7292  002986  C002  FFDA         	movff	calibrate@v+1,fsr2h
  7293  00298A  C007  FFDE         	movff	??_calibrate+2,postinc2
  7294  00298E  C008  FFDD         	movff	??_calibrate+3,postdec2
  7295                           
  7296                           ;color.c: 173:     v->G = v->G - n->G;
  7297  002992  EE20 F002          	lfsr	2,2
  7298  002996  5003               	movf	calibrate@n^0,w,c
  7299  002998  26D9               	addwf	fsr2l,f,c
  7300  00299A  5004               	movf	(calibrate@n+1)^0,w,c
  7301  00299C  22DA               	addwfc	fsr2h,f,c
  7302  00299E  CFDE F005          	movff	postinc2,??_calibrate
  7303  0029A2  CFDD F006          	movff	postdec2,??_calibrate+1
  7304  0029A6  EE20 F002          	lfsr	2,2
  7305  0029AA  5001               	movf	calibrate@v^0,w,c
  7306  0029AC  26D9               	addwf	fsr2l,f,c
  7307  0029AE  5002               	movf	(calibrate@v+1)^0,w,c
  7308  0029B0  22DA               	addwfc	fsr2h,f,c
  7309  0029B2  CFDE F007          	movff	postinc2,??_calibrate+2
  7310  0029B6  CFDD F008          	movff	postdec2,??_calibrate+3
  7311  0029BA  5005               	movf	??_calibrate^0,w,c
  7312  0029BC  5E07               	subwf	(??_calibrate+2)^0,f,c
  7313  0029BE  5006               	movf	(??_calibrate+1)^0,w,c
  7314  0029C0  5A08               	subwfb	(??_calibrate+3)^0,f,c
  7315  0029C2  EE20 F002          	lfsr	2,2
  7316  0029C6  5001               	movf	calibrate@v^0,w,c
  7317  0029C8  26D9               	addwf	fsr2l,f,c
  7318  0029CA  5002               	movf	(calibrate@v+1)^0,w,c
  7319  0029CC  22DA               	addwfc	fsr2h,f,c
  7320  0029CE  C007  FFDE         	movff	??_calibrate+2,postinc2
  7321  0029D2  C008  FFDD         	movff	??_calibrate+3,postdec2
  7322                           
  7323                           ;color.c: 174:     v->B = v->B - n->B;
  7324  0029D6  EE20 F004          	lfsr	2,4
  7325  0029DA  5003               	movf	calibrate@n^0,w,c
  7326  0029DC  26D9               	addwf	fsr2l,f,c
  7327  0029DE  5004               	movf	(calibrate@n+1)^0,w,c
  7328  0029E0  22DA               	addwfc	fsr2h,f,c
  7329  0029E2  CFDE F005          	movff	postinc2,??_calibrate
  7330  0029E6  CFDD F006          	movff	postdec2,??_calibrate+1
  7331  0029EA  EE20 F004          	lfsr	2,4
  7332  0029EE  5001               	movf	calibrate@v^0,w,c
  7333  0029F0  26D9               	addwf	fsr2l,f,c
  7334  0029F2  5002               	movf	(calibrate@v+1)^0,w,c
  7335  0029F4  22DA               	addwfc	fsr2h,f,c
  7336  0029F6  CFDE F007          	movff	postinc2,??_calibrate+2
  7337  0029FA  CFDD F008          	movff	postdec2,??_calibrate+3
  7338  0029FE  5005               	movf	??_calibrate^0,w,c
  7339  002A00  5E07               	subwf	(??_calibrate+2)^0,f,c
  7340  002A02  5006               	movf	(??_calibrate+1)^0,w,c
  7341  002A04  5A08               	subwfb	(??_calibrate+3)^0,f,c
  7342  002A06  EE20 F004          	lfsr	2,4
  7343  002A0A  5001               	movf	calibrate@v^0,w,c
  7344  002A0C  26D9               	addwf	fsr2l,f,c
  7345  002A0E  5002               	movf	(calibrate@v+1)^0,w,c
  7346  002A10  22DA               	addwfc	fsr2h,f,c
  7347  002A12  C007  FFDE         	movff	??_calibrate+2,postinc2
  7348  002A16  C008  FFDD         	movff	??_calibrate+3,postdec2
  7349                           
  7350                           ;color.c: 175:     v->C = v->C - n->C;
  7351  002A1A  EE20 F006          	lfsr	2,6
  7352  002A1E  5003               	movf	calibrate@n^0,w,c
  7353  002A20  26D9               	addwf	fsr2l,f,c
  7354  002A22  5004               	movf	(calibrate@n+1)^0,w,c
  7355  002A24  22DA               	addwfc	fsr2h,f,c
  7356  002A26  CFDE F005          	movff	postinc2,??_calibrate
  7357  002A2A  CFDD F006          	movff	postdec2,??_calibrate+1
  7358  002A2E  EE20 F006          	lfsr	2,6
  7359  002A32  5001               	movf	calibrate@v^0,w,c
  7360  002A34  26D9               	addwf	fsr2l,f,c
  7361  002A36  5002               	movf	(calibrate@v+1)^0,w,c
  7362  002A38  22DA               	addwfc	fsr2h,f,c
  7363  002A3A  CFDE F007          	movff	postinc2,??_calibrate+2
  7364  002A3E  CFDD F008          	movff	postdec2,??_calibrate+3
  7365  002A42  5005               	movf	??_calibrate^0,w,c
  7366  002A44  5E07               	subwf	(??_calibrate+2)^0,f,c
  7367  002A46  5006               	movf	(??_calibrate+1)^0,w,c
  7368  002A48  5A08               	subwfb	(??_calibrate+3)^0,f,c
  7369  002A4A  EE20 F006          	lfsr	2,6
  7370  002A4E  5001               	movf	calibrate@v^0,w,c
  7371  002A50  26D9               	addwf	fsr2l,f,c
  7372  002A52  5002               	movf	(calibrate@v+1)^0,w,c
  7373  002A54  22DA               	addwfc	fsr2h,f,c
  7374  002A56  C007  FFDE         	movff	??_calibrate+2,postinc2
  7375  002A5A  C008  FFDD         	movff	??_calibrate+3,postdec2
  7376  002A5E  0012               	return		;funcret
  7377  002A60                     __end_of_calibrate:
  7378                           	callstack 0
  7379                           
  7380 ;; *************** function _fullSpeedAhead *****************
  7381 ;; Defined at:
  7382 ;;		line 194 in file "dc_motor.c"
  7383 ;; Parameters:    Size  Location     Type
  7384 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  7385 ;;		 -> main@motorL(8), 
  7386 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  7387 ;;		 -> main@motorR(8), 
  7388 ;;  nomPower        2   23[COMRAM] unsigned int 
  7389 ;;  forward         1   25[COMRAM] unsigned char 
  7390 ;; Auto vars:     Size  Location     Type
  7391 ;;		None
  7392 ;; Return value:  Size  Location     Type
  7393 ;;                  1    wreg      void 
  7394 ;; Registers used:
  7395 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7396 ;; Tracked objects:
  7397 ;;		On entry : 0/0
  7398 ;;		On exit  : 0/0
  7399 ;;		Unchanged: 0/0
  7400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7401 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7403 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7404 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7405 ;;Total ram usage:        9 bytes
  7406 ;; Hardware stack levels used:    1
  7407 ;; Hardware stack levels required when called:    3
  7408 ;; This function calls:
  7409 ;;		_setMotorPWM
  7410 ;; This function is called by:
  7411 ;;		_main
  7412 ;; This function uses a non-reentrant model
  7413 ;;
  7414                           
  7415                           	psect	text41
  7416  002EB0                     __ptext41:
  7417                           	callstack 0
  7418  002EB0                     _fullSpeedAhead:
  7419                           	callstack 27
  7420  002EB0                     
  7421                           ;dc_motor.c: 194: void fullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR, unsigned
      +                           int nomPower, char forward);dc_motor.c: 195: {;dc_motor.c: 196:     mL->direction=forwa
      +                          rd;
  7422  002EB0  EE20 F001          	lfsr	2,1
  7423  002EB4  5014               	movf	fullSpeedAhead@mL^0,w,c
  7424  002EB6  26D9               	addwf	fsr2l,f,c
  7425  002EB8  5015               	movf	(fullSpeedAhead@mL+1)^0,w,c
  7426  002EBA  22DA               	addwfc	fsr2h,f,c
  7427  002EBC  C01A  FFDF         	movff	fullSpeedAhead@forward,indf2
  7428                           
  7429                           ;dc_motor.c: 197:     mR->direction=forward;
  7430  002EC0  EE20 F001          	lfsr	2,1
  7431  002EC4  5016               	movf	fullSpeedAhead@mR^0,w,c
  7432  002EC6  26D9               	addwf	fsr2l,f,c
  7433  002EC8  5017               	movf	(fullSpeedAhead@mR+1)^0,w,c
  7434  002ECA  22DA               	addwfc	fsr2h,f,c
  7435  002ECC  C01A  FFDF         	movff	fullSpeedAhead@forward,indf2
  7436                           
  7437                           ;dc_motor.c: 201:     while (mL->power<nomPower){
  7438  002ED0  EF88  F017         	goto	l224
  7439  002ED4                     l3121:
  7440                           
  7441                           ;dc_motor.c: 202:         mL->power++;
  7442  002ED4  C014  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  7443  002ED8  C015  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  7444  002EDC  2ADF               	incf	indf2,f,c
  7445                           
  7446                           ;dc_motor.c: 203:         mR->power++;
  7447  002EDE  C016  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  7448  002EE2  C017  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  7449  002EE6  2ADF               	incf	indf2,f,c
  7450  002EE8                     
  7451                           ;dc_motor.c: 204:         setMotorPWM(mL);
  7452  002EE8  C014  F009         	movff	fullSpeedAhead@mL,setMotorPWM@m
  7453  002EEC  C015  F00A         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  7454  002EF0  EC95  F00F         	call	_setMotorPWM	;wreg free
  7455  002EF4                     
  7456                           ;dc_motor.c: 205:         setMotorPWM(mR);
  7457  002EF4  C016  F009         	movff	fullSpeedAhead@mR,setMotorPWM@m
  7458  002EF8  C017  F00A         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  7459  002EFC  EC95  F00F         	call	_setMotorPWM	;wreg free
  7460  002F00                     
  7461                           ;dc_motor.c: 206:         _delay((unsigned long)((5)*(64000000/4000.0)));
  7462  002F00  0E68               	movlw	104
  7463  002F02  6E1B               	movwf	??_fullSpeedAhead^0,c
  7464  002F04  0EE4               	movlw	228
  7465  002F06                     u3287:
  7466  002F06  2EE8               	decfsz	wreg,f,c
  7467  002F08  D7FE               	bra	u3287
  7468  002F0A  2E1B               	decfsz	??_fullSpeedAhead^0,f,c
  7469  002F0C  D7FC               	bra	u3287
  7470  002F0E  D000               	nop2	
  7471  002F10                     l224:
  7472                           
  7473                           ;dc_motor.c: 201:     while (mL->power<nomPower){
  7474  002F10  C014  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  7475  002F14  C015  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  7476  002F18  50DF               	movf	indf2,w,c
  7477  002F1A  6E1B               	movwf	??_fullSpeedAhead^0,c
  7478  002F1C  6A1C               	clrf	(??_fullSpeedAhead+1)^0,c
  7479  002F1E  5018               	movf	fullSpeedAhead@nomPower^0,w,c
  7480  002F20  5C1B               	subwf	??_fullSpeedAhead^0,w,c
  7481  002F22  5019               	movf	(fullSpeedAhead@nomPower+1)^0,w,c
  7482  002F24  581C               	subwfb	(??_fullSpeedAhead+1)^0,w,c
  7483  002F26  A0D8               	btfss	status,0,c
  7484  002F28  EF98  F017         	goto	u2711
  7485  002F2C  EF9A  F017         	goto	u2710
  7486  002F30                     u2711:
  7487  002F30  EF6A  F017         	goto	l3121
  7488  002F34                     u2710:
  7489  002F34  0012               	return		;funcret
  7490  002F36                     __end_of_fullSpeedAhead:
  7491                           	callstack 0
  7492                           
  7493 ;; *************** function _setMotorPWM *****************
  7494 ;; Defined at:
  7495 ;;		line 62 in file "dc_motor.c"
  7496 ;; Parameters:    Size  Location     Type
  7497 ;;  m               2    8[COMRAM] PTR struct DC_motor
  7498 ;;		 -> main@motorR(8), main@motorL(8), 
  7499 ;; Auto vars:     Size  Location     Type
  7500 ;;  PWMduty         2   17[COMRAM] int 
  7501 ;; Return value:  Size  Location     Type
  7502 ;;                  1    wreg      void 
  7503 ;; Registers used:
  7504 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7505 ;; Tracked objects:
  7506 ;;		On entry : 0/0
  7507 ;;		On exit  : 0/0
  7508 ;;		Unchanged: 0/0
  7509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7510 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7511 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7512 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7513 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7514 ;;Total ram usage:       11 bytes
  7515 ;; Hardware stack levels used:    1
  7516 ;; Hardware stack levels required when called:    2
  7517 ;; This function calls:
  7518 ;;		___awdiv
  7519 ;; This function is called by:
  7520 ;;		_initDCmotorsPWM
  7521 ;;		_stop
  7522 ;;		_turnAngle
  7523 ;;		_fullSpeedAhead
  7524 ;;		_shuffle
  7525 ;; This function uses a non-reentrant model
  7526 ;;
  7527                           
  7528                           	psect	text42
  7529  001F2A                     __ptext42:
  7530                           	callstack 0
  7531  001F2A                     _setMotorPWM:
  7532                           	callstack 27
  7533  001F2A                     
  7534                           ;dc_motor.c: 62: void setMotorPWM(struct DC_motor *m);dc_motor.c: 63: {;dc_motor.c: 64: 
      +                           int PWMduty;;dc_motor.c: 66:  if (m->direction){
  7535  001F2A  EE20 F001          	lfsr	2,1
  7536  001F2E  5009               	movf	setMotorPWM@m^0,w,c
  7537  001F30  26D9               	addwf	fsr2l,f,c
  7538  001F32  500A               	movf	(setMotorPWM@m+1)^0,w,c
  7539  001F34  22DA               	addwfc	fsr2h,f,c
  7540  001F36  50DF               	movf	indf2,w,c
  7541  001F38  B4D8               	btfsc	status,2,c
  7542  001F3A  EFA1  F00F         	goto	u2131
  7543  001F3E  EFA3  F00F         	goto	u2130
  7544  001F42                     u2131:
  7545  001F42  EFCF  F00F         	goto	l2713
  7546  001F46                     u2130:
  7547  001F46                     
  7548                           ;dc_motor.c: 68:   PWMduty=m->PWMperiod - ((int)(m->power)*(m->PWMperiod))/100;
  7549  001F46  EE20 F007          	lfsr	2,7
  7550  001F4A  5009               	movf	setMotorPWM@m^0,w,c
  7551  001F4C  26D9               	addwf	fsr2l,f,c
  7552  001F4E  500A               	movf	(setMotorPWM@m+1)^0,w,c
  7553  001F50  22DA               	addwfc	fsr2h,f,c
  7554  001F52  50DF               	movf	indf2,w,c
  7555  001F54  6E0B               	movwf	??_setMotorPWM^0,c
  7556  001F56  C009  FFD9         	movff	setMotorPWM@m,fsr2l
  7557  001F5A  C00A  FFDA         	movff	setMotorPWM@m+1,fsr2h
  7558  001F5E  50DF               	movf	indf2,w,c
  7559  001F60  6E0C               	movwf	(??_setMotorPWM+1)^0,c
  7560  001F62  500C               	movf	(??_setMotorPWM+1)^0,w,c
  7561  001F64  020B               	mulwf	??_setMotorPWM^0,c
  7562  001F66  CFF3 F001          	movff	prodl,___awdiv@dividend
  7563  001F6A  CFF4 F002          	movff	prodh,___awdiv@dividend+1
  7564  001F6E  0E00               	movlw	0
  7565  001F70  6E04               	movwf	(___awdiv@divisor+1)^0,c
  7566  001F72  0E64               	movlw	100
  7567  001F74  6E03               	movwf	___awdiv@divisor^0,c
  7568  001F76  ECF8  F015         	call	___awdiv	;wreg free
  7569  001F7A  EE20 F007          	lfsr	2,7
  7570  001F7E  5009               	movf	setMotorPWM@m^0,w,c
  7571  001F80  26D9               	addwf	fsr2l,f,c
  7572  001F82  500A               	movf	(setMotorPWM@m+1)^0,w,c
  7573  001F84  22DA               	addwfc	fsr2h,f,c
  7574  001F86  50DF               	movf	indf2,w,c
  7575  001F88  6E0D               	movwf	(??_setMotorPWM+2)^0,c
  7576  001F8A  5001               	movf	?___awdiv^0,w,c
  7577  001F8C  5C0D               	subwf	(??_setMotorPWM+2)^0,w,c
  7578  001F8E  6E12               	movwf	setMotorPWM@PWMduty^0,c
  7579  001F90  5002               	movf	(?___awdiv+1)^0,w,c
  7580  001F92  A0D8               	btfss	status,0,c
  7581  001F94  2802               	incf	(?___awdiv+1)^0,w,c
  7582  001F96  6A13               	clrf	(setMotorPWM@PWMduty+1)^0,c
  7583  001F98  5E13               	subwf	(setMotorPWM@PWMduty+1)^0,f,c
  7584                           
  7585                           ;dc_motor.c: 69:  }
  7586  001F9A  EFED  F00F         	goto	l2715
  7587  001F9E                     l2713:
  7588                           
  7589                           ;dc_motor.c: 72:   PWMduty=((int)(m->power)*(m->PWMperiod))/100;
  7590  001F9E  EE20 F007          	lfsr	2,7
  7591  001FA2  5009               	movf	setMotorPWM@m^0,w,c
  7592  001FA4  26D9               	addwf	fsr2l,f,c
  7593  001FA6  500A               	movf	(setMotorPWM@m+1)^0,w,c
  7594  001FA8  22DA               	addwfc	fsr2h,f,c
  7595  001FAA  50DF               	movf	indf2,w,c
  7596  001FAC  6E0B               	movwf	??_setMotorPWM^0,c
  7597  001FAE  C009  FFD9         	movff	setMotorPWM@m,fsr2l
  7598  001FB2  C00A  FFDA         	movff	setMotorPWM@m+1,fsr2h
  7599  001FB6  50DF               	movf	indf2,w,c
  7600  001FB8  6E0C               	movwf	(??_setMotorPWM+1)^0,c
  7601  001FBA  500C               	movf	(??_setMotorPWM+1)^0,w,c
  7602  001FBC  020B               	mulwf	??_setMotorPWM^0,c
  7603  001FBE  CFF3 F001          	movff	prodl,___awdiv@dividend
  7604  001FC2  CFF4 F002          	movff	prodh,___awdiv@dividend+1
  7605  001FC6  0E00               	movlw	0
  7606  001FC8  6E04               	movwf	(___awdiv@divisor+1)^0,c
  7607  001FCA  0E64               	movlw	100
  7608  001FCC  6E03               	movwf	___awdiv@divisor^0,c
  7609  001FCE  ECF8  F015         	call	___awdiv	;wreg free
  7610  001FD2  C001  F012         	movff	?___awdiv,setMotorPWM@PWMduty
  7611  001FD6  C002  F013         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  7612  001FDA                     l2715:
  7613                           
  7614                           ;dc_motor.c: 75:  *(m->dutyHighByte) = (char)PWMduty;
  7615  001FDA  EE20 F002          	lfsr	2,2
  7616  001FDE  5009               	movf	setMotorPWM@m^0,w,c
  7617  001FE0  26D9               	addwf	fsr2l,f,c
  7618  001FE2  500A               	movf	(setMotorPWM@m+1)^0,w,c
  7619  001FE4  22DA               	addwfc	fsr2h,f,c
  7620  001FE6  CFDE F00B          	movff	postinc2,??_setMotorPWM
  7621  001FEA  CFDD F00C          	movff	postdec2,??_setMotorPWM+1
  7622  001FEE  C00B  FFD9         	movff	??_setMotorPWM,fsr2l
  7623  001FF2  C00C  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7624  001FF6  C012  FFDF         	movff	setMotorPWM@PWMduty,indf2
  7625  001FFA                     
  7626                           ;dc_motor.c: 77:  if (m->direction){
  7627  001FFA  EE20 F001          	lfsr	2,1
  7628  001FFE  5009               	movf	setMotorPWM@m^0,w,c
  7629  002000  26D9               	addwf	fsr2l,f,c
  7630  002002  500A               	movf	(setMotorPWM@m+1)^0,w,c
  7631  002004  22DA               	addwfc	fsr2h,f,c
  7632  002006  50DF               	movf	indf2,w,c
  7633  002008  B4D8               	btfsc	status,2,c
  7634  00200A  EF09  F010         	goto	u2141
  7635  00200E  EF0B  F010         	goto	u2140
  7636  002012                     u2141:
  7637  002012  EF40  F010         	goto	l2721
  7638  002016                     u2140:
  7639  002016                     
  7640                           ;dc_motor.c: 78:   *(m->dir_LAT) = (unsigned char)(*(m->dir_LAT) | (1<<(m->dir_pin)));
  7641  002016  EE20 F004          	lfsr	2,4
  7642  00201A  5009               	movf	setMotorPWM@m^0,w,c
  7643  00201C  26D9               	addwf	fsr2l,f,c
  7644  00201E  500A               	movf	(setMotorPWM@m+1)^0,w,c
  7645  002020  22DA               	addwfc	fsr2h,f,c
  7646  002022  CFDE F00B          	movff	postinc2,??_setMotorPWM
  7647  002026  CFDD F00C          	movff	postdec2,??_setMotorPWM+1
  7648  00202A  C00B  FFD9         	movff	??_setMotorPWM,fsr2l
  7649  00202E  C00C  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7650  002032  EE10 F004          	lfsr	1,4
  7651  002036  5009               	movf	setMotorPWM@m^0,w,c
  7652  002038  26E1               	addwf	fsr1l,f,c
  7653  00203A  500A               	movf	(setMotorPWM@m+1)^0,w,c
  7654  00203C  22E2               	addwfc	fsr1h,f,c
  7655  00203E  CFE6 F00D          	movff	postinc1,??_setMotorPWM+2
  7656  002042  CFE5 F00E          	movff	postdec1,??_setMotorPWM+3
  7657  002046  C00D  FFE1         	movff	??_setMotorPWM+2,fsr1l
  7658  00204A  C00E  FFE2         	movff	??_setMotorPWM+3,fsr1h
  7659  00204E  50E7               	movf	indf1,w,c
  7660  002050  6E0F               	movwf	(??_setMotorPWM+4)^0,c
  7661  002052  EE10 F006          	lfsr	1,6
  7662  002056  5009               	movf	setMotorPWM@m^0,w,c
  7663  002058  26E1               	addwf	fsr1l,f,c
  7664  00205A  500A               	movf	(setMotorPWM@m+1)^0,w,c
  7665  00205C  22E2               	addwfc	fsr1h,f,c
  7666  00205E  50E7               	movf	indf1,w,c
  7667  002060  6E10               	movwf	(??_setMotorPWM+5)^0,c
  7668  002062  0E01               	movlw	1
  7669  002064  6E11               	movwf	(??_setMotorPWM+6)^0,c
  7670  002066  2A10               	incf	(??_setMotorPWM+5)^0,f,c
  7671  002068  EF38  F010         	goto	u2154
  7672  00206C                     u2155:
  7673  00206C  90D8               	bcf	status,0,c
  7674  00206E  3611               	rlcf	(??_setMotorPWM+6)^0,f,c
  7675  002070                     u2154:
  7676  002070  2E10               	decfsz	(??_setMotorPWM+5)^0,f,c
  7677  002072  EF36  F010         	goto	u2155
  7678  002076  5011               	movf	(??_setMotorPWM+6)^0,w,c
  7679  002078  100F               	iorwf	(??_setMotorPWM+4)^0,w,c
  7680  00207A  6EDF               	movwf	indf2,c
  7681                           
  7682                           ;dc_motor.c: 79:  } else {
  7683  00207C  EF74  F010         	goto	l194
  7684  002080                     l2721:
  7685                           
  7686                           ;dc_motor.c: 80:   *(m->dir_LAT) = (unsigned char)(*(m->dir_LAT) & (~(1<<(m->dir_pin))))
      +                          ;
  7687  002080  EE20 F004          	lfsr	2,4
  7688  002084  5009               	movf	setMotorPWM@m^0,w,c
  7689  002086  26D9               	addwf	fsr2l,f,c
  7690  002088  500A               	movf	(setMotorPWM@m+1)^0,w,c
  7691  00208A  22DA               	addwfc	fsr2h,f,c
  7692  00208C  CFDE F00B          	movff	postinc2,??_setMotorPWM
  7693  002090  CFDD F00C          	movff	postdec2,??_setMotorPWM+1
  7694  002094  C00B  FFD9         	movff	??_setMotorPWM,fsr2l
  7695  002098  C00C  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7696  00209C  EE10 F004          	lfsr	1,4
  7697  0020A0  5009               	movf	setMotorPWM@m^0,w,c
  7698  0020A2  26E1               	addwf	fsr1l,f,c
  7699  0020A4  500A               	movf	(setMotorPWM@m+1)^0,w,c
  7700  0020A6  22E2               	addwfc	fsr1h,f,c
  7701  0020A8  CFE6 F00D          	movff	postinc1,??_setMotorPWM+2
  7702  0020AC  CFE5 F00E          	movff	postdec1,??_setMotorPWM+3
  7703  0020B0  C00D  FFE1         	movff	??_setMotorPWM+2,fsr1l
  7704  0020B4  C00E  FFE2         	movff	??_setMotorPWM+3,fsr1h
  7705  0020B8  50E7               	movf	indf1,w,c
  7706  0020BA  6E0F               	movwf	(??_setMotorPWM+4)^0,c
  7707  0020BC  EE10 F006          	lfsr	1,6
  7708  0020C0  5009               	movf	setMotorPWM@m^0,w,c
  7709  0020C2  26E1               	addwf	fsr1l,f,c
  7710  0020C4  500A               	movf	(setMotorPWM@m+1)^0,w,c
  7711  0020C6  22E2               	addwfc	fsr1h,f,c
  7712  0020C8  50E7               	movf	indf1,w,c
  7713  0020CA  6E10               	movwf	(??_setMotorPWM+5)^0,c
  7714  0020CC  0E01               	movlw	1
  7715  0020CE  6E11               	movwf	(??_setMotorPWM+6)^0,c
  7716  0020D0  2A10               	incf	(??_setMotorPWM+5)^0,f,c
  7717  0020D2  EF6D  F010         	goto	u2164
  7718  0020D6                     u2165:
  7719  0020D6  90D8               	bcf	status,0,c
  7720  0020D8  3611               	rlcf	(??_setMotorPWM+6)^0,f,c
  7721  0020DA                     u2164:
  7722  0020DA  2E10               	decfsz	(??_setMotorPWM+5)^0,f,c
  7723  0020DC  EF6B  F010         	goto	u2165
  7724  0020E0  5011               	movf	(??_setMotorPWM+6)^0,w,c
  7725  0020E2  0AFF               	xorlw	255
  7726  0020E4  140F               	andwf	(??_setMotorPWM+4)^0,w,c
  7727  0020E6  6EDF               	movwf	indf2,c
  7728  0020E8                     l194:
  7729  0020E8  0012               	return		;funcret
  7730  0020EA                     __end_of_setMotorPWM:
  7731                           	callstack 0
  7732                           
  7733 ;; *************** function ___awdiv *****************
  7734 ;; Defined at:
  7735 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\awdiv.c"
  7736 ;; Parameters:    Size  Location     Type
  7737 ;;  dividend        2    0[COMRAM] int 
  7738 ;;  divisor         2    2[COMRAM] int 
  7739 ;; Auto vars:     Size  Location     Type
  7740 ;;  quotient        2    6[COMRAM] int 
  7741 ;;  sign            1    5[COMRAM] unsigned char 
  7742 ;;  counter         1    4[COMRAM] unsigned char 
  7743 ;; Return value:  Size  Location     Type
  7744 ;;                  2    0[COMRAM] int 
  7745 ;; Registers used:
  7746 ;;		wreg, status,2, status,0
  7747 ;; Tracked objects:
  7748 ;;		On entry : 0/0
  7749 ;;		On exit  : 0/0
  7750 ;;		Unchanged: 0/0
  7751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7752 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7753 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7755 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7756 ;;Total ram usage:        8 bytes
  7757 ;; Hardware stack levels used:    1
  7758 ;; Hardware stack levels required when called:    1
  7759 ;; This function calls:
  7760 ;;		Nothing
  7761 ;; This function is called by:
  7762 ;;		_setMotorPWM
  7763 ;; This function uses a non-reentrant model
  7764 ;;
  7765                           
  7766                           	psect	text43
  7767  002BF0                     __ptext43:
  7768                           	callstack 0
  7769  002BF0                     ___awdiv:
  7770                           	callstack 27
  7771  002BF0  0E00               	movlw	0
  7772  002BF2  6E06               	movwf	___awdiv@sign^0,c
  7773  002BF4  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  7774  002BF6  EF01  F016         	goto	u1860
  7775  002BFA  EFFF  F015         	goto	u1861
  7776  002BFE                     u1861:
  7777  002BFE  EF07  F016         	goto	l2603
  7778  002C02                     u1860:
  7779  002C02  6C03               	negf	___awdiv@divisor^0,c
  7780  002C04  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  7781  002C06  B0D8               	btfsc	status,0,c
  7782  002C08  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  7783  002C0A  0E01               	movlw	1
  7784  002C0C  6E06               	movwf	___awdiv@sign^0,c
  7785  002C0E                     l2603:
  7786  002C0E  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  7787  002C10  EF0E  F016         	goto	u1870
  7788  002C14  EF0C  F016         	goto	u1871
  7789  002C18                     u1871:
  7790  002C18  EF14  F016         	goto	l2609
  7791  002C1C                     u1870:
  7792  002C1C  6C01               	negf	___awdiv@dividend^0,c
  7793  002C1E  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  7794  002C20  B0D8               	btfsc	status,0,c
  7795  002C22  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  7796  002C24  0E01               	movlw	1
  7797  002C26  1A06               	xorwf	___awdiv@sign^0,f,c
  7798  002C28                     l2609:
  7799  002C28  0E00               	movlw	0
  7800  002C2A  6E08               	movwf	(___awdiv@quotient+1)^0,c
  7801  002C2C  0E00               	movlw	0
  7802  002C2E  6E07               	movwf	___awdiv@quotient^0,c
  7803  002C30  5003               	movf	___awdiv@divisor^0,w,c
  7804  002C32  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  7805  002C34  B4D8               	btfsc	status,2,c
  7806  002C36  EF1F  F016         	goto	u1881
  7807  002C3A  EF21  F016         	goto	u1880
  7808  002C3E                     u1881:
  7809  002C3E  EF49  F016         	goto	l2631
  7810  002C42                     u1880:
  7811  002C42  0E01               	movlw	1
  7812  002C44  6E05               	movwf	___awdiv@counter^0,c
  7813  002C46  EF29  F016         	goto	l2617
  7814  002C4A                     l2615:
  7815  002C4A  90D8               	bcf	status,0,c
  7816  002C4C  3603               	rlcf	___awdiv@divisor^0,f,c
  7817  002C4E  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  7818  002C50  2A05               	incf	___awdiv@counter^0,f,c
  7819  002C52                     l2617:
  7820  002C52  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  7821  002C54  EF2E  F016         	goto	u1891
  7822  002C58  EF30  F016         	goto	u1890
  7823  002C5C                     u1891:
  7824  002C5C  EF25  F016         	goto	l2615
  7825  002C60                     u1890:
  7826  002C60                     l2619:
  7827  002C60  90D8               	bcf	status,0,c
  7828  002C62  3607               	rlcf	___awdiv@quotient^0,f,c
  7829  002C64  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  7830  002C66  5003               	movf	___awdiv@divisor^0,w,c
  7831  002C68  5C01               	subwf	___awdiv@dividend^0,w,c
  7832  002C6A  5004               	movf	(___awdiv@divisor+1)^0,w,c
  7833  002C6C  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  7834  002C6E  A0D8               	btfss	status,0,c
  7835  002C70  EF3C  F016         	goto	u1901
  7836  002C74  EF3E  F016         	goto	u1900
  7837  002C78                     u1901:
  7838  002C78  EF43  F016         	goto	l2627
  7839  002C7C                     u1900:
  7840  002C7C  5003               	movf	___awdiv@divisor^0,w,c
  7841  002C7E  5E01               	subwf	___awdiv@dividend^0,f,c
  7842  002C80  5004               	movf	(___awdiv@divisor+1)^0,w,c
  7843  002C82  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  7844  002C84  8007               	bsf	___awdiv@quotient^0,0,c
  7845  002C86                     l2627:
  7846  002C86  90D8               	bcf	status,0,c
  7847  002C88  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  7848  002C8A  3203               	rrcf	___awdiv@divisor^0,f,c
  7849  002C8C  2E05               	decfsz	___awdiv@counter^0,f,c
  7850  002C8E  EF30  F016         	goto	l2619
  7851  002C92                     l2631:
  7852  002C92  5006               	movf	___awdiv@sign^0,w,c
  7853  002C94  B4D8               	btfsc	status,2,c
  7854  002C96  EF4F  F016         	goto	u1911
  7855  002C9A  EF51  F016         	goto	u1910
  7856  002C9E                     u1911:
  7857  002C9E  EF55  F016         	goto	l2635
  7858  002CA2                     u1910:
  7859  002CA2  6C07               	negf	___awdiv@quotient^0,c
  7860  002CA4  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  7861  002CA6  B0D8               	btfsc	status,0,c
  7862  002CA8  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  7863  002CAA                     l2635:
  7864  002CAA  C007  F001         	movff	___awdiv@quotient,?___awdiv
  7865  002CAE  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  7866  002CB2  0012               	return		;funcret
  7867  002CB4                     __end_of___awdiv:
  7868                           	callstack 0
  7869                           
  7870 ;; *************** function _color_interrupt_clearReset *****************
  7871 ;; Defined at:
  7872 ;;		line 79 in file "interrupts.c"
  7873 ;; Parameters:    Size  Location     Type
  7874 ;;		None
  7875 ;; Auto vars:     Size  Location     Type
  7876 ;;		None
  7877 ;; Return value:  Size  Location     Type
  7878 ;;                  1    wreg      void 
  7879 ;; Registers used:
  7880 ;;		wreg, status,2, status,0, cstack
  7881 ;; Tracked objects:
  7882 ;;		On entry : 0/0
  7883 ;;		On exit  : 0/0
  7884 ;;		Unchanged: 0/0
  7885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7889 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7890 ;;Total ram usage:        0 bytes
  7891 ;; Hardware stack levels used:    1
  7892 ;; Hardware stack levels required when called:    3
  7893 ;; This function calls:
  7894 ;;		_I2C_2_Master_Start
  7895 ;;		_I2C_2_Master_Stop
  7896 ;;		_I2C_2_Master_Write
  7897 ;; This function is called by:
  7898 ;;		_main
  7899 ;; This function uses a non-reentrant model
  7900 ;;
  7901                           
  7902                           	psect	text44
  7903  003624                     __ptext44:
  7904                           	callstack 0
  7905  003624                     _color_interrupt_clearReset:
  7906                           	callstack 27
  7907  003624                     
  7908                           ;interrupts.c: 81:     I2C_2_Master_Start();
  7909  003624  EC2F  F01B         	call	_I2C_2_Master_Start	;wreg free
  7910                           
  7911                           ;interrupts.c: 82:     I2C_2_Master_Write(0x52 | 0x00);
  7912  003628  0E52               	movlw	82
  7913  00362A  EC24  F01B         	call	_I2C_2_Master_Write
  7914                           
  7915                           ;interrupts.c: 83:     I2C_2_Master_Write(0b11100110);
  7916  00362E  0EE6               	movlw	230
  7917  003630  EC24  F01B         	call	_I2C_2_Master_Write
  7918                           
  7919                           ;interrupts.c: 84:     I2C_2_Master_Stop();
  7920  003634  EC2A  F01B         	call	_I2C_2_Master_Stop	;wreg free
  7921  003638  0012               	return		;funcret
  7922  00363A                     __end_of_color_interrupt_clearReset:
  7923                           	callstack 0
  7924                           
  7925 ;; *************** function _color_click_init *****************
  7926 ;; Defined at:
  7927 ;;		line 61 in file "color.c"
  7928 ;; Parameters:    Size  Location     Type
  7929 ;;		None
  7930 ;; Auto vars:     Size  Location     Type
  7931 ;;		None
  7932 ;; Return value:  Size  Location     Type
  7933 ;;                  1    wreg      void 
  7934 ;; Registers used:
  7935 ;;		wreg, status,2, status,0, cstack
  7936 ;; Tracked objects:
  7937 ;;		On entry : 0/0
  7938 ;;		On exit  : 0/0
  7939 ;;		Unchanged: 0/0
  7940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7943 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7944 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7945 ;;Total ram usage:        1 bytes
  7946 ;; Hardware stack levels used:    1
  7947 ;; Hardware stack levels required when called:    4
  7948 ;; This function calls:
  7949 ;;		_I2C_2_Master_Init
  7950 ;;		_color_writetoaddr
  7951 ;; This function is called by:
  7952 ;;		_main
  7953 ;; This function uses a non-reentrant model
  7954 ;;
  7955                           
  7956                           	psect	text45
  7957  00331A                     __ptext45:
  7958                           	callstack 0
  7959  00331A                     _color_click_init:
  7960                           	callstack 26
  7961  00331A                     
  7962                           ;color.c: 64:     I2C_2_Master_Init();
  7963  00331A  ECD4  F019         	call	_I2C_2_Master_Init	;wreg free
  7964  00331E                     
  7965                           ;color.c: 66:     color_writetoaddr(0x00, 0x01);
  7966  00331E  0E01               	movlw	1
  7967  003320  6E03               	movwf	color_writetoaddr@value^0,c
  7968  003322  0E00               	movlw	0
  7969  003324  ECBC  F01A         	call	_color_writetoaddr
  7970  003328                     
  7971                           ;color.c: 67:     _delay((unsigned long)((3)*(64000000/4000.0)));
  7972  003328  0E3F               	movlw	63
  7973  00332A  6E05               	movwf	??_color_click_init^0,c
  7974  00332C  0E55               	movlw	85
  7975  00332E                     u3297:
  7976  00332E  2EE8               	decfsz	wreg,f,c
  7977  003330  D7FE               	bra	u3297
  7978  003332  2E05               	decfsz	??_color_click_init^0,f,c
  7979  003334  D7FC               	bra	u3297
  7980  003336  F000               	nop	
  7981  003338                     
  7982                           ;color.c: 69:     color_writetoaddr(0x00, 0x03);
  7983  003338  0E03               	movlw	3
  7984  00333A  6E03               	movwf	color_writetoaddr@value^0,c
  7985  00333C  0E00               	movlw	0
  7986  00333E  ECBC  F01A         	call	_color_writetoaddr
  7987  003342                     
  7988                           ;color.c: 70:     color_writetoaddr(0x01, 0xD5);
  7989  003342  0ED5               	movlw	213
  7990  003344  6E03               	movwf	color_writetoaddr@value^0,c
  7991  003346  0E01               	movlw	1
  7992  003348  ECBC  F01A         	call	_color_writetoaddr
  7993  00334C  0012               	return		;funcret
  7994  00334E                     __end_of_color_click_init:
  7995                           	callstack 0
  7996                           
  7997 ;; *************** function _I2C_2_Master_Init *****************
  7998 ;; Defined at:
  7999 ;;		line 7 in file "i2c.c"
  8000 ;; Parameters:    Size  Location     Type
  8001 ;;		None
  8002 ;; Auto vars:     Size  Location     Type
  8003 ;;		None
  8004 ;; Return value:  Size  Location     Type
  8005 ;;                  1    wreg      void 
  8006 ;; Registers used:
  8007 ;;		wreg, status,2
  8008 ;; Tracked objects:
  8009 ;;		On entry : 0/0
  8010 ;;		On exit  : 0/0
  8011 ;;		Unchanged: 0/0
  8012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8016 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8017 ;;Total ram usage:        0 bytes
  8018 ;; Hardware stack levels used:    1
  8019 ;; Hardware stack levels required when called:    1
  8020 ;; This function calls:
  8021 ;;		Nothing
  8022 ;; This function is called by:
  8023 ;;		_color_click_init
  8024 ;; This function uses a non-reentrant model
  8025 ;;
  8026                           
  8027                           	psect	text46
  8028  0033A8                     __ptext46:
  8029                           	callstack 0
  8030  0033A8                     _I2C_2_Master_Init:
  8031                           	callstack 28
  8032  0033A8                     
  8033                           ;i2c.c: 10:   SSP2CON1bits.SSPM= 0b1000;
  8034  0033A8  010E               	movlb	14	; () banked
  8035  0033AA  51D9               	movf	217,w,b	;volatile
  8036  0033AC  0BF0               	andlw	-16
  8037  0033AE  0908               	iorlw	8
  8038  0033B0  6FD9               	movwf	217,b	;volatile
  8039  0033B2                     
  8040                           ; BSR set to: 14
  8041                           ;i2c.c: 11:   SSP2CON1bits.SSPEN = 1;
  8042  0033B2  8BD9               	bsf	217,5,b	;volatile
  8043                           
  8044                           ;i2c.c: 12:   SSP2ADD = (64000000/(4*100000))-1;
  8045  0033B4  0E9F               	movlw	159
  8046  0033B6  6FD6               	movwf	214,b	;volatile
  8047  0033B8                     
  8048                           ; BSR set to: 14
  8049                           ;i2c.c: 15:   TRISDbits.TRISD5 = 1;
  8050  0033B8  8A84               	bsf	132,5,c	;volatile
  8051  0033BA                     
  8052                           ; BSR set to: 14
  8053                           ;i2c.c: 16:   TRISDbits.TRISD6 = 1;
  8054  0033BA  8C84               	bsf	132,6,c	;volatile
  8055  0033BC                     
  8056                           ; BSR set to: 14
  8057                           ;i2c.c: 17:   ANSELDbits.ANSELD5=0;
  8058  0033BC  9BA7               	bcf	167,5,b	;volatile
  8059  0033BE                     
  8060                           ; BSR set to: 14
  8061                           ;i2c.c: 18:   ANSELDbits.ANSELD6=0;
  8062  0033BE  9DA7               	bcf	167,6,b	;volatile
  8063                           
  8064                           ;i2c.c: 19:   SSP2DATPPS=0x1D;
  8065  0033C0  0E1D               	movlw	29
  8066  0033C2  6F1D               	movwf	29,b	;volatile
  8067                           
  8068                           ;i2c.c: 20:   SSP2CLKPPS=0x1E;
  8069  0033C4  0E1E               	movlw	30
  8070  0033C6  6F1C               	movwf	28,b	;volatile
  8071                           
  8072                           ;i2c.c: 21:   RD5PPS=0x1C;
  8073  0033C8  0E1C               	movlw	28
  8074  0033CA  6F6F               	movwf	111,b	;volatile
  8075                           
  8076                           ;i2c.c: 22:   RD6PPS=0x1B;
  8077  0033CC  0E1B               	movlw	27
  8078  0033CE  6F70               	movwf	112,b	;volatile
  8079  0033D0                     
  8080                           ; BSR set to: 14
  8081  0033D0  0012               	return		;funcret
  8082  0033D2                     __end_of_I2C_2_Master_Init:
  8083                           	callstack 0
  8084                           
  8085 ;; *************** function _Timer0_init *****************
  8086 ;; Defined at:
  8087 ;;		line 91 in file "interrupts.c"
  8088 ;; Parameters:    Size  Location     Type
  8089 ;;		None
  8090 ;; Auto vars:     Size  Location     Type
  8091 ;;		None
  8092 ;; Return value:  Size  Location     Type
  8093 ;;                  1    wreg      void 
  8094 ;; Registers used:
  8095 ;;		wreg, status,2
  8096 ;; Tracked objects:
  8097 ;;		On entry : 0/0
  8098 ;;		On exit  : 0/0
  8099 ;;		Unchanged: 0/0
  8100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8105 ;;Total ram usage:        0 bytes
  8106 ;; Hardware stack levels used:    1
  8107 ;; Hardware stack levels required when called:    1
  8108 ;; This function calls:
  8109 ;;		Nothing
  8110 ;; This function is called by:
  8111 ;;		_main
  8112 ;; This function uses a non-reentrant model
  8113 ;;
  8114                           
  8115                           	psect	text47
  8116  003558                     __ptext47:
  8117                           	callstack 0
  8118  003558                     _Timer0_init:
  8119                           	callstack 29
  8120  003558                     
  8121                           ;interrupts.c: 93:     T0CON1bits.T0CS=0b010;
  8122  003558  50D6               	movf	214,w,c	;volatile
  8123  00355A  0B1F               	andlw	-225
  8124  00355C  0940               	iorlw	64
  8125  00355E  6ED6               	movwf	214,c	;volatile
  8126  003560                     
  8127                           ;interrupts.c: 94:     T0CON1bits.T0ASYNC=1;
  8128  003560  88D6               	bsf	214,4,c	;volatile
  8129                           
  8130                           ;interrupts.c: 95:     T0CON1bits.T0CKPS=0b0110;
  8131  003562  50D6               	movf	214,w,c	;volatile
  8132  003564  0BF0               	andlw	-16
  8133  003566  0906               	iorlw	6
  8134  003568  6ED6               	movwf	214,c	;volatile
  8135  00356A                     
  8136                           ;interrupts.c: 96:     T0CON0bits.T016BIT=1;
  8137  00356A  88D5               	bsf	213,4,c	;volatile
  8138                           
  8139                           ;interrupts.c: 99:     TMR0H=3035 >> 8;
  8140  00356C  0E0B               	movlw	11
  8141  00356E  6ED4               	movwf	212,c	;volatile
  8142                           
  8143                           ;interrupts.c: 100:     TMR0L=3035 & 255;
  8144  003570  0EDB               	movlw	219
  8145  003572  6ED3               	movwf	211,c	;volatile
  8146  003574                     
  8147                           ;interrupts.c: 101:     T0CON0bits.T0EN=1;
  8148  003574  8ED5               	bsf	213,7,c	;volatile
  8149  003576  0012               	return		;funcret
  8150  003578                     __end_of_Timer0_init:
  8151                           	callstack 0
  8152                           
  8153 ;; *************** function _SOS *****************
  8154 ;; Defined at:
  8155 ;;		line 68 in file "buggyFunc.c"
  8156 ;; Parameters:    Size  Location     Type
  8157 ;;		None
  8158 ;; Auto vars:     Size  Location     Type
  8159 ;;  a               1    3[COMRAM] unsigned char 
  8160 ;; Return value:  Size  Location     Type
  8161 ;;                  1    wreg      void 
  8162 ;; Registers used:
  8163 ;;		wreg, status,2, status,0, cstack
  8164 ;; Tracked objects:
  8165 ;;		On entry : 0/0
  8166 ;;		On exit  : 0/0
  8167 ;;		Unchanged: 0/0
  8168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8170 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8171 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8172 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8173 ;;Total ram usage:        3 bytes
  8174 ;; Hardware stack levels used:    1
  8175 ;; Hardware stack levels required when called:    2
  8176 ;; This function calls:
  8177 ;;		_togHLamp
  8178 ;; This function is called by:
  8179 ;;		_main
  8180 ;; This function uses a non-reentrant model
  8181 ;;
  8182                           
  8183                           	psect	text48
  8184  002E14                     __ptext48:
  8185                           	callstack 0
  8186  002E14                     _SOS:
  8187                           	callstack 28
  8188  002E14                     
  8189                           ;buggyFunc.c: 70:     char a = 0;
  8190  002E14  0E00               	movlw	0
  8191  002E16  6E04               	movwf	SOS@a^0,c
  8192                           
  8193                           ;buggyFunc.c: 71:     while(a<6)
  8194  002E18  EF1D  F017         	goto	l3323
  8195  002E1C                     l3317:
  8196                           
  8197                           ;buggyFunc.c: 72:     {;buggyFunc.c: 73:     togHLamp();
  8198  002E1C  EC6B  F01A         	call	_togHLamp	;wreg free
  8199  002E20                     
  8200                           ;buggyFunc.c: 74:     _delay((unsigned long)((100)*(64000000/4000.0)));
  8201  002E20  0E09               	movlw	9
  8202  002E22  6E03               	movwf	(??_SOS+1)^0,c
  8203  002E24  0E1E               	movlw	30
  8204  002E26  6E02               	movwf	??_SOS^0,c
  8205  002E28  0EE4               	movlw	228
  8206  002E2A                     u3307:
  8207  002E2A  2EE8               	decfsz	wreg,f,c
  8208  002E2C  D7FE               	bra	u3307
  8209  002E2E  2E02               	decfsz	??_SOS^0,f,c
  8210  002E30  D7FC               	bra	u3307
  8211  002E32  2E03               	decfsz	(??_SOS+1)^0,f,c
  8212  002E34  D7FA               	bra	u3307
  8213  002E36  D000               	nop2	
  8214  002E38                     
  8215                           ;buggyFunc.c: 75:     a++;
  8216  002E38  2A04               	incf	SOS@a^0,f,c
  8217  002E3A                     l3323:
  8218                           
  8219                           ;buggyFunc.c: 71:     while(a<6)
  8220  002E3A  0E05               	movlw	5
  8221  002E3C  6404               	cpfsgt	SOS@a^0,c
  8222  002E3E  EF23  F017         	goto	u2941
  8223  002E42  EF25  F017         	goto	u2940
  8224  002E46                     u2941:
  8225  002E46  EF0E  F017         	goto	l3317
  8226  002E4A                     u2940:
  8227  002E4A  EF36  F017         	goto	l3331
  8228  002E4E                     l3325:
  8229                           
  8230                           ;buggyFunc.c: 78:     {;buggyFunc.c: 79:     togHLamp();
  8231  002E4E  EC6B  F01A         	call	_togHLamp	;wreg free
  8232  002E52                     
  8233                           ;buggyFunc.c: 80:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  8234  002E52  0E52               	movlw	82
  8235  002E54  6E03               	movwf	(??_SOS+1)^0,c
  8236  002E56  0E2B               	movlw	43
  8237  002E58  6E02               	movwf	??_SOS^0,c
  8238  002E5A  0E00               	movlw	0
  8239  002E5C                     u3317:
  8240  002E5C  2EE8               	decfsz	wreg,f,c
  8241  002E5E  D7FE               	bra	u3317
  8242  002E60  2E02               	decfsz	??_SOS^0,f,c
  8243  002E62  D7FC               	bra	u3317
  8244  002E64  2E03               	decfsz	(??_SOS+1)^0,f,c
  8245  002E66  D7FA               	bra	u3317
  8246  002E68  D000               	nop2	
  8247  002E6A                     
  8248                           ;buggyFunc.c: 81:     a++;
  8249  002E6A  2A04               	incf	SOS@a^0,f,c
  8250  002E6C                     l3331:
  8251                           
  8252                           ;buggyFunc.c: 77:     while(a<13)
  8253  002E6C  0E0C               	movlw	12
  8254  002E6E  6404               	cpfsgt	SOS@a^0,c
  8255  002E70  EF3C  F017         	goto	u2951
  8256  002E74  EF3E  F017         	goto	u2950
  8257  002E78                     u2951:
  8258  002E78  EF27  F017         	goto	l3325
  8259  002E7C                     u2950:
  8260  002E7C  EF4F  F017         	goto	l3339
  8261  002E80                     l3333:
  8262                           
  8263                           ;buggyFunc.c: 84:     {;buggyFunc.c: 85:     togHLamp();
  8264  002E80  EC6B  F01A         	call	_togHLamp	;wreg free
  8265  002E84                     
  8266                           ;buggyFunc.c: 86:     _delay((unsigned long)((100)*(64000000/4000.0)));
  8267  002E84  0E09               	movlw	9
  8268  002E86  6E03               	movwf	(??_SOS+1)^0,c
  8269  002E88  0E1E               	movlw	30
  8270  002E8A  6E02               	movwf	??_SOS^0,c
  8271  002E8C  0EE4               	movlw	228
  8272  002E8E                     u3327:
  8273  002E8E  2EE8               	decfsz	wreg,f,c
  8274  002E90  D7FE               	bra	u3327
  8275  002E92  2E02               	decfsz	??_SOS^0,f,c
  8276  002E94  D7FC               	bra	u3327
  8277  002E96  2E03               	decfsz	(??_SOS+1)^0,f,c
  8278  002E98  D7FA               	bra	u3327
  8279  002E9A  D000               	nop2	
  8280  002E9C                     
  8281                           ;buggyFunc.c: 87:     a++;
  8282  002E9C  2A04               	incf	SOS@a^0,f,c
  8283  002E9E                     l3339:
  8284                           
  8285                           ;buggyFunc.c: 83:     while(a<20)
  8286  002E9E  0E13               	movlw	19
  8287  002EA0  6404               	cpfsgt	SOS@a^0,c
  8288  002EA2  EF55  F017         	goto	u2961
  8289  002EA6  EF57  F017         	goto	u2960
  8290  002EAA                     u2961:
  8291  002EAA  EF40  F017         	goto	l3333
  8292  002EAE                     u2960:
  8293  002EAE  0012               	return		;funcret
  8294  002EB0                     __end_of_SOS:
  8295                           	callstack 0
  8296                           
  8297 ;; *************** function _togHLamp *****************
  8298 ;; Defined at:
  8299 ;;		line 44 in file "buggyFunc.c"
  8300 ;; Parameters:    Size  Location     Type
  8301 ;;		None
  8302 ;; Auto vars:     Size  Location     Type
  8303 ;;		None
  8304 ;; Return value:  Size  Location     Type
  8305 ;;                  1    wreg      void 
  8306 ;; Registers used:
  8307 ;;		wreg, status,2, status,0
  8308 ;; Tracked objects:
  8309 ;;		On entry : 0/0
  8310 ;;		On exit  : 0/0
  8311 ;;		Unchanged: 0/0
  8312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8315 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8316 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8317 ;;Total ram usage:        1 bytes
  8318 ;; Hardware stack levels used:    1
  8319 ;; Hardware stack levels required when called:    1
  8320 ;; This function calls:
  8321 ;;		Nothing
  8322 ;; This function is called by:
  8323 ;;		_main
  8324 ;;		_SOS
  8325 ;; This function uses a non-reentrant model
  8326 ;;
  8327                           
  8328                           	psect	text49
  8329  0034D6                     __ptext49:
  8330                           	callstack 0
  8331  0034D6                     _togHLamp:
  8332                           	callstack 29
  8333  0034D6                     
  8334                           ;buggyFunc.c: 45:     LATHbits.LATH1 = !LATHbits.LATH1;
  8335  0034D6  A280               	btfss	128,1,c	;volatile
  8336  0034D8  EF70  F01A         	goto	u2281
  8337  0034DC  EF74  F01A         	goto	u2280
  8338  0034E0                     u2281:
  8339  0034E0  6A01               	clrf	??_togHLamp^0,c
  8340  0034E2  2A01               	incf	??_togHLamp^0,f,c
  8341  0034E4  EF75  F01A         	goto	u2298
  8342  0034E8                     u2280:
  8343  0034E8  6A01               	clrf	??_togHLamp^0,c
  8344  0034EA                     u2298:
  8345  0034EA  4601               	rlncf	??_togHLamp^0,f,c
  8346  0034EC  5080               	movf	128,w,c	;volatile
  8347  0034EE  1801               	xorwf	??_togHLamp^0,w,c
  8348  0034F0  0BFD               	andlw	-3
  8349  0034F2  1801               	xorwf	??_togHLamp^0,w,c
  8350  0034F4  6E80               	movwf	128,c	;volatile
  8351  0034F6  0012               	return		;funcret
  8352  0034F8                     __end_of_togHLamp:
  8353                           	callstack 0
  8354                           
  8355 ;; *************** function _Interrupts_init *****************
  8356 ;; Defined at:
  8357 ;;		line 13 in file "interrupts.c"
  8358 ;; Parameters:    Size  Location     Type
  8359 ;;		None
  8360 ;; Auto vars:     Size  Location     Type
  8361 ;;		None
  8362 ;; Return value:  Size  Location     Type
  8363 ;;                  1    wreg      void 
  8364 ;; Registers used:
  8365 ;;		wreg, status,2
  8366 ;; Tracked objects:
  8367 ;;		On entry : 0/0
  8368 ;;		On exit  : 0/0
  8369 ;;		Unchanged: 0/0
  8370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8374 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8375 ;;Total ram usage:        0 bytes
  8376 ;; Hardware stack levels used:    1
  8377 ;; Hardware stack levels required when called:    1
  8378 ;; This function calls:
  8379 ;;		Nothing
  8380 ;; This function is called by:
  8381 ;;		_main
  8382 ;; This function uses a non-reentrant model
  8383 ;;
  8384                           
  8385                           	psect	text50
  8386  0035D6                     __ptext50:
  8387                           	callstack 0
  8388  0035D6                     _Interrupts_init:
  8389                           	callstack 29
  8390  0035D6                     
  8391                           ;interrupts.c: 16:     TRISBbits.TRISB0 = 1;
  8392  0035D6  8082               	bsf	130,0,c	;volatile
  8393                           
  8394                           ;interrupts.c: 17:     ANSELBbits.ANSELB0 = 0;
  8395  0035D8  010E               	movlb	14	; () banked
  8396  0035DA  919A               	bcf	154,0,b	;volatile
  8397                           
  8398                           ;interrupts.c: 18:     INT0PPSbits.PORT = 0b001;
  8399  0035DC  010D               	movlb	13	; () banked
  8400  0035DE  87F0               	bsf	240,3,b	;volatile
  8401  0035E0                     
  8402                           ; BSR set to: 13
  8403                           ;interrupts.c: 19:     INT0PPSbits.PIN = 0;
  8404  0035E0  0EF8               	movlw	-8
  8405  0035E2  17F0               	andwf	240,f,b	;volatile
  8406  0035E4                     
  8407                           ; BSR set to: 13
  8408                           ;interrupts.c: 20:     INTCONbits.INT0EDG = 0;
  8409  0035E4  90F2               	bcf	242,0,c	;volatile
  8410  0035E6                     
  8411                           ; BSR set to: 13
  8412                           ;interrupts.c: 22:     PIE0bits.TMR0IE = 1;
  8413  0035E6  010E               	movlb	14	; () banked
  8414  0035E8  8B29               	bsf	41,5,b	;volatile
  8415  0035EA                     
  8416                           ; BSR set to: 14
  8417                           ;interrupts.c: 24:     INTCONbits.GIEL = 1;
  8418  0035EA  8CF2               	bsf	242,6,c	;volatile
  8419  0035EC                     
  8420                           ; BSR set to: 14
  8421                           ;interrupts.c: 25:     PIE0bits.INT0IE = 1;
  8422  0035EC  8129               	bsf	41,0,b	;volatile
  8423  0035EE                     
  8424                           ; BSR set to: 14
  8425                           ;interrupts.c: 26:     INTCONbits.GIE = 1;
  8426  0035EE  8EF2               	bsf	242,7,c	;volatile
  8427  0035F0                     
  8428                           ; BSR set to: 14
  8429  0035F0  0012               	return		;funcret
  8430  0035F2                     __end_of_Interrupts_init:
  8431                           	callstack 0
  8432                           
  8433 ;; *************** function _Interrupts_colorclick_init *****************
  8434 ;; Defined at:
  8435 ;;		line 33 in file "interrupts.c"
  8436 ;; Parameters:    Size  Location     Type
  8437 ;;		None
  8438 ;; Auto vars:     Size  Location     Type
  8439 ;;  threshold       2    0        unsigned int 
  8440 ;;  threshLow       1    0        unsigned char 
  8441 ;;  threshHigh      1    0        unsigned char 
  8442 ;; Return value:  Size  Location     Type
  8443 ;;                  1    wreg      void 
  8444 ;; Registers used:
  8445 ;;		wreg, status,2, status,0, cstack
  8446 ;; Tracked objects:
  8447 ;;		On entry : 0/0
  8448 ;;		On exit  : 0/0
  8449 ;;		Unchanged: 0/0
  8450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8452 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8454 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8455 ;;Total ram usage:        4 bytes
  8456 ;; Hardware stack levels used:    1
  8457 ;; Hardware stack levels required when called:    4
  8458 ;; This function calls:
  8459 ;;		_I2C_2_Master_RepStart
  8460 ;;		_I2C_2_Master_Start
  8461 ;;		_color_writetoaddr
  8462 ;; This function is called by:
  8463 ;;		_main
  8464 ;; This function uses a non-reentrant model
  8465 ;;
  8466                           
  8467                           	psect	text51
  8468  0031D8                     __ptext51:
  8469                           	callstack 0
  8470  0031D8                     _Interrupts_colorclick_init:
  8471                           	callstack 26
  8472  0031D8                     
  8473                           ;interrupts.c: 35:     color_writetoaddr(0x04,0x00);
  8474  0031D8  0E00               	movlw	0
  8475  0031DA  6E03               	movwf	color_writetoaddr@value^0,c
  8476  0031DC  0E04               	movlw	4
  8477  0031DE  ECBC  F01A         	call	_color_writetoaddr
  8478                           
  8479                           ;interrupts.c: 36:     color_writetoaddr(0x05,0x00);
  8480  0031E2  0E00               	movlw	0
  8481  0031E4  6E03               	movwf	color_writetoaddr@value^0,c
  8482  0031E6  0E05               	movlw	5
  8483  0031E8  ECBC  F01A         	call	_color_writetoaddr
  8484  0031EC                     
  8485                           ;interrupts.c: 42:     color_writetoaddr(0x06,threshLow);
  8486  0031EC  0E7A               	movlw	122
  8487  0031EE  6E03               	movwf	color_writetoaddr@value^0,c
  8488  0031F0  0E06               	movlw	6
  8489  0031F2  ECBC  F01A         	call	_color_writetoaddr
  8490  0031F6                     
  8491                           ;interrupts.c: 43:     color_writetoaddr(0x07,threshHigh);
  8492  0031F6  0E03               	movlw	3
  8493  0031F8  6E03               	movwf	color_writetoaddr@value^0,c
  8494  0031FA  0E07               	movlw	7
  8495  0031FC  ECBC  F01A         	call	_color_writetoaddr
  8496  003200                     
  8497                           ;interrupts.c: 47:     color_writetoaddr(0x0C,0b1);
  8498  003200  0E01               	movlw	1
  8499  003202  6E03               	movwf	color_writetoaddr@value^0,c
  8500  003204  0E0C               	movlw	12
  8501  003206  ECBC  F01A         	call	_color_writetoaddr
  8502  00320A                     
  8503                           ;interrupts.c: 48:     color_writetoaddr(0x00,0b00011011);
  8504  00320A  0E1B               	movlw	27
  8505  00320C  6E03               	movwf	color_writetoaddr@value^0,c
  8506  00320E  0E00               	movlw	0
  8507  003210  ECBC  F01A         	call	_color_writetoaddr
  8508  003214                     
  8509                           ;interrupts.c: 51:     I2C_2_Master_Start();
  8510  003214  EC2F  F01B         	call	_I2C_2_Master_Start	;wreg free
  8511  003218                     
  8512                           ;interrupts.c: 52:     I2C_2_Master_RepStart();
  8513  003218  EC34  F01B         	call	_I2C_2_Master_RepStart	;wreg free
  8514  00321C  0012               	return		;funcret
  8515  00321E                     __end_of_Interrupts_colorclick_init:
  8516                           	callstack 0
  8517                           
  8518 ;; *************** function _color_writetoaddr *****************
  8519 ;; Defined at:
  8520 ;;		line 77 in file "color.c"
  8521 ;; Parameters:    Size  Location     Type
  8522 ;;  address         1    wreg     unsigned char 
  8523 ;;  value           1    2[COMRAM] unsigned char 
  8524 ;; Auto vars:     Size  Location     Type
  8525 ;;  address         1    3[COMRAM] unsigned char 
  8526 ;; Return value:  Size  Location     Type
  8527 ;;                  1    wreg      void 
  8528 ;; Registers used:
  8529 ;;		wreg, status,2, status,0, cstack
  8530 ;; Tracked objects:
  8531 ;;		On entry : 0/0
  8532 ;;		On exit  : 0/0
  8533 ;;		Unchanged: 0/0
  8534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8535 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8536 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8538 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8539 ;;Total ram usage:        2 bytes
  8540 ;; Hardware stack levels used:    1
  8541 ;; Hardware stack levels required when called:    3
  8542 ;; This function calls:
  8543 ;;		_I2C_2_Master_Start
  8544 ;;		_I2C_2_Master_Stop
  8545 ;;		_I2C_2_Master_Write
  8546 ;; This function is called by:
  8547 ;;		_color_click_init
  8548 ;;		_Interrupts_colorclick_init
  8549 ;; This function uses a non-reentrant model
  8550 ;;
  8551                           
  8552                           	psect	text52
  8553  003578                     __ptext52:
  8554                           	callstack 0
  8555  003578                     _color_writetoaddr:
  8556                           	callstack 26
  8557                           
  8558                           ;incstack = 0
  8559                           ;color_writetoaddr@address stored from wreg
  8560  003578  6E04               	movwf	color_writetoaddr@address^0,c
  8561  00357A                     
  8562                           ;color.c: 78:     I2C_2_Master_Start();
  8563  00357A  EC2F  F01B         	call	_I2C_2_Master_Start	;wreg free
  8564                           
  8565                           ;color.c: 79:     I2C_2_Master_Write(0x52 | 0x00);
  8566  00357E  0E52               	movlw	82
  8567  003580  EC24  F01B         	call	_I2C_2_Master_Write
  8568                           
  8569                           ;color.c: 80:     I2C_2_Master_Write(0x80 | address);
  8570  003584  5004               	movf	color_writetoaddr@address^0,w,c
  8571  003586  0980               	iorlw	128
  8572  003588  EC24  F01B         	call	_I2C_2_Master_Write
  8573                           
  8574                           ;color.c: 81:     I2C_2_Master_Write(value);
  8575  00358C  5003               	movf	color_writetoaddr@value^0,w,c
  8576  00358E  EC24  F01B         	call	_I2C_2_Master_Write
  8577                           
  8578                           ;color.c: 82:     I2C_2_Master_Stop();
  8579  003592  EC2A  F01B         	call	_I2C_2_Master_Stop	;wreg free
  8580  003596  0012               	return		;funcret
  8581  003598                     __end_of_color_writetoaddr:
  8582                           	callstack 0
  8583                           
  8584 ;; *************** function _I2C_2_Master_Write *****************
  8585 ;; Defined at:
  8586 ;;		line 63 in file "i2c.c"
  8587 ;; Parameters:    Size  Location     Type
  8588 ;;  data_byte       1    wreg     unsigned char 
  8589 ;; Auto vars:     Size  Location     Type
  8590 ;;  data_byte       1    1[COMRAM] unsigned char 
  8591 ;; Return value:  Size  Location     Type
  8592 ;;                  1    wreg      void 
  8593 ;; Registers used:
  8594 ;;		wreg, status,2, status,0, cstack
  8595 ;; Tracked objects:
  8596 ;;		On entry : 0/0
  8597 ;;		On exit  : 0/0
  8598 ;;		Unchanged: 0/0
  8599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8601 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8603 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8604 ;;Total ram usage:        1 bytes
  8605 ;; Hardware stack levels used:    1
  8606 ;; Hardware stack levels required when called:    2
  8607 ;; This function calls:
  8608 ;;		_I2C_2_Master_Idle
  8609 ;; This function is called by:
  8610 ;;		_color_writetoaddr
  8611 ;;		_color_read
  8612 ;;		_color_interrupt_clearReset
  8613 ;; This function uses a non-reentrant model
  8614 ;;
  8615                           
  8616                           	psect	text53
  8617  003648                     __ptext53:
  8618                           	callstack 0
  8619  003648                     _I2C_2_Master_Write:
  8620                           	callstack 25
  8621                           
  8622                           ;incstack = 0
  8623                           ;I2C_2_Master_Write@data_byte stored from wreg
  8624  003648  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  8625  00364A                     
  8626                           ;i2c.c: 63: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 64: {;i2c.c: 65:   I
      +                          2C_2_Master_Idle();
  8627  00364A  ECE9  F019         	call	_I2C_2_Master_Idle	;wreg free
  8628  00364E                     
  8629                           ;i2c.c: 66:   SSP2BUF = data_byte;
  8630  00364E  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  8631  003652  0012               	return		;funcret
  8632  003654                     __end_of_I2C_2_Master_Write:
  8633                           	callstack 0
  8634                           
  8635 ;; *************** function _I2C_2_Master_Stop *****************
  8636 ;; Defined at:
  8637 ;;		line 54 in file "i2c.c"
  8638 ;; Parameters:    Size  Location     Type
  8639 ;;		None
  8640 ;; Auto vars:     Size  Location     Type
  8641 ;;		None
  8642 ;; Return value:  Size  Location     Type
  8643 ;;                  1    wreg      void 
  8644 ;; Registers used:
  8645 ;;		wreg, status,2, status,0, cstack
  8646 ;; Tracked objects:
  8647 ;;		On entry : 0/0
  8648 ;;		On exit  : 0/0
  8649 ;;		Unchanged: 0/0
  8650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8655 ;;Total ram usage:        0 bytes
  8656 ;; Hardware stack levels used:    1
  8657 ;; Hardware stack levels required when called:    2
  8658 ;; This function calls:
  8659 ;;		_I2C_2_Master_Idle
  8660 ;; This function is called by:
  8661 ;;		_color_writetoaddr
  8662 ;;		_color_read
  8663 ;;		_color_interrupt_clearReset
  8664 ;; This function uses a non-reentrant model
  8665 ;;
  8666                           
  8667                           	psect	text54
  8668  003654                     __ptext54:
  8669                           	callstack 0
  8670  003654                     _I2C_2_Master_Stop:
  8671                           	callstack 25
  8672  003654                     
  8673                           ;i2c.c: 56:   I2C_2_Master_Idle();
  8674  003654  ECE9  F019         	call	_I2C_2_Master_Idle	;wreg free
  8675  003658                     
  8676                           ;i2c.c: 57:   SSP2CON2bits.PEN = 1;
  8677  003658  010E               	movlb	14	; () banked
  8678  00365A  85DA               	bsf	218,2,b	;volatile
  8679  00365C                     
  8680                           ; BSR set to: 14
  8681  00365C  0012               	return		;funcret
  8682  00365E                     __end_of_I2C_2_Master_Stop:
  8683                           	callstack 0
  8684                           
  8685 ;; *************** function _I2C_2_Master_Start *****************
  8686 ;; Defined at:
  8687 ;;		line 36 in file "i2c.c"
  8688 ;; Parameters:    Size  Location     Type
  8689 ;;		None
  8690 ;; Auto vars:     Size  Location     Type
  8691 ;;		None
  8692 ;; Return value:  Size  Location     Type
  8693 ;;                  1    wreg      void 
  8694 ;; Registers used:
  8695 ;;		wreg, status,2, status,0, cstack
  8696 ;; Tracked objects:
  8697 ;;		On entry : 0/0
  8698 ;;		On exit  : 0/0
  8699 ;;		Unchanged: 0/0
  8700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8705 ;;Total ram usage:        0 bytes
  8706 ;; Hardware stack levels used:    1
  8707 ;; Hardware stack levels required when called:    2
  8708 ;; This function calls:
  8709 ;;		_I2C_2_Master_Idle
  8710 ;; This function is called by:
  8711 ;;		_color_writetoaddr
  8712 ;;		_color_read
  8713 ;;		_Interrupts_colorclick_init
  8714 ;;		_color_interrupt_clearReset
  8715 ;; This function uses a non-reentrant model
  8716 ;;
  8717                           
  8718                           	psect	text55
  8719  00365E                     __ptext55:
  8720                           	callstack 0
  8721  00365E                     _I2C_2_Master_Start:
  8722                           	callstack 25
  8723  00365E                     
  8724                           ;i2c.c: 38:   I2C_2_Master_Idle();
  8725  00365E  ECE9  F019         	call	_I2C_2_Master_Idle	;wreg free
  8726  003662                     
  8727                           ;i2c.c: 39:   SSP2CON2bits.SEN = 1;
  8728  003662  010E               	movlb	14	; () banked
  8729  003664  81DA               	bsf	218,0,b	;volatile
  8730  003666                     
  8731                           ; BSR set to: 14
  8732  003666  0012               	return		;funcret
  8733  003668                     __end_of_I2C_2_Master_Start:
  8734                           	callstack 0
  8735                           
  8736 ;; *************** function _I2C_2_Master_RepStart *****************
  8737 ;; Defined at:
  8738 ;;		line 45 in file "i2c.c"
  8739 ;; Parameters:    Size  Location     Type
  8740 ;;		None
  8741 ;; Auto vars:     Size  Location     Type
  8742 ;;		None
  8743 ;; Return value:  Size  Location     Type
  8744 ;;                  1    wreg      void 
  8745 ;; Registers used:
  8746 ;;		wreg, status,2, status,0, cstack
  8747 ;; Tracked objects:
  8748 ;;		On entry : 0/0
  8749 ;;		On exit  : 0/0
  8750 ;;		Unchanged: 0/0
  8751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8755 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8756 ;;Total ram usage:        0 bytes
  8757 ;; Hardware stack levels used:    1
  8758 ;; Hardware stack levels required when called:    2
  8759 ;; This function calls:
  8760 ;;		_I2C_2_Master_Idle
  8761 ;; This function is called by:
  8762 ;;		_color_read
  8763 ;;		_Interrupts_colorclick_init
  8764 ;; This function uses a non-reentrant model
  8765 ;;
  8766                           
  8767                           	psect	text56
  8768  003668                     __ptext56:
  8769                           	callstack 0
  8770  003668                     _I2C_2_Master_RepStart:
  8771                           	callstack 25
  8772  003668                     
  8773                           ;i2c.c: 47:   I2C_2_Master_Idle();
  8774  003668  ECE9  F019         	call	_I2C_2_Master_Idle	;wreg free
  8775  00366C                     
  8776                           ;i2c.c: 48:   SSP2CON2bits.RSEN = 1;
  8777  00366C  010E               	movlb	14	; () banked
  8778  00366E  83DA               	bsf	218,1,b	;volatile
  8779  003670                     
  8780                           ; BSR set to: 14
  8781  003670  0012               	return		;funcret
  8782  003672                     __end_of_I2C_2_Master_RepStart:
  8783                           	callstack 0
  8784                           
  8785 ;; *************** function _I2C_2_Master_Idle *****************
  8786 ;; Defined at:
  8787 ;;		line 28 in file "i2c.c"
  8788 ;; Parameters:    Size  Location     Type
  8789 ;;		None
  8790 ;; Auto vars:     Size  Location     Type
  8791 ;;		None
  8792 ;; Return value:  Size  Location     Type
  8793 ;;                  1    wreg      void 
  8794 ;; Registers used:
  8795 ;;		wreg, status,2, status,0
  8796 ;; Tracked objects:
  8797 ;;		On entry : 0/0
  8798 ;;		On exit  : 0/0
  8799 ;;		Unchanged: 0/0
  8800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8803 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8804 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8805 ;;Total ram usage:        1 bytes
  8806 ;; Hardware stack levels used:    1
  8807 ;; Hardware stack levels required when called:    1
  8808 ;; This function calls:
  8809 ;;		Nothing
  8810 ;; This function is called by:
  8811 ;;		_I2C_2_Master_Start
  8812 ;;		_I2C_2_Master_RepStart
  8813 ;;		_I2C_2_Master_Stop
  8814 ;;		_I2C_2_Master_Write
  8815 ;;		_I2C_2_Master_Read
  8816 ;; This function uses a non-reentrant model
  8817 ;;
  8818                           
  8819                           	psect	text57
  8820  0033D2                     __ptext57:
  8821                           	callstack 0
  8822  0033D2                     _I2C_2_Master_Idle:
  8823                           	callstack 25
  8824  0033D2                     l120:
  8825  0033D2  010E               	movlb	14	; () banked
  8826  0033D4  B5D8               	btfsc	216,2,b	;volatile
  8827  0033D6  EFEF  F019         	goto	u1621
  8828  0033DA  EFF1  F019         	goto	u1620
  8829  0033DE                     u1621:
  8830  0033DE  EFE9  F019         	goto	l120
  8831  0033E2                     u1620:
  8832  0033E2                     
  8833                           ; BSR set to: 14
  8834  0033E2  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  8835  0033E6  0E1F               	movlw	31
  8836  0033E8  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  8837  0033EA  A4D8               	btfss	status,2,c
  8838  0033EC  EFFA  F019         	goto	u1631
  8839  0033F0  EFFC  F019         	goto	u1630
  8840  0033F4                     u1631:
  8841  0033F4  EFE9  F019         	goto	l120
  8842  0033F8                     u1630:
  8843  0033F8                     
  8844                           ; BSR set to: 14
  8845  0033F8  0012               	return		;funcret
  8846  0033FA                     __end_of_I2C_2_Master_Idle:
  8847                           	callstack 0
  8848                           
  8849 ;; *************** function _ADC_init *****************
  8850 ;; Defined at:
  8851 ;;		line 8 in file "battery.c"
  8852 ;; Parameters:    Size  Location     Type
  8853 ;;		None
  8854 ;; Auto vars:     Size  Location     Type
  8855 ;;		None
  8856 ;; Return value:  Size  Location     Type
  8857 ;;                  1    wreg      void 
  8858 ;; Registers used:
  8859 ;;		wreg, status,2
  8860 ;; Tracked objects:
  8861 ;;		On entry : 0/0
  8862 ;;		On exit  : 0/0
  8863 ;;		Unchanged: 0/0
  8864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8869 ;;Total ram usage:        0 bytes
  8870 ;; Hardware stack levels used:    1
  8871 ;; Hardware stack levels required when called:    1
  8872 ;; This function calls:
  8873 ;;		Nothing
  8874 ;; This function is called by:
  8875 ;;		_main
  8876 ;; This function uses a non-reentrant model
  8877 ;;
  8878                           
  8879                           	psect	text58
  8880  0035F2                     __ptext58:
  8881                           	callstack 0
  8882  0035F2                     _ADC_init:
  8883                           	callstack 29
  8884  0035F2                     
  8885                           ;battery.c: 10:     TRISFbits.TRISF6=1;
  8886  0035F2  8C86               	bsf	134,6,c	;volatile
  8887                           
  8888                           ;battery.c: 11:     ANSELFbits.ANSELF6=1;
  8889  0035F4  010E               	movlb	14	; () banked
  8890  0035F6  8DB4               	bsf	180,6,b	;volatile
  8891                           
  8892                           ;battery.c: 13:     ADREFbits.ADNREF = 0;
  8893  0035F8  010F               	movlb	15	; () banked
  8894  0035FA  9958               	bcf	88,4,b	;volatile
  8895  0035FC                     
  8896                           ; BSR set to: 15
  8897                           ;battery.c: 14:     ADREFbits.ADPREF = 0b00;
  8898  0035FC  0EFC               	movlw	-4
  8899  0035FE  1758               	andwf	88,f,b	;volatile
  8900                           
  8901                           ;battery.c: 15:     ADPCH=0b101110 ;
  8902  003600  0E2E               	movlw	46
  8903  003602  6F5F               	movwf	95,b	;volatile
  8904  003604                     
  8905                           ; BSR set to: 15
  8906                           ;battery.c: 16:     ADCON0bits.ADFM = 0;
  8907  003604  9460               	bcf	96,2,c	;volatile
  8908  003606                     
  8909                           ; BSR set to: 15
  8910                           ;battery.c: 17:     ADCON0bits.ADCS = 1;
  8911  003606  8860               	bsf	96,4,c	;volatile
  8912  003608                     
  8913                           ; BSR set to: 15
  8914                           ;battery.c: 18:     ADCON0bits.ADON = 1;
  8915  003608  8E60               	bsf	96,7,c	;volatile
  8916  00360A                     
  8917                           ; BSR set to: 15
  8918  00360A  0012               	return		;funcret
  8919  00360C                     __end_of_ADC_init:
  8920                           	callstack 0
  8921                           
  8922 ;; *************** function _ADC_getval *****************
  8923 ;; Defined at:
  8924 ;;		line 25 in file "battery.c"
  8925 ;; Parameters:    Size  Location     Type
  8926 ;;		None
  8927 ;; Auto vars:     Size  Location     Type
  8928 ;;  tmpval          2    2[COMRAM] unsigned int 
  8929 ;; Return value:  Size  Location     Type
  8930 ;;                  2    0[COMRAM] unsigned int 
  8931 ;; Registers used:
  8932 ;;		None
  8933 ;; Tracked objects:
  8934 ;;		On entry : 0/0
  8935 ;;		On exit  : 0/0
  8936 ;;		Unchanged: 0/0
  8937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8938 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8939 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8941 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8942 ;;Total ram usage:        4 bytes
  8943 ;; Hardware stack levels used:    1
  8944 ;; Hardware stack levels required when called:    1
  8945 ;; This function calls:
  8946 ;;		Nothing
  8947 ;; This function is called by:
  8948 ;;		_main
  8949 ;; This function uses a non-reentrant model
  8950 ;;
  8951                           
  8952                           	psect	text59
  8953  003598                     __ptext59:
  8954                           	callstack 0
  8955  003598                     _ADC_getval:
  8956                           	callstack 29
  8957  003598                     
  8958                           ;battery.c: 27:     unsigned int tmpval;;battery.c: 29:     ADCON0bits.GO = 1;
  8959  003598  8060               	bsf	96,0,c	;volatile
  8960  00359A                     l523:
  8961  00359A  B060               	btfsc	96,0,c	;volatile
  8962  00359C  EFD2  F01A         	goto	u2881
  8963  0035A0  EFD4  F01A         	goto	u2880
  8964  0035A4                     u2881:
  8965  0035A4  EFCD  F01A         	goto	l523
  8966  0035A8                     u2880:
  8967  0035A8                     
  8968                           ;battery.c: 31:     tmpval = ADRESH;
  8969  0035A8  CF64 F003          	movff	3940,ADC_getval@tmpval	;volatile
  8970  0035AC  6A04               	clrf	(ADC_getval@tmpval+1)^0,c
  8971                           
  8972                           ;battery.c: 32:     return tmpval;
  8973  0035AE  C003  F001         	movff	ADC_getval@tmpval,?_ADC_getval
  8974  0035B2  C004  F002         	movff	ADC_getval@tmpval+1,?_ADC_getval+1
  8975  0035B6  0012               	return		;funcret
  8976  0035B8                     __end_of_ADC_getval:
  8977                           	callstack 0
  8978                           
  8979 ;; *************** function _HighISR *****************
  8980 ;; Defined at:
  8981 ;;		line 60 in file "interrupts.c"
  8982 ;; Parameters:    Size  Location     Type
  8983 ;;		None
  8984 ;; Auto vars:     Size  Location     Type
  8985 ;;		None
  8986 ;; Return value:  Size  Location     Type
  8987 ;;                  1    wreg      void 
  8988 ;; Registers used:
  8989 ;;		None
  8990 ;; Tracked objects:
  8991 ;;		On entry : 0/0
  8992 ;;		On exit  : 0/0
  8993 ;;		Unchanged: 0/0
  8994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8998 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8999 ;;Total ram usage:        0 bytes
  9000 ;; Hardware stack levels used:    1
  9001 ;; This function calls:
  9002 ;;		Nothing
  9003 ;; This function is called by:
  9004 ;;		Interrupt level 2
  9005 ;; This function uses a non-reentrant model
  9006 ;;
  9007                           
  9008                           	psect	intcode
  9009  000008                     __pintcode:
  9010                           	callstack 0
  9011  000008                     _HighISR:
  9012                           	callstack 22
  9013                           
  9014                           ;incstack = 0
  9015  000008  825E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  9016  00000A                     
  9017                           ;interrupts.c: 64:     if (PIR0bits.INT0IF){
  9018  00000A  010E               	movlb	14	; () banked
  9019  00000C  A133               	btfss	51,0,b	;volatile
  9020  00000E  EF0B  F000         	goto	i2u156_41
  9021  000012  EF0D  F000         	goto	i2u156_40
  9022  000016                     i2u156_41:
  9023  000016  EF0F  F000         	goto	i2l464
  9024  00001A                     i2u156_40:
  9025  00001A                     
  9026                           ; BSR set to: 14
  9027                           ;interrupts.c: 65:         LATDbits.LATD7 = 1;
  9028  00001A  8E7C               	bsf	124,7,c	;volatile
  9029                           
  9030                           ;interrupts.c: 67:         PIR0bits.INT0IF = 0;
  9031  00001C  9133               	bcf	51,0,b	;volatile
  9032  00001E                     i2l464:
  9033                           
  9034                           ; BSR set to: 14
  9035                           ;interrupts.c: 70:     if (PIR0bits.TMR0IF){
  9036  00001E  AB33               	btfss	51,5,b	;volatile
  9037  000020  EF14  F000         	goto	i2u157_41
  9038  000024  EF16  F000         	goto	i2u157_40
  9039  000028                     i2u157_41:
  9040  000028  EF18  F000         	goto	i2l466
  9041  00002C                     i2u157_40:
  9042  00002C                     
  9043                           ; BSR set to: 14
  9044                           ;interrupts.c: 71:         LATHbits.LATH3 = 1;
  9045  00002C  8680               	bsf	128,3,c	;volatile
  9046                           
  9047                           ;interrupts.c: 72:         PIR0bits.TMR0IF = 0;
  9048  00002E  9B33               	bcf	51,5,b	;volatile
  9049  000030                     i2l466:
  9050                           
  9051                           ; BSR set to: 14
  9052  000030  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  9053  000032  0011               	retfie		f
  9054  000034                     __end_of_HighISR:
  9055                           	callstack 0
  9056                           
  9057                           	psect	rparam
  9058  0000                     
  9059                           	psect	temp
  9060  00005E                     btemp:
  9061                           	callstack 0
  9062  00005E                     	ds	1
  9063  0000                     int$flags	set	btemp
  9064  0000                     wtemp8	set	btemp+1
  9065  0000                     ttemp5	set	btemp+1
  9066  0000                     ttemp6	set	btemp+4
  9067  0000                     ttemp7	set	btemp+8
  9068                           
  9069                           	psect	idloc
  9070                           
  9071                           ;Config register IDLOC0 @ 0x200000
  9072                           ;	unspecified, using default values
  9073  200000                     	org	2097152
  9074  200000  0FFF               	dw	4095
  9075                           
  9076                           ;Config register IDLOC1 @ 0x200002
  9077                           ;	unspecified, using default values
  9078  200002                     	org	2097154
  9079  200002  0FFF               	dw	4095
  9080                           
  9081                           ;Config register IDLOC2 @ 0x200004
  9082                           ;	unspecified, using default values
  9083  200004                     	org	2097156
  9084  200004  0FFF               	dw	4095
  9085                           
  9086                           ;Config register IDLOC3 @ 0x200006
  9087                           ;	unspecified, using default values
  9088  200006                     	org	2097158
  9089  200006  0FFF               	dw	4095
  9090                           
  9091                           ;Config register IDLOC4 @ 0x200008
  9092                           ;	unspecified, using default values
  9093  200008                     	org	2097160
  9094  200008  0FFF               	dw	4095
  9095                           
  9096                           ;Config register IDLOC5 @ 0x20000A
  9097                           ;	unspecified, using default values
  9098  20000A                     	org	2097162
  9099  20000A  0FFF               	dw	4095
  9100                           
  9101                           ;Config register IDLOC6 @ 0x20000C
  9102                           ;	unspecified, using default values
  9103  20000C                     	org	2097164
  9104  20000C  0FFF               	dw	4095
  9105                           
  9106                           ;Config register IDLOC7 @ 0x20000E
  9107                           ;	unspecified, using default values
  9108  20000E                     	org	2097166
  9109  20000E  0FFF               	dw	4095
  9110                           
  9111                           	psect	config
  9112                           
  9113                           ;Config register CONFIG1L @ 0x300000
  9114                           ;	External Oscillator mode Selection bits
  9115                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  9116                           ;	Power-up default value for COSC bits
  9117                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  9118  300000                     	org	3145728
  9119  300000  AA                 	db	170
  9120                           
  9121                           ;Config register CONFIG1H @ 0x300001
  9122                           ;	unspecified, using default values
  9123                           ;	Clock Out Enable bit
  9124                           ;	CLKOUTEN = 0x1, unprogrammed default
  9125                           ;	Clock Switch Enable bit
  9126                           ;	CSWEN = 0x1, unprogrammed default
  9127                           ;	Fail-Safe Clock Monitor Enable bit
  9128                           ;	FCMEN = 0x1, unprogrammed default
  9129  300001                     	org	3145729
  9130  300001  FF                 	db	255
  9131                           
  9132                           ;Config register CONFIG2L @ 0x300002
  9133                           ;	unspecified, using default values
  9134                           ;	Master Clear Enable bit
  9135                           ;	MCLRE = 0x1, unprogrammed default
  9136                           ;	Power-up Timer Enable bit
  9137                           ;	PWRTE = 0x1, unprogrammed default
  9138                           ;	Low-power BOR enable bit
  9139                           ;	LPBOREN = 0x1, unprogrammed default
  9140                           ;	Brown-out Reset Enable bits
  9141                           ;	BOREN = 0x3, unprogrammed default
  9142  300002                     	org	3145730
  9143  300002  FF                 	db	255
  9144                           
  9145                           ;Config register CONFIG2H @ 0x300003
  9146                           ;	unspecified, using default values
  9147                           ;	Brown Out Reset Voltage selection bits
  9148                           ;	BORV = 0x3, unprogrammed default
  9149                           ;	ZCD Disable bit
  9150                           ;	ZCD = 0x1, unprogrammed default
  9151                           ;	PPSLOCK bit One-Way Set Enable bit
  9152                           ;	PPS1WAY = 0x1, unprogrammed default
  9153                           ;	Stack Full/Underflow Reset Enable bit
  9154                           ;	STVREN = 0x1, unprogrammed default
  9155                           ;	Debugger Enable bit
  9156                           ;	DEBUG = 0x1, unprogrammed default
  9157                           ;	Extended Instruction Set Enable bit
  9158                           ;	XINST = 0x1, unprogrammed default
  9159  300003                     	org	3145731
  9160  300003  FF                 	db	255
  9161                           
  9162                           ;Config register CONFIG3L @ 0x300004
  9163                           ;	WDT Period Select bits
  9164                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  9165                           ;	WDT operating mode
  9166                           ;	WDTE = OFF, WDT Disabled
  9167  300004                     	org	3145732
  9168  300004  9F                 	db	159
  9169                           
  9170                           ;Config register CONFIG3H @ 0x300005
  9171                           ;	unspecified, using default values
  9172                           ;	WDT Window Select bits
  9173                           ;	WDTCWS = 0x7, unprogrammed default
  9174                           ;	WDT input clock selector
  9175                           ;	WDTCCS = 0x7, unprogrammed default
  9176  300005                     	org	3145733
  9177  300005  FF                 	db	255
  9178                           
  9179                           ;Config register CONFIG4L @ 0x300006
  9180                           ;	unspecified, using default values
  9181                           ;	Write Protection Block 0
  9182                           ;	WRT0 = 0x1, unprogrammed default
  9183                           ;	Write Protection Block 1
  9184                           ;	WRT1 = 0x1, unprogrammed default
  9185                           ;	Write Protection Block 2
  9186                           ;	WRT2 = 0x1, unprogrammed default
  9187                           ;	Write Protection Block 3
  9188                           ;	WRT3 = 0x1, unprogrammed default
  9189                           ;	Write Protection Block 3
  9190                           ;	WRT4 = 0x1, unprogrammed default
  9191                           ;	Write Protection Block 3
  9192                           ;	WRT5 = 0x1, unprogrammed default
  9193                           ;	Write Protection Block 3
  9194                           ;	WRT6 = 0x1, unprogrammed default
  9195                           ;	Write Protection Block 3
  9196                           ;	WRT7 = 0x1, unprogrammed default
  9197  300006                     	org	3145734
  9198  300006  FF                 	db	255
  9199                           
  9200                           ;Config register CONFIG4H @ 0x300007
  9201                           ;	unspecified, using default values
  9202                           ;	Configuration Register Write Protection bit
  9203                           ;	WRTC = 0x1, unprogrammed default
  9204                           ;	Boot Block Write Protection bit
  9205                           ;	WRTB = 0x1, unprogrammed default
  9206                           ;	Data EEPROM Write Protection bit
  9207                           ;	WRTD = 0x1, unprogrammed default
  9208                           ;	Scanner Enable bit
  9209                           ;	SCANE = 0x1, unprogrammed default
  9210                           ;	Low Voltage Programming Enable bit
  9211                           ;	LVP = 0x1, unprogrammed default
  9212  300007                     	org	3145735
  9213  300007  FF                 	db	255
  9214                           
  9215                           ;Config register CONFIG5L @ 0x300008
  9216                           ;	unspecified, using default values
  9217                           ;	UserNVM Program Memory Code Protection bit
  9218                           ;	CP = 0x1, unprogrammed default
  9219                           ;	DataNVM Memory Code Protection bit
  9220                           ;	CPD = 0x1, unprogrammed default
  9221  300008                     	org	3145736
  9222  300008  FF                 	db	255
  9223                           
  9224                           ;Config register CONFIG5H @ 0x300009
  9225                           ;	unspecified, using default values
  9226  300009                     	org	3145737
  9227  300009  FF                 	db	255
  9228                           
  9229                           ;Config register CONFIG6L @ 0x30000A
  9230                           ;	unspecified, using default values
  9231                           ;	Table Read Protection Block 0
  9232                           ;	EBTR0 = 0x1, unprogrammed default
  9233                           ;	Table Read Protection Block 1
  9234                           ;	EBTR1 = 0x1, unprogrammed default
  9235                           ;	Table Read Protection Block 2
  9236                           ;	EBTR2 = 0x1, unprogrammed default
  9237                           ;	Table Read Protection Block 3
  9238                           ;	EBTR3 = 0x1, unprogrammed default
  9239                           ;	Table Read Protection Block 4
  9240                           ;	EBTR4 = 0x1, unprogrammed default
  9241                           ;	Table Read Protection Block 5
  9242                           ;	EBTR5 = 0x1, unprogrammed default
  9243                           ;	Table Read Protection Block 6
  9244                           ;	EBTR6 = 0x1, unprogrammed default
  9245                           ;	Table Read Protection Block 7
  9246                           ;	EBTR7 = 0x1, unprogrammed default
  9247  30000A                     	org	3145738
  9248  30000A  FF                 	db	255
  9249                           
  9250                           ;Config register CONFIG6H @ 0x30000B
  9251                           ;	unspecified, using default values
  9252                           ;	Boot Block Table Read Protection bit
  9253                           ;	EBTRB = 0x1, unprogrammed default
  9254  30000B                     	org	3145739
  9255  30000B  FF                 	db	255
  9256                           tosu	equ	0xFFF
  9257                           tosh	equ	0xFFE
  9258                           tosl	equ	0xFFD
  9259                           stkptr	equ	0xFFC
  9260                           pclatu	equ	0xFFB
  9261                           pclath	equ	0xFFA
  9262                           pcl	equ	0xFF9
  9263                           tblptru	equ	0xFF8
  9264                           tblptrh	equ	0xFF7
  9265                           tblptrl	equ	0xFF6
  9266                           tablat	equ	0xFF5
  9267                           prodh	equ	0xFF4
  9268                           prodl	equ	0xFF3
  9269                           indf0	equ	0xFEF
  9270                           postinc0	equ	0xFEE
  9271                           postdec0	equ	0xFED
  9272                           preinc0	equ	0xFEC
  9273                           plusw0	equ	0xFEB
  9274                           fsr0h	equ	0xFEA
  9275                           fsr0l	equ	0xFE9
  9276                           wreg	equ	0xFE8
  9277                           indf1	equ	0xFE7
  9278                           postinc1	equ	0xFE6
  9279                           postdec1	equ	0xFE5
  9280                           preinc1	equ	0xFE4
  9281                           plusw1	equ	0xFE3
  9282                           fsr1h	equ	0xFE2
  9283                           fsr1l	equ	0xFE1
  9284                           bsr	equ	0xFE0
  9285                           indf2	equ	0xFDF
  9286                           postinc2	equ	0xFDE
  9287                           postdec2	equ	0xFDD
  9288                           preinc2	equ	0xFDC
  9289                           plusw2	equ	0xFDB
  9290                           fsr2h	equ	0xFDA
  9291                           fsr2l	equ	0xFD9
  9292                           status	equ	0xFD8

Data Sizes:
    Strings     18
    Constant    0
    Data        0
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     93      93
    BANK0           160    134     142
    BANK1           256      0      32
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 10
		 -> main@battery_level(BANK0[10]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_1(CODE[18]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 18
		 -> STR_1(CODE[18]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_1(CODE[18]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 10
		 -> main@battery_level(BANK0[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S2718_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> main@battery_level(BANK0[10]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 10
		 -> main@battery_level(BANK0[10]), 

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 10
		 -> main@battery_level(BANK0[10]), 

    motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    shuffle@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    shuffle@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    shuffle@mR	PTR struct DC_motor size(2) Largest target is 10
		 -> main@motorR(BANK0[8]), 

    shuffle@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    shuffle@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    shuffle@mL	PTR struct DC_motor size(2) Largest target is 10
		 -> main@motorL(BANK0[8]), 

    turnFunction@tL	PTR struct turnDelay size(2) Largest target is 11
		 -> main@turnL(BANK0[11]), 

    turnFunction@tR	PTR struct turnDelay size(2) Largest target is 11
		 -> main@turnR(BANK0[11]), 

    fullSpeedAhead@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 10
		 -> main@motorR(BANK0[8]), 

    fullSpeedAhead@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 10
		 -> main@motorL(BANK0[8]), 

    turnAngle@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnAngle@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    turnAngle@mR	PTR struct DC_motor size(2) Largest target is 10
		 -> main@motorR(BANK0[8]), 

    turnAngle@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnAngle@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    turnAngle@mL	PTR struct DC_motor size(2) Largest target is 10
		 -> main@motorL(BANK0[8]), 

    stop@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 10
		 -> main@motorR(BANK0[8]), 

    stop@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 10
		 -> main@motorL(BANK0[8]), 

    setTurnDelay@tR	PTR struct turnDelay size(2) Largest target is 11
		 -> main@turnR(BANK0[11]), 

    setTurnDelay@tL	PTR struct turnDelay size(2) Largest target is 11
		 -> main@turnL(BANK0[11]), 

    setMotorPWM@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 10
		 -> main@motorR(BANK0[8]), main@motorL(BANK0[8]), 

    initDCmotorsPWM@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    initDCmotorsPWM@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    initDCmotorsPWM@mR	PTR struct DC_motor size(2) Largest target is 10
		 -> main@motorR(BANK0[8]), 

    S244DC_motor$dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    initDCmotorsPWM@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    S244DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    initDCmotorsPWM@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(SFR_3[1]), PWM6DCH(SFR_3[1]), 

    initDCmotorsPWM@mL	PTR struct DC_motor size(2) Largest target is 10
		 -> main@motorL(BANK0[8]), 

    identifier@mR	PTR struct DC_motor size(2) Largest target is 10
		 -> main@motorR(BANK0[8]), 

    identifier@mL	PTR struct DC_motor size(2) Largest target is 10
		 -> main@motorL(BANK0[8]), 

    identifier@aB	PTR struct RGBC_val size(2) Largest target is 8
		 -> main@ambientB(BANK0[8]), 

    identifier@aG	PTR struct RGBC_val size(2) Largest target is 8
		 -> main@ambientG(BANK0[8]), 

    identifier@aR	PTR struct RGBC_val size(2) Largest target is 8
		 -> main@ambientR(BANK0[8]), 

    identifier@aC	PTR struct RGBC_val size(2) Largest target is 8
		 -> main@ambientC(BANK0[8]), 

    calibrate@n	PTR struct RGBC_val size(2) Largest target is 8
		 -> main@ambientB(BANK0[8]), main@ambientG(BANK0[8]), main@ambientR(BANK0[8]), main@ambientC(BANK0[8]), 

    calibrate@v	PTR struct RGBC_val size(2) Largest target is 8
		 -> identifier@blueVals(COMRAM[8]), identifier@greenVals(COMRAM[8]), identifier@redVals(COMRAM[8]), identifier@vals(COMRAM[8]), 

    scan@B	PTR struct RGBC_val size(2) Largest target is 8
		 -> main@ambientB(BANK0[8]), identifier@blueVals(COMRAM[8]), 

    scan@G	PTR struct RGBC_val size(2) Largest target is 8
		 -> main@ambientG(BANK0[8]), identifier@greenVals(COMRAM[8]), 

    scan@R	PTR struct RGBC_val size(2) Largest target is 8
		 -> main@ambientR(BANK0[8]), identifier@redVals(COMRAM[8]), 

    scan@C	PTR struct RGBC_val size(2) Largest target is 8
		 -> main@ambientC(BANK0[8]), identifier@vals(COMRAM[8]), 

    color_read_RGBC@RGBC	PTR struct RGBC_val size(2) Largest target is 8
		 -> main@ambientB(BANK0[8]), main@ambientG(BANK0[8]), main@ambientR(BANK0[8]), main@ambientC(BANK0[8]), 
		 -> identifier@blueVals(COMRAM[8]), identifier@greenVals(COMRAM[8]), identifier@redVals(COMRAM[8]), identifier@vals(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _turnAngle->_setMotorPWM
    ___lwdiv->___wmul
    _stop->_setMotorPWM
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _setTurnDelay->___wmul
    _sendStringSerial4->_sendCharSerial4
    _initDCmotorsPWM->_setMotorPWM
    _identifier->_shuffle
    _shuffle->_setMotorPWM
    ___wmul->_ADC_getval
    _scan->_color_read_RGBC
    _color_read_RGBC->_color_read
    _color_read->_I2C_2_Master_Read
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___awdiv
    _color_interrupt_clearReset->_I2C_2_Master_Write
    _color_click_init->_color_writetoaddr
    _SOS->_togHLamp
    _Interrupts_colorclick_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               124   124      0   41213
                                             10 BANK0    124   124      0
                         _ADC_getval
                           _ADC_init
         _Interrupts_colorclick_init
                    _Interrupts_init
                                _SOS
                        _Timer0_init
                            ___lwdiv
                             ___wmul
                   _color_click_init
         _color_interrupt_clearReset
                     _fullSpeedAhead
                         _identifier
                    _initDCmotorsPWM
                         _initDebugs
                            _initRGB
                         _initUSART4
                       _returnSwitch
                               _scan
                  _sendStringSerial4
                       _setTurnDelay
                            _shuffle
                            _sprintf
                               _stop
                           _togBrake
                           _togHLamp
                           _togMBeam
                          _toggleRGB
                          _turnAngle
                       _turnFunction
 ---------------------------------------------------------------------------------
 (1) _turnFunction                                         8     3      5    1297
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _turnAngle                                           11     3      8    3365
                                             19 COMRAM    11     3      8
                            ___lwdiv
                        _setMotorPWM
                           _togLTurn
                           _togRTurn
 ---------------------------------------------------------------------------------
 (2) _togRTurn                                             1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _togLTurn                                             1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     466
                                             10 COMRAM     7     3      4
                         _ADC_getval (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _toggleRGB                                            1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _togMBeam                                             1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _togBrake                                             1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _stop                                                 5     1      4    2458
                                             19 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    6456
                                             87 COMRAM     6     0      6
                                              0 BANK0     10    10      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    6105
                                             79 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           42    36      6    5751
                                             63 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4358
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _setTurnDelay                                        10     4      6    2355
                                             10 COMRAM    10     4      6
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _sendStringSerial4                                    2     0      2     143
                                              1 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (2) _sendCharSerial4                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _returnSwitch                                         1     1      0     154
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRGB                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDebugs                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      5     1      4    2374
                                             19 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _identifier                                          51    39     12    8213
                                             29 COMRAM    51    39     12
                          _calibrate
                               _scan
                            _shuffle
 ---------------------------------------------------------------------------------
 (1) _shuffle                                             10     4      6    4343
                                             19 COMRAM    10     4      6
                             ___wmul
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1467
                                              4 COMRAM     6     2      4
                         _ADC_getval (ARG)
 ---------------------------------------------------------------------------------
 (1) _scan                                                10     2      8    1527
                                             14 COMRAM    10     2      8
                    _color_read_RGBC
                            _toggleB
                            _toggleG
                            _toggleR
 ---------------------------------------------------------------------------------
 (2) _toggleR                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _toggleG                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _toggleB                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _color_read_RGBC                                      2     0      2     527
                                             12 COMRAM     2     0      2
                         _color_read
 ---------------------------------------------------------------------------------
 (3) _color_read                                           8     6      2     135
                                              4 COMRAM     8     6      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _calibrate                                            8     4      4     872
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       9     2      7    2720
                                             19 COMRAM     9     2      7
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                         11     9      2    1892
                                              8 COMRAM    11     9      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     496
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _color_interrupt_clearReset                           0     0      0      22
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     750
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SOS                                                  3     3      0      70
                                              1 COMRAM     3     3      0
                           _togHLamp
 ---------------------------------------------------------------------------------
 (1) _togHLamp                                             1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_colorclick_init                           4     4      0     863
                                              4 COMRAM     4     4      0
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     750
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_getval                                           4     2      2      23
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _HighISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_getval
   _ADC_init
   _Interrupts_colorclick_init
     _I2C_2_Master_RepStart
       _I2C_2_Master_Idle
     _I2C_2_Master_Start
       _I2C_2_Master_Idle
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _Interrupts_init
   _SOS
     _togHLamp
   _Timer0_init
   ___lwdiv
     _ADC_getval (ARG)
     ___wmul (ARG)
       _ADC_getval (ARG)
   ___wmul
     _ADC_getval (ARG)
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _color_interrupt_clearReset
     _I2C_2_Master_Start
       _I2C_2_Master_Idle
     _I2C_2_Master_Stop
       _I2C_2_Master_Idle
     _I2C_2_Master_Write
       _I2C_2_Master_Idle
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
   _identifier
     _calibrate
     _scan
       _color_read_RGBC
         _color_read
           _I2C_2_Master_Read
             _I2C_2_Master_Idle
           _I2C_2_Master_RepStart
             _I2C_2_Master_Idle
           _I2C_2_Master_Start
             _I2C_2_Master_Idle
           _I2C_2_Master_Stop
             _I2C_2_Master_Idle
           _I2C_2_Master_Write
             _I2C_2_Master_Idle
       _toggleB
       _toggleG
       _toggleR
     _shuffle
       ___wmul
         _ADC_getval (ARG)
       _setMotorPWM
         ___awdiv
   _initDCmotorsPWM
     _setMotorPWM
       ___awdiv
   _initDebugs
   _initRGB
   _initUSART4
   _returnSwitch
   _scan
     _color_read_RGBC
       _color_read
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
     _toggleB
     _toggleG
     _toggleR
   _sendStringSerial4
     _sendCharSerial4
   _setTurnDelay
     ___wmul
       _ADC_getval (ARG)
   _shuffle
     ___wmul
       _ADC_getval (ARG)
     _setMotorPWM
       ___awdiv
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch
   _stop
     _setMotorPWM
       ___awdiv
   _togBrake
   _togHLamp
   _togMBeam
   _toggleRGB
   _turnAngle
     ___lwdiv
       _ADC_getval (ARG)
       ___wmul (ARG)
         _ADC_getval (ARG)
     _setMotorPWM
       ___awdiv
     _togLTurn
     _togRTurn
   _turnFunction

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      33        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      20       7       12.5%
BITBANK13           EA      0       0      31        0.0%
BANK13              EA      0       0      32        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     86      8E       5       88.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5D      5D       1       98.9%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     10B       8        0.0%
DATA                 0      0     10B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Tue Mar 23 11:17:05 2021

                    _color_read_RGBC 3010                                   l33 3646  
                                 l42 34B2                                   l51 3596  
                                 l60 2D64                                   l36 300E  
                                 l45 346A                                   l54 3184  
                                 l63 2A5E                                   l39 3556  
                                 l48 334C                                   l80 15CE  
                                 l72 14BA                                   l57 3074  
                                 l73 14DE                                   l90 178A  
                                 l74 1502                                   l75 1526  
                                 l67 1408                                   l76 154A  
                                 l77 156E                                   l69 1788  
                                 l78 158E                                   l79 15AE  
                       ___awdiv@sign 0006                  ___wmul@multiplicand 0007  
                  ??_Interrupts_init 0001                                  l120 33D2  
                                l210 24C4                                  l123 33F8  
                                l132 365C                                  l117 33D0  
                                l205 3130                                  l221 25AA  
                                l213 2518                                  l126 3666  
                                l135 3652                                  l224 2F10  
                                l129 3670                                  l401 34D4  
                                l241 1F1C                                  l138 32A2  
                                l218 2586                                  l227 2F34  
                                l251 2E12                                  l404 3536  
                                l261 278E                                  l270 2838  
                                l407 3516                                  l247 1F28  
                                l520 360A                                  l505 337C  
                                l345 0F48                                  l194 20E8  
                                l362 11A6                                  l523 359A  
                                l419 2EAE                                  l187 2958  
                                l348 0F98                                  l525 35A8  
                                l373 1340                                  l526 35B6  
                                l198 1CF8                                  l199 1D18  
                                l456 35F0                                  l472 3576  
                                l392 348E                                  l368 12B8  
                                l529 3444                                  l459 321C  
                                l395 34F6                                  l643 2424  
                                l469 3638                                  l493 35D4  
                                l398 341E                                  l760 2CB2  
                                l496 360E                                  l656 270E  
                                l499 3622                                  _SOS 2E14  
                                _abs 32A4                                  _pad 2B2A  
                      returnSwitch@C 0001                                  wreg 000FE8  
                __size_of_ADC_getval 0020                                 ?_SOS 0001  
                               l1020 2FA0                                 l1027 2FA8  
                               ?_abs 0013                                 l1207 31D6  
                               l3001 2894                                 l1306 3260  
                               l1234 2B70                                 l3011 28E8  
                               l3003 28A8                                 l1315 3318  
                               l3021 2940                                 l3013 28F8  
                               l3005 28BC                                 l1309 3672  
                               l1237 2BB2                                 l1245 182C  
                               l3101 2514                                 l3023 294C  
                               l3015 290C                                 l3007 28CC  
                               l3031 1AA8                                 l1239 2BEE  
                               l1247 1834                                 l3103 2532  
                               l3111 256E                                 l1272 229C  
                               l3121 2ED4                                 l3017 2920  
                               l3009 28DC                                 l3041 1B1C  
                               l3033 1ABC                                 l3025 1A70  
                               l1265 1A6E                                 l3113 2594  
                               l3105 2546                                 l3123 2EE8  
                               l3019 2930                                 l3211 2E0A  
                               l3203 2DE0                                 l3051 1BF6  
                               l3035 1AD0                                 l3027 1A84  
                               l3043 1B34                                 l1283 32DA  
                               l3115 2598                                 l3107 2552  
                               l3131 1D2C                                 l3125 2EF4  
                               l3221 35B8                                 l3205 2DF2  
                               l3301 334E                                 l3053 1C36  
                               l3045 1B5E                                 l3037 1AF4  
                               l3029 1A94                                 l2501 2330  
                               l2421 2A84                                 l3061 30D8  
                               l3117 25A6                                 l3109 255E  
                               l3141 1DC8                                 l3133 1D54  
                               l1286 32E2                                 l1278 30CE  
                               l2431 33D2                                 l3311 3624  
                               l3127 2F00                                 l3119 2EB0  
                               l3231 35D2                                 l3223 35C2  
                               l3303 3352                                 l3055 1C60  
                               l3047 1B8E                                 l3039 1B08  
                               l2511 239A                                 l2503 2338  
                               l2423 2A8E                                 l1279 30D6  
                               l3063 30DC                                 l3071 3118  
                               l3151 1E4E                                 l3143 1DDA  
                               l3135 1D66                                 l2433 33E2  
                               l3241 31EC                                 l3233 31D8  
                               l3321 2E38                                 l2601 2C0A  
                               l3225 35C4                                 l3217 2E10  
                               l3209 2DF8                                 l3305 3360  
                               l3057 1C90                                 l3049 1BBE  
                               l2521 23E4                                 l2513 23BA  
                               l2505 234C                                 l2425 2AAC  
                               l2417 2A60                                 l2441 3240  
                               l3065 30F0                                 l3313 34B4  
                               l3081 2460                                 l3073 2426  
                               l3161 1EA8                                 l3153 1E5E  
                               l3145 1E02                                 l3137 1D8E  
                               l3129 1D1A                                 l3401 0F70  
                               l1298 2B28                                 l3251 3218  
                               l3243 31F6                                 l3235 31EC  
                               l3331 2E6C                                 l3323 2E3A  
                               l3315 2E14                                 l2611 2C30  
                               l2603 2C0E                                 l3227 35CE  
                               l3307 3364                                 l3059 1CC0  
                               l2523 2404                                 l2515 23BC  
                               l2507 235A                                 l2531 25BE  
                               l2427 2AE2                                 l2419 2A72  
                               l2435 321E                                 l2443 32E4  
                               l3067 30FC                                 l3091 24A8  
                               l3083 2464                                 l3075 2438  
                               l3163 1EBA                                 l3155 1E72  
                               l3147 1E14                                 l3139 1DA0  
                               l3411 0FDC                                 l3403 0F94  
                               l2453 365E                                 l2461 3654  
                               l3245 3200                                 l3237 31EC  
                               l3261 35EA                                 l3253 35D6  
                               l3333 2E80                                 l3325 2E4E  
                               l3317 2E1C                                 l2621 2C66  
                               l2613 2C42                                 l2605 2C1C  
                               l2701 3538                                 l3229 35D0  
                               l3181 2D92                                 l3173 2D68  
                               l2517 23CE                                 l2509 236C  
                               l2541 262E                                 l2533 25DE  
                               l2437 322A                                 l2445 32F0  
                               l3069 3108                                 l3309 33FA  
                               l3093 24B4                                 l3085 2474  
                               l3077 243C                                 l3165 1EE2  
                               l3157 1E84                                 l3149 1E3C  
                               l3501 12F4                                 l3421 1040  
                               l3413 0FDE                                 l3405 0FAA  
                               l3341 0E14                                 l3271 35FC  
                               l2455 3662                                 l2463 3658  
                               l3247 320A                                 l3239 31EC  
                               l3263 35EC                                 l3255 35E0  
                               l3335 2E84                                 l3327 2E52  
                               l3319 2E20                                 l2623 2C7C  
                               l2615 2C4A                                 l2631 2C92  
                               l2607 2C24                                 l2711 1F46  
                               l2471 3268                                 l2703 3490  
                               l3191 2DB0                                 l3175 2D7A  
                               l2519 23D4                                 l2551 26A6  
                               l2543 2636                                 l2535 25E2  
                               l2527 25AC                                 l2439 323C  
                               l2447 32F4                                 l3095 24DC  
                               l3087 2488                                 l3079 244C  
                               l3167 1EF4                                 l3159 1E94  
                               l3503 12F6                                 l3431 106C  
                               l3423 1050                                 l3415 0FEC  
                               l3407 0FCA                                 l3351 0E34  
                               l3343 0E18                                 l3273 3604  
                               l2465 3668                                 l2457 364A  
                               l3249 3214                                 l3265 35EE  
                               l3257 35E4                                 l3337 2E9C  
                               l3329 2E6A                                 l3281 3560  
                               l2633 2CA2                                 l2625 2C84  
                               l2617 2C52                                 l2609 2C28  
                               l2721 2080                                 l2713 1F9E  
                               l2473 3270                                 l2705 3446  
                               l2801 2D24                                 l3193 2DC2  
                               l3185 2D98                                 l2553 26B8  
                               l2545 264A                                 l2537 25F0  
                               l2529 25B0                                 l2449 330C  
                               l2641 17AC                                 l3097 24F8  
                               l3089 249C                                 l3169 1F1C  
                               l3505 1314                                 l3441 10C2  
                               l3433 107C                                 l3425 1060  
                               l3417 0FF0                                 l3409 0FD8  
                               l3361 0E52                                 l3353 0E34  
                               l3345 0E1C                                 l3275 3606  
                               l2467 366C                                 l2459 364E  
                               l3259 35E6                                 l3339 2E9E  
                               l3283 356A                                 l2635 2CAA  
                               l2627 2C86                                 l2619 2C60  
                               l2715 1FDA                                 l2475 3278  
                               l2707 3010                                 l2811 2D60  
                               l2803 2D30                                 l2723 3420  
                               l3267 346C                                 l3187 2DAA  
                               l3179 2D80                                 l2491 22D4  
                               l2483 229E                                 l2547 2658  
                               l2555 26BE                                 l2539 2610  
                               l2571 2B68                                 l2563 2B2A  
                               l2651 1820                                 l2643 17D4  
                               l2731 210E                                 l3291 3198  
                               l3099 2504                                 l3507 1328  
                               l3443 10E6                                 l3427 1062  
                               l3435 1090                                 l3419 1004  
                               l3451 1114                                 l3371 0E94  
                               l3363 0E56                                 l3355 0E3E  
                               l3347 0E24                                 l3277 3608  
                               l3269 35F2                                 l3285 3574  
                               l2629 2C8C                                 l2717 1FFA  
                               l2709 1F2A                                 l2813 295A  
                               l2477 329E                                 l2469 3264  
                               l2805 2D34                                 l2725 343C  
                               l2821 2766                                 l2901 136C  
                               l3197 2DC8                                 l2493 22E2  
                               l2485 22A2                                 l2557 26CE  
                               l2549 2686                                 l2581 2BD6  
                               l2573 2B7C                                 l2565 2B3A  
                               l2661 186A                                 l2653 183C  
                               l2645 17F4                                 l2741 217A  
                               l2733 211C                                 l3293 31A0  
                               l3509 1330                                 l3461 1164  
                               l3453 1128                                 l3445 1108  
                               l3437 10AC                                 l3429 1066  
                               l3381 0ED8                                 l3373 0EB0  
                               l3365 0E5A                                 l3357 0E46  
                               l3349 0E28                                 l3287 3598  
                               l3279 3558                                 l2719 2016  
                               l2479 32A0                                 l2591 317C  
                               l2807 2D50                                 l2831 27D0  
                               l2823 2772                                 l2815 2710  
                               l2911 13C4                                 l2903 1380  
                               l3199 2DDA                                 l2495 2302  
                               l2487 22B0                                 l2559 26EE  
                               l2575 2B90                                 l2567 2B4E  
                               l2671 1908                                 l2663 1874  
                               l2655 184E                                 l2647 1804  
                               l2639 178C                                 l2751 222C  
                               l2743 21C2                                 l2735 212E  
                               l3295 31A8                                 l3471 11A8  
                               l3463 1168                                 l3455 1148  
                               l3447 110E                                 l3439 10BE  
                               l3391 0F28                                 l3383 0EF0  
                               l3375 0EBC                                 l3367 0E5C  
                               l3359 0E4E                                 l2809 2D5C  
                               l2833 27E4                                 l2841 2820  
                               l2825 277E                                 l2817 2730  
                               l2921 142E                                 l2913 13E0  
                               l2905 1394                                 l2497 2306  
                               l2489 22D0                                 l2585 32A4  
                               l2577 2B94                                 l2569 2B5C  
                               l2681 19D8                                 l2665 187A  
                               l2673 196C                                 l2657 185C  
                               l2649 1806                                 l2753 2240  
                               l2737 2132                                 l2729 20EA  
                               l3297 31C4                                 l3289 3186  
                               l3481 11FC                                 l3473 11C2  
                               l3457 114C                                 l3449 1110  
                               l3465 116C                                 l3393 0F2C  
                               l3377 0ED4                                 l3385 0EF4  
                               l3369 0E60                                 l2771 33A8  
                               l2595 2BF0                                 l2835 27F8  
                               l2827 27B6                                 l2819 2752  
                               l2931 14B2                                 l2923 144E  
                               l2915 13E4                                 l2907 13A8  
                               l2851 361E                                 l2499 2312  
                               l2587 32BE                                 l2579 2BC2  
                               l2691 1A22                                 l2675 1986  
                               l2683 19E8                                 l2667 18FC  
                               l2659 1862                                 l2747 21FA  
                               l2739 2156                                 l2763 2266  
                               l2843 34F8                                 l3491 1272  
                               l3483 11FC                                 l3475 11C4  
                               l3467 118A                                 l3459 1150  
                               l3395 0F2C                                 l3387 0F0C  
                               l3379 0ED4                                 l2781 33BE  
                               l2773 33B2                                 l2597 2BF4  
                               l2589 3134                                 l2837 2804  
                               l2829 27CE                                 l2941 1566  
                               l2933 14D6                                 l2925 1456  
                               l2917 1400                                 l2909 13BC  
                               l2693 1A2E                                 l2685 19FA  
                               l2677 19A4                                 l2669 1902  
                               l2765 228A                                 l2749 221E  
                               l2757 224C                                 l2861 2F60  
                               l2853 2F36                                 l2845 3518  
                               l3493 1294                                 l3485 1204  
                               l3477 11CA                                 l3469 119A  
                               l3397 0F56                                 l3389 0F10  
                               ?_pad 0011                                 l2783 357A  
                               l2847 34D6                                 l2775 33B8  
                               l2599 2C02                                 l2791 2CDC  
                               l2839 2810                                 l2951 15FC  
                               l2943 158A                                 l2935 14FA  
                               l2927 1472                                 l2919 1426  
                               l2695 1A36                                 l2687 1A0A  
                               l2679 19BE                                 l2759 225A  
                               l2871 2F94                                 l2863 2F6E  
                               l2855 2F3E                                 l3495 12C6  
                               l3487 1220                                 l3479 11E4  
                               l3399 0F6C                                 l2777 33BA  
                               l2793 2CE0                                 l2785 2CB4  
                               l2961 168E                                 l2953 162C  
                               l2945 15AA                                 l2937 151E  
                               l2929 1496                                 l2849 360E  
                               l2689 1A10                                 l2697 1A46  
                               l2881 30B2                                 l2873 2F9A  
                               l2865 2F74                                 l2857 2F50  
                               l3497 12E0                                 l3489 1240  
                               l2779 33BC                                 l2891 3328  
                               l2795 2D04                                 l2787 2CCC  
                               l2971 16F0                                 l2963 1692  
                               l2955 1630                                 l2947 15CA  
                               l2939 1542                                 l2883 363A  
                               l2875 3076                                 l2867 2F8A  
                               l2859 2F58                                 l3499 12E4  
                               l2893 3338                                 l2797 2D08  
                               l2789 2CD8                                 l2981 1784  
                               l2973 171C                                 l2965 16BE  
                               l2957 165E                                 l2949 15F8  
                               l2877 307E                                 l2885 2FAA  
                               l2869 2F92                                 SOS@a 0004  
                               l2895 3342                                 l2887 331A  
                               l2799 2D0C                                 l2975 1720  
                               l2967 16C2                                 l2959 1662  
                               l2991 2860                                 l2879 308C  
                               l2889 331E                                 l2977 1750  
                               l2969 16EC                                 l2897 1344  
                               l2993 2874                                 l2985 283C  
                               l2979 1754                                 l2899 1348  
                               l2995 2876                                 l2987 2848  
                               l2997 2878                                 l2989 285C  
                               l2999 2884                                 STR_1 0E01  
                               u2000 19A4                                 u2001 19A0  
                               u2010 19BE                                 u2011 19BA  
                               u2020 19D8                                 u2021 19D4  
                               u2110 3458                                 u2030 19E8  
                               u2111 3450                                 u2031 19E4  
                               u2040 19FA                                 u2200 221E  
                               u3000 0FA6                                 u2041 19F6  
                               u2201 221A                                 u3001 0FA2  
                               u2130 1F46                                 u2210 27B2  
                               u2050 1A0A                                 u3010 0FD8  
                               u2131 1F42                                 u2211 27AE  
                               u2051 1A06                                 u3011 0FD4  
                               u2140 2016                                 u2108 34A4  
                               u2220 27E0                                 u2300 361E  
                               u2060 1A22                                 u3100 12E0  
                               u3020 0FEC                                 u2141 2012  
                               u2221 27DC                                 u2301 361A  
                               u2061 1A1E                                 u3101 12DC  
                               u3021 0FE8                                 u2070 354A  
                               u2230 2838                                 u2310 2F50  
                               u3110 1314                                 u3030 1060  
                               u2071 3542                                 u2231 2834  
                               u2311 2F4C                                 u3111 1310  
                               u3031 105C                                 u2128 345A  
                               u1600 2AAC                                 u2320 2F6E  
                               u2240 350A                                 u3120 1340  
                               u3040 1128                         _BAUD4CONbits 000EE9  
                               u1601 2AA8                                 u2321 2F6A  
                               u2241 3502                                 u3121 133C  
                               u3041 1124                                 _LATE 000F7D  
                               u2154 2070                                 u2090 34A2  
                               u2410 13E0                                 u1610 2AE2  
                               u2170 210E                                 u2330 2F8A  
                               u3050 118A                                 u2155 206C  
                               u2091 349A                                 u2411 13DC  
                               u1611 2ADE                                 u2171 210A  
                               u2331 2F86                                 u3051 1186  
                               _LATG 000F7F                                 u1620 33E2  
                               u2164 20DA                                 u2500 1566  
                               u2420 1400                                 u2180 2156  
                               u2340 30CE                                 u2260 352A  
                               u3060 119A                                 u1621 33DE  
                               u2165 20D6                                 u2501 1562  
                               u2421 13FC                                 u1701 230C  
                               u2181 2152                                 u2341 30CA  
                               u2261 3522                                 u3061 1196  
                               u1630 33F8                                 u2510 158A  
                               u2430 1426                                 u1710 2330  
                               u2190 217A                                 u2350 2FBC  
                               u3070 11FC                                 u1631 33F4  
                               u2511 1586                                 u2431 1422  
                               u1711 232C                                 u2191 2176  
                               u3207 310E                                 u2351 2FB4  
                               u3071 11F8                                 u2280 34E8  
                               u2088 354C                                 u2600 171C  
                               u2520 15AA                                 u2440 144E  
                               u1720 235A                                 u1800 26CE  
                               u1640 3260                                 u2408 2FFE  
                               u3080 1220                          main@maxTime 0090  
                               u2281 34E0                                 u3217 2784  
                               u2601 1718                                 u2521 15A6  
                               u2441 144A                                 u1721 2356  
                               u1801 26CA                                 u1641 325C  
                               u3081 121C                                 u3137 0EE4  
                               u2610 1750                                 u2530 15CA  
                               u2450 14B2                                 u1730 239A  
                               u1650 330C                                 u1810 2B3A  
                               u2370 2FDA                                 u2258 350C  
                               u3090 12C6                                 _T2PR 000FBC  
                               u3307 2E2A                                 u3227 27C0  
                               u2611 174C                                 u2531 15C6  
                               u2451 14AE                                 u1731 2396  
                               u1651 3308                                 u1811 2B36  
                               u2371 2FD2                                 u3091 12C2  
                               u3147 0F1C                                 u1900 2C7C  
                               u1660 328C                                 u2620 1784  
                               u2540 15F8                                 u2460 14D6  
                               u1740 23E4                                 u1580 2A72  
                               u1820 2B5C                                 u2700 25A6  
                               u3317 2E5C                                 u1901 2C78  
                               u1661 3284                                 u3237 2816  
                               u2621 1780                                 u2541 15F4  
                               u2461 14D2                                 u1741 23E0  
                               u1581 2A6E                                 u1821 2B58  
                               u2701 25A2                                 u3157 11B4  
                               u1910 2CA2                                 u2710 2F34  
                               u2550 162C                                 u2470 14FA  
                               u2630 1A84                                 u1750 25BE  
                               u1590 2A84                                 u1830 2BB2  
                               u2390 2FFC                                 u2278 352C  
                               u3327 2E8E                                 u1911 2C9E  
                               u2711 2F30                                 u3247 2CBE  
                               u2551 1628                                 u2471 14F6  
                               u2631 1A80                                 u1751 25BA  
                               u1591 2A80                                 u1831 2BAE  
                               u2391 2FF4                                 u3167 11D6  
                               u2560 165E                                 u2480 151E  
                               u1680 22B0                                 u1760 25F0  
                               u1840 2BC2                                 u1920 17BC  
                               u2640 3130                                 u2368 2FBE  
                               u2800 1EF4                                 u2720 1D2C  
                               u3257 2CEA                                 u2561 165A  
                               u2481 151A                                 u1681 22AC  
                               u1761 25EC                                 u1841 2BBE  
                               u1921 17B6                                 u2641 312C  
                               u3177 24BA                                 u2801 1EF0  
                               u2721 1D28                                 u2298 34EA  
                               u2570 168E                                 u2490 1542  
                               u2810 2D7A                                 u1690 22E2  
                               u1770 262E                                 u1850 32BE  
                               u1930 17BE                                 u2650 2438  
                               u2730 1D66                                 u3267 2D16  
                               u2571 168A                                 u2491 153E  
                               u2811 2D76                                 u1691 22DE  
                               u1771 262A                                 u1851 32BA  
                               u3187 250A                                 u2651 2434  
                               u2731 1D62                                 u1860 2C02  
                               u2580 16BE                                 u2820 2D92  
                               u1780 2658                                 u1940 17D4  
                               u2900 340C                                 u2388 2FDC  
                               u2660 24DC                                 u2740 1DA0  
                               u1861 2BFE                                 u3277 2D42  
                               u2581 16BA                                 u2821 2D8E  
                               u1781 2654                                 u1941 17D0  
                               u2901 3404                                 u3197 2564  
                               u2661 24D8                                 u2741 1D9C  
                               u1870 2C1C                                 u1678 328E  
                               u2590 16EC                                 u2830 2DAA  
                               u1790 2686                                 u1950 1804  
                               u2670 252E                                 u2750 1DDA  
                               u1871 2C18                                 u3287 2F06  
                               u2591 16E8                                 u2831 2DA6  
                               u1791 2682                                 u1951 1800  
                               u2671 252A                                 u2751 1DD6  
                               u1880 2C42                                 u2840 2DC2  
                               u1960 1820                                 u2920 34C6  
                               u2680 2586                                 u2760 1E14  
                               u3297 332E                                 u1881 2C3E  
                               u2841 2DBE                                 u1961 181C  
                               u2921 34BE                                 u2681 2582  
                               u2761 1E10                                 u1890 2C60  
                               u2850 2DDA                                 u1970 184E  
                               u2690 2594                                 u2770 1E4E  
                               u1891 2C5C                                 u2851 2DD6  
                               u1971 184A                                 u2691 2590  
                               u2771 1E4A                                 u2940 2E4A  
                               u2860 2DF2                                 u1980 185C  
                               u2780 1E84                                 u2941 2E46  
                               u2861 2DEE                                 u1981 1858  
                               u2781 1E80                                 u2950 2E7C  
                               u2870 2E0A                                 u1990 1986  
                               u2918 340E                                 u2790 1EBA  
                               u2951 2E78                                 u2871 2E06  
                               u1991 1982                                 u2791 1EB6  
                               u2880 35A8                                 u2960 2EAE  
                               u2881 35A4                                 u2961 2EAA  
                               u2890 337C                                 u2938 34C8  
                               u2970 0ED4                                 u2891 3378  
                               u2971 0ED0                                 u2980 0F0C  
                               u2981 0F08                                 u2990 0F56  
                               u2991 0F52                                 abs@a 0013  
                               _dbuf 0100                                 _main 0E14  
                               _dtoa 178C                                 _scan 2CB4  
                               _prec 00EA                          main@oppTurn 0097  
                               _nout 00E6                                 pad@i 0018  
                               pad@p 0015                                 fsr1h 000FE2  
                               fsr2h 000FDA                                 indf1 000FE7  
                               indf2 000FDF                                 fsr1l 000FE1  
                               pad@w 001A                                 fsr2l 000FD9  
                        main@motions 00D4                                 btemp 005E  
                               _stop 30D8                                 prodh 000FF4  
                               prodl 000FF3                                 start 0034  
                   __end_of_ADC_init 360C                         identifier@aB 0024  
                       identifier@aC 001E                         identifier@aG 0022  
                    __end_of_HighISR 0034                         identifier@aR 0020  
                       identifier@mL 0026                         identifier@mR 0028  
                       ___param_bank 000000                         main@ambientB 00AD  
                       main@ambientC 00B5                         main@ambientG 00A5  
                       main@ambientR 009D                                ??_SOS 0002  
                              ??_abs 0015                                ??_pad 0017  
                    __end_of___aodiv 2426                         main@complete 0093  
                              ?_main 0001                                ?_dtoa 001C  
                    __end_of___aomod 2710                                _ADPCH 000F5F  
                              ?_scan 000F                      __end_of___awdiv 2CB4  
                              ?_stop 0014             __size_of_initDCmotorsPWM 0120  
                    ___awdiv@divisor 0003                      __end_of___lwdiv 2FAA  
                              i2l464 001E                                i2l466 0030  
                    ___awdiv@counter 0005                         vfpfcnvrt@fmt 0042  
                              _TMR0H 000FD4                                _TMR0L 000FD3  
                  identifier@redVals 002F                      color_read@start 000A  
            __end_of_sendCharSerial4 3624                         main@interval 00BD  
         __end_of_I2C_2_Master_Start 3668           __end_of_I2C_2_Master_Write 3654  
                  identifier@tracker 004F                      __end_of_initRGB 3648  
       ??_color_interrupt_clearReset 0003                                _flags 00EC  
                              _fputc 2A60                __size_of_turnFunction 0210  
                              _fputs 321E                                pad@fp 0011  
                              _width 00E8                                _putch 3672  
                              dtoa@d 001E                                dtoa@i 003E  
                              dtoa@n 0036                                dtoa@p 0030  
                              dtoa@s 0034                                dtoa@w 0032  
                              scan@B 0015                                scan@C 000F  
                              scan@G 0013                                scan@R 0011  
                              tablat 000FF5                      __end_of_shuffle 283A  
                    __end_of_toggleB 346C                      __end_of_toggleG 34B4  
                    __end_of_toggleR 3558                                ttemp5 005F  
                              ttemp6 0062                                ttemp7 0066  
                              status 000FD8                                wtemp8 005F  
                    __end_of_sprintf 31D8              __end_of_color_read_RGBC 3076  
              _I2C_2_Master_RepStart 3668                      __initialization 337E  
                       __end_of_main 1344                         __end_of_dtoa 1A70  
                       __end_of_scan 2D66                         __end_of_stop 3132  
__size_of_color_interrupt_clearReset 0016                               ??_main 006A  
                             ??_dtoa 0026                               ??_scan 0017  
                             ??_stop 0018                        __activetblptr 000001  
                       _turnFunction 1D1A                   identifier@blueVals 0047  
                       ?_setMotorPWM 0009                               ?_fputc 0001  
                             ?_fputs 000A                               _ADRESH 000F64  
                   ___awdiv@dividend 0001                               ?_putch 0001  
                             _RC0PPS 000E62                               _RE2PPS 000E74  
                             _RD5PPS 000E6F                               _RC7PPS 000E69  
                             _RD6PPS 000E70                               i2l2411 000A  
                             i2l2413 001A                               i2l2415 002C  
                          ??_HighISR 0001             __end_of_color_click_init 334E  
                             _RX4PPS 000E15                               _TX4REG 000EE4  
                  initDCmotorsPWM@mL 0014                    initDCmotorsPWM@mR 0016  
                       ??_ADC_getval 0003                        ??_Timer0_init 0001  
                       vfprintf@cfmt 0056                            ??___aodiv 0011  
                          ??___aomod 0011                               ___wmul 3420  
                          ??___awdiv 0005                            ??___lwdiv 000F  
                             clear_0 3384                               clear_1 3390  
                   ___awdiv@quotient 0007                               pad@buf 0013  
                             dtoa@fp 001C                               _strlen 32E4  
                   __end_of_togMBeam 3420                     __end_of_togHLamp 34F8  
              fullSpeedAhead@forward 001A                            ??_initRGB 0001  
                             fputc@c 0001                     __end_of_togBrake 34D6  
                   __end_of_togLTurn 3538                               fputs@c 000E  
                             fputs@i 000F                               fputs@s 000A  
                   __end_of_togRTurn 3518                         __mediumconst 0000  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                            ?_ADC_init 0001  
                   ?_sendCharSerial4 0001                            ??_shuffle 001A  
                          ??_toggleB 0001                               putch@c 0001  
                          ??_toggleG 0001                            ??_toggleR 0001  
                   __end_of_vfprintf 30D8                               stop@mL 0014  
                             stop@mR 0016                    ??_initDCmotorsPWM 0018  
                          ??_sprintf 005E                   __end_of_ADC_getval 35B8  
                         __accesstop 0060              __end_of__initialization 3396  
             ?_I2C_2_Master_RepStart 0001                        main@turnSpecs 0094  
                      ___rparam_used 000001                     ?_color_read_RGBC 000D  
                     identifier@vals 003F                      _Interrupts_init 35D6  
                     __pcstackCOMRAM 0001                   __size_of_calibrate 0106  
                      color_read@tmp 000B                        __end_of_fputc 2B2A  
                      __end_of_fputs 3262                        __end_of_putch 3674  
                __end_of_Timer0_init 3578                       setTurnDelay@tL 000B  
                     setTurnDelay@tR 000D   __end_of_color_interrupt_clearReset 363A  
         _color_interrupt_clearReset 3624                           ??_ADC_init 0001  
                            ??_fputc 0005                              ??_fputs 000E  
                            ??_putch 0001                           __pbssBANK0 00E6  
                         __pbssBANK1 0100                    _color_writetoaddr 3578  
                       _T2CLKCONbits 000FBF         ??_Interrupts_colorclick_init 0005  
                 ?_color_writetoaddr 0003                              ?___wmul 0005  
            __size_of_fullSpeedAhead 0086                  ??_color_writetoaddr 0004  
                            ?_strlen 0001                  identifier@greenVals 0037  
                            _SP4BRGH 000EE6                              _SP4BRGL 000EE5  
                  main@battery_level 006C                   __size_of_toggleRGB 0066  
                 __size_of_vfpfcnvrt 01B4                           _identifier 1344  
                            _PWM6DCH 000FA3                              _PWM7DCH 000FA0  
                            _SSP2ADD 000ED6                              _SSP2BUF 000ED5  
                  __end_of_calibrate 2A60                           _color_read 3132  
                      ?_setTurnDelay 000B                 __size_of_setMotorPWM 01C0  
            __end_of_Interrupts_init 35F2               color_writetoaddr@value 0003  
                            _HighISR 0008                   __size_of_turnAngle 0186  
          __end_of_color_writetoaddr 3598                            _ADREFbits 000F58  
                 _I2C_2_Master_Start 365E                           calibrate@n 0003  
                         calibrate@v 0001                           _initUSART4 35B8  
                 _I2C_2_Master_Write 3648                            ?_togMBeam 0001  
                          ?_togHLamp 0001                              __Hparam 0000  
                         _initDebugs 346C                              __Lparam 0000  
                          ?_togBrake 0001                            ?_togLTurn 0001  
                          ?_togRTurn 0001                          _Timer0_init 3558  
                setTurnDelay@battery 000F              sendStringSerial4@string 0002  
                            ___aodiv 229E                              ___aomod 25AC  
                            ___awdiv 2BF0                      __size_of___wmul 0026  
                ?_I2C_2_Master_Start 0001                              ___lwdiv 2F36  
                ?_I2C_2_Master_Write 0001                            ?_vfprintf 0050  
                       __psmallconst 0E00                              __pcinit 337E  
                            __ramtop 0E00                              __ptext0 0E14  
                            __ptext1 1D1A                              __ptext2 2426  
                            __ptext3 34F8                              __ptext4 3518  
                            __ptext5 2F36                              __ptext6 2FAA  
                            __ptext7 33FA                              __ptext8 34B4  
                            __ptext9 30D8                      __size_of_strlen 0036  
                            _initRGB 363A                         __size_of_SOS 009C  
                          _T2CONbits 000FBD                         __size_of_abs 0040  
                       __size_of_pad 00C6                            _T2HLTbits 000FBE  
                            _shuffle 2710                              _toggleB 3446  
                            _toggleG 3490                              _toggleR 3538  
                     ??_setTurnDelay 0011                              _sprintf 3186  
               ??_I2C_2_Master_Start 0002                 ??_I2C_2_Master_Write 0002  
               end_of_initialization 3396                   setMotorPWM@PWMduty 0012  
                   ADC_getval@tmpval 0003                              fputc@fp 0003  
                            fputs@fp 000C               fullSpeedAhead@nomPower 0018  
                  ?_color_click_init 0001                           ??_togMBeam 0001  
                         ??_togHLamp 0001                   ??_color_click_init 0005  
                         ??_togBrake 0001                           ??_togLTurn 0001  
                  __end_of_toggleRGB 3010                           ??_togRTurn 0001  
                  __end_of_vfpfcnvrt 229E                        ?_returnSwitch 0001  
                            postdec1 000FE5                              postdec2 000FDD  
                            postinc0 000FEE                              postinc1 000FE6  
                            postinc2 000FDE                           ??_vfprintf 0056  
                color_read_RGBC@RGBC 000D                              strlen@a 0003  
                            strlen@s 0001                      _initDCmotorsPWM 283A  
                          _PORTFbits 000F8E                    __end_of_turnAngle 25AC  
                          _TRISAbits 000F81                            _TRISBbits 000F82  
                          _TRISCbits 000F83                          ?_identifier 001E  
                          _TRISDbits 000F84                            _TRISEbits 000F85  
                          _TRISFbits 000F86                            _TRISGbits 000F87  
                          _TRISHbits 000F88                          shuffle@dist 0018  
                   fullSpeedAhead@mL 0014                     fullSpeedAhead@mR 0016  
                        ?_color_read 0005             color_writetoaddr@address 0004  
                  __size_of_ADC_init 001A              ??_I2C_2_Master_RepStart 0002  
                   ?_Interrupts_init 0001           __size_of_color_writetoaddr 0020  
                        ?_initUSART4 0001            sendCharSerial4@charToSend 0001  
                         main@motorL 00DE                           main@motorR 00D6  
                   main@forwardPower 008A   __end_of_Interrupts_colorclick_init 321E  
         _Interrupts_colorclick_init 31D8                          ?_initDebugs 0001  
                     ??_returnSwitch 0001                   turnAngle@direction 001A  
                     _fullSpeedAhead 2EB0                          vfpfcnvrt@ap 0044  
                        vfpfcnvrt@fp 0040                          vfpfcnvrt@ll 0048  
                     __end_of___wmul 3446                       __end_of_strlen 331A  
                start_initialization 337E                          __end_of_SOS 2EB0  
        ?_color_interrupt_clearReset 0001                          __end_of_abs 32E4  
                        __end_of_pad 2BF0             __size_of_sendCharSerial4 0018  
                     turnAngle@delay 0018              __end_of_initDCmotorsPWM 295A  
                        vfprintf@fmt 0052               __end_of_fullSpeedAhead 2F36  
                __size_of_identifier 0448                             ??___wmul 0009  
               __end_of_setTurnDelay 1D1A             __size_of_color_read_RGBC 0066  
                __size_of_color_read 0054                             ??_strlen 0003  
                __size_of_initUSART4 001E                        __pcstackBANK0 0060  
                   ___aodiv@dividend 0001                  __size_of_initDebugs 0024  
                           ?_HighISR 0001                            _calibrate 295A  
                   ___lwdiv@dividend 000B                            _dtoa$2791 002E  
                       ?_Timer0_init 0001                      ?_fullSpeedAhead 0014  
                          __pintcode 0008                    __size_of_togMBeam 0026  
                  __size_of_togHLamp 0022                             ?___aodiv 0001  
                           ?___aomod 0001                             ?___awdiv 0001  
                   ___aodiv@quotient 0013                    __size_of_togBrake 0022  
                  __size_of_togLTurn 0020                             ?___lwdiv 000B  
                  __size_of_togRTurn 0020                 I2C_2_Master_Read@ack 0003  
                  __size_of_vfprintf 0062                        ?_turnFunction 0001  
               I2C_2_Master_Read@tmp 0004                             ?_initRGB 0001  
                        __smallconst 0E00                    _I2C_2_Master_Idle 33D2  
                  _I2C_2_Master_Init 33A8                    _I2C_2_Master_Read 3262  
                  _I2C_2_Master_Stop 3654                          turnAngle@mL 0014  
                        turnAngle@mR 0016                             _ADC_init 35F2  
                 ?_I2C_2_Master_Idle 0001                             ?_shuffle 0014  
                 ?_I2C_2_Master_Init 0001                   ?_I2C_2_Master_Read 0001  
                      ??_setMotorPWM 000B                             ?_toggleB 0001  
                           ?_toggleG 0001                             ?_toggleR 0001  
               __end_of_returnSwitch 2E14                   ?_I2C_2_Master_Stop 0001  
                   ___lwdiv@quotient 000F             initDCmotorsPWM@PWMperiod 0018  
                           ?_sprintf 0058                       __size_of_fputc 00CA  
                     __size_of_fputs 0044                       __size_of_putch 0002  
                  _sendStringSerial4 334E                  ??_I2C_2_Master_Idle 0001  
                ??_I2C_2_Master_Init 0001                  ??_I2C_2_Master_Read 0002  
                         ?_calibrate 0001                       ___wmul@product 0009  
                           _LATAbits 000F79                  ??_I2C_2_Master_Stop 0002  
                           _LATCbits 000F7B                             _LATDbits 000F7C  
                           _LATEbits 000F7D                             _LATFbits 000F7E  
                           _LATGbits 000F7F                             _LATHbits 000F80  
                           _PIE0bits 000E29                   ?_sendStringSerial4 0002  
                           i2u156_40 001A                             i2u156_41 0016  
                           i2u157_40 002C                             i2u157_41 0028  
                           _PIR0bits 000E33                             _PIR4bits 000E37  
                   ?_initDCmotorsPWM 0014                    ??_sendCharSerial4 0001  
                           _SSP2CON2 000EDA                  ??_sendStringSerial4 0004  
                           _SSP2STAT 000ED8                          _INT0PPSbits 000DF0  
                          _toggleRGB 2FAA                            _vfpfcnvrt 20EA  
                     ??_turnFunction 0006            __size_of_color_click_init 0034  
                         shuffle@dir 0019                           _ADCON0bits 000F60  
          __end_of_I2C_2_Master_Idle 33FA                           shuffle@pwr 001C  
          __end_of_I2C_2_Master_Init 33D2            __end_of_I2C_2_Master_Read 32A4  
                  ___wmul@multiplier 0005            __end_of_I2C_2_Master_Stop 365E  
                       setMotorPWM@m 0009          I2C_2_Master_Write@data_byte 0002  
                   main@reversePower 008C                            main@color 009A  
                          main@count 008E                            main@level 009B  
                  ??_color_read_RGBC 000F                         ??_identifier 002A  
                          main@store 0080                            main@turnL 00C9  
                          main@turnR 00BE                            _turnAngle 2426  
                       ??_color_read 0007            __end_of_sendStringSerial4 337E  
        __size_of_I2C_2_Master_Start 000A          __size_of_I2C_2_Master_Write 000C  
     __size_of_I2C_2_Master_RepStart 000A        __end_of_I2C_2_Master_RepStart 3672  
                     turnFunction@tL 0001                  __end_of_setMotorPWM 20EA  
                     turnFunction@tR 0003                     __size_of_HighISR 002C  
                       ??_initUSART4 0001                __size_of_setTurnDelay 02AA  
                           __Hrparam 0000                         ??_initDebugs 0001  
        ?_Interrupts_colorclick_init 0001                           _ADC_getval 3598  
                         vfprintf@ap 0054                             __Lrparam 0000  
                         vfprintf@fp 0050                         __Lsmallconst 0E00  
                 __end_of_identifier 178C                     __size_of___aodiv 0188  
                   __size_of___aomod 0164                     __size_of___awdiv 00C4  
                         ?_toggleRGB 0001                           ?_vfpfcnvrt 0040  
                   __size_of___lwdiv 0074                   __end_of_color_read 3186  
                    ___aodiv@divisor 0009                      ___aodiv@counter 0011  
                         _ANSELBbits 000E9A                           _ANSELDbits 000EA7  
                         _ANSELFbits 000EB4                           sprintf@fmt 005A  
             identifier@color_number 002E                     __size_of_initRGB 000E  
                         _T0CON0bits 000FD5                           _T0CON1bits 000FD6  
                         ?_turnAngle 0014                      ___lwdiv@divisor 000D  
                 __end_of_initUSART4 35D6                      ___lwdiv@counter 0011  
                           __ptext10 3186                             __ptext11 3076  
                           __ptext20 25AC                             __ptext12 20EA  
                           __ptext21 229E                             __ptext13 178C  
                           __ptext30 1344                             __ptext22 1A70  
                           __ptext14 2B2A                             __ptext31 2710  
                           __ptext23 334E                             __ptext15 32E4  
                           __ptext40 295A                             __ptext32 3420  
                           __ptext24 360C                             __ptext16 321E  
                           __ptext41 2EB0                             __ptext33 2CB4  
                           __ptext25 2D66                             __ptext17 2A60  
                           __ptext50 35D6                             __ptext42 1F2A  
                           __ptext34 3538                             __ptext26 35B8  
                           __ptext18 3672                             __ptext51 31D8  
                           __ptext43 2BF0                             __ptext35 3490  
                           __ptext27 363A                             __ptext19 32A4  
                           __ptext52 3578                             __ptext44 3624  
                           __ptext36 3446                             __ptext28 346C  
                           __ptext53 3648                             __ptext45 331A  
                           __ptext37 3010                             __ptext29 283A  
                           __ptext54 3654                             __ptext46 33A8  
                           __ptext38 3132                             __ptext55 365E  
                           __ptext47 3558                             __ptext39 3262  
                           __ptext56 3668                             __ptext48 2E14  
                           __ptext57 33D2                             __ptext49 34D6  
                           __ptext58 35F2                             __ptext59 3598  
                 __end_of_initDebugs 3490                     __size_of_shuffle 012A  
                   __size_of_toggleB 0026                     __size_of_toggleG 0024  
                   __size_of_toggleR 0020                         _SSP2CON1bits 000ED9  
                       _SSP2CON2bits 000EDA                         _setTurnDelay 1A70  
                   __size_of_sprintf 0052                           turnAngle@i 001D  
                        ??_calibrate 0005                        __size_of_main 0530  
                      __size_of_dtoa 02E4                        __size_of_scan 00B2  
                      __size_of_stop 005A                             _togMBeam 33FA  
                           _togHLamp 34D6                             _togBrake 34B4  
                           _togLTurn 3518                             _togRTurn 34F8  
           __size_of_Interrupts_init 001C                           _RC4STAbits 000EE7  
                           int$flags 005E                            shuffle@mL 0014  
                          shuffle@mR 0016                 __size_of_Timer0_init 0020  
                           _vfprintf 3076                             main@time 0076  
         __size_of_I2C_2_Master_Idle 0028           __size_of_I2C_2_Master_Init 002A  
         __size_of_I2C_2_Master_Read 0042                     ___aomod@dividend 0001  
         __size_of_I2C_2_Master_Stop 000A                __size_of_returnSwitch 00AE  
                      turnFunction@C 0005                           _INTCONbits 000FF2  
                        _setMotorPWM 1F2A                          _PWM6CONbits 000FA4  
         __size_of_sendStringSerial4 0030                          _PWM7CONbits 000FA1  
                           intlevel2 0000                            sprintf@ap 0062  
               __end_of_turnFunction 1F2A                     ??_fullSpeedAhead 001B  
                        ?_ADC_getval 0001                         _returnSwitch 2D66  
                    ___aomod@divisor 0009                          ??_toggleRGB 0001  
                        ??_vfpfcnvrt 0046                      ___aomod@counter 0011  
                   _color_click_init 331A                             sprintf@f 0064  
                           sprintf@s 0058                           _SSP2DATPPS 000E1D  
                         _SSP2CLKPPS 000E1C                          ??_turnAngle 001C  
__size_of_Interrupts_colorclick_init 0046                           _TX4STAbits 000EE8  
                       ___aodiv@sign 0012                      _sendCharSerial4 360C  
              turnFunction@turnSpecs 0006                         ___aomod@sign 0012  
